selected_tag:t=""
bin_dump_file:t=""

mission_settings{

  player{
    army:i=1
    wing:t="armada_01"
  }

  player_teamB{
    army:i=2
  }

  mission{
    level:t="levels/air_denmark.bin"
    type:t="testFlight"
    environment:t="Day"
    weather:t="good"
    windDirection:p3=1.0, 0.0, 0.0
    locName:t="missions/testFlight"
    restoreType:t="manual"
    optionalTakeOff:b=no
  }

  spectator_points{
  }
}

imports{
}

triggers{
  isCategory:b=yes
  is_enabled:b=yes

  init_rank_settings{
    is_enabled:b=yes
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      initMission{
      }
    }

    conditions{
    }

    actions{

      varSetString{
        value:t="armada_01"
        var:t="player"
      }

      varSetString{
        value:t="target_rank_"
        var:t="target_rank_tmp"
      }

      varSetString{
        value:t=""
        var:t="target_rank"
        input_var:t="@target_rank_tmp"
      }

      varSetInt{
        value:i=0
        var:t="target_rank_index"
        fromDescriptor:t="target_rank_index"
      }

      varAddString{
        value:t=""
        digits:i=2
        var:t="target_rank_tmp"
        input_var:t="target_rank_index"
      }

      triggerEnable{
        target:t="check_high"
        target:t="init"
      }
    }

    else_actions{
    }
  }

  check_high{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ANY"
      enableAfterComplete:b=no
    }

    events{

      initMission{
      }
    }

    conditions{

      unitCheckTag{
        target:t="@player"

        tags{
          air:b=yes
          type_utility_helicopter:b=yes
        }
      }

      unitCheckTag{
        target:t="@player"

        tags{
          air:b=yes
          type_attack_helicopter:b=yes
        }
      }
    }

    actions{

      varSetString{
        value:t="high"
        var:t="target_rank"
      }

      varSetInt{
        value:i=2
        var:t="target_rank_index"
      }
    }

    else_actions{
    }
  }

  init{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      initMission{
      }
    }

    conditions{
    }

    actions{

      unitPutToSleep{
        target:t="units_squad"
        target:t="airfield_low"
        target:t="airfield_high"
      }

      varSetString{
        value:t=""
        var:t="aircraft_ship_name"
        fromDescriptor:t="aircraft_ship_name"
      }

      triggerEnable{
        target:t="ship_spawn"
      }

      triggerEnable{
        target:t="check_rank"
      }

      triggerEnable{
        target:t="spawn_plane"
        target:t="spawn_plane2"
        target:t="spawn_plane3"
        target:t="spawn_plane4"
      }

      missionSetFade{
        mode:t="fadeOut"
        color:p3=0.0, 0.0, 0.0
        time:r=0.0
      }

      varSetInt{
        value:i=0
        var:t="air_spawn_point"
        fromDescriptor:t="air_spawn_point"
      }

      varSetBool{
        value:b=yes
        var:t="is_airfield_spawn"
        fromDescriptor:t="is_airfield_spawn"
      }

      varSetBool{
        value:b=yes
        var:t="is_ship_spawn"
        fromDescriptor:t="is_ship_spawn"
      }

      varSetBool{
        value:b=yes
        var:t="is_water_spawn"
        fromDescriptor:t="is_water_spawn"
      }

      wait{
        time:r=0.1
      }
    }

    else_actions{
    }
  }

  ship_spawn{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      initMission{
      }
    }

    conditions{

      varCompareString{
        var_value:t="aircraft_ship_name"
        value:t=""
        comparasion_func:t="notEqual"
      }

      objectExists{
        target:t="airfield01ship"
        type:t="area"
      }
    }

    actions{

      unitPutToSleep{
        target:t="airfield_ship_unit"
      }

      unitRespawn{
        delay:r=1.0
        offset:p3=0.0, 0.0, 0.0
        object:t="airfield_ship_unit"
        target:t="airfield01ship"
        resetFormation:b=no
      }

      wait{
        time:r=0.1
      }

      wait{
        time:r=1.0
      }

      changeUnit{
        unit_class:t="@aircraft_ship_name"
        weaponPreset:t=""
        isIndividual:b=yes
        hangarMission:b=no
        object:t="airfield_ship_unit"
        type:t="ship"
      }

      unitSetRoute{
        object_var_name:t=""
        object_var_comp_op:t="equal"
        route:t="ship_airfield"
        teleportToStart:b=no
        object:t="airfield_ship_unit"
      }

      unitSetProperties{
        object:t="airfield_ship_unit"
        object_marking:i=0
        object_var_name:t=""
        object_var_comp_op:t="equal"
        object_var_value:i=0
        isImmortal:b=yes
        speed:r=50.0
        lockSpeed:b=yes
      }

      varSetString{
        value:t=""
        var:t="ship_destroyer"
        input_var:t="aircraft_ship_name"
      }

      varAddString{
        value:t="_destroyer"
        digits:i=0
        var:t="ship_destroyer"
      }

      triggerEnable{
        target:t="ship_destroyer_spawn"
      }
    }

    else_actions{

      unitPutToSleep{
        target:t="airfield_ship_unit"
      }
    }
  }

  ship_destroyer_spawn{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=0.01
      }
    }

    conditions{

      objectExists{
        target:t="@ship_destroyer"
        type:t="unit"
      }

      objectExists{
        target:t="ship_destroyer_spawn_point"
        type:t="area"
      }
    }

    actions{

      unitRespawn{
        delay:r=1.0
        offset:p3=0.0, 0.0, 0.0
        object:t="@ship_destroyer"
        target:t="ship_destroyer_spawn_point"
      }

      unitSetRoute{
        object_var_name:t=""
        object_var_comp_op:t="equal"
        route:t="ship_destroyer_way"
        teleportToStart:b=no
        object:t="@ship_destroyer"
      }

      unitSetProperties{
        object:t="@ship_destroyer"
        object_marking:i=0
        object_var_name:t=""
        object_var_comp_op:t="equal"
        object_var_value:i=0
        isImmortal:b=yes
        speed:r=50.0
        lockSpeed:b=yes
      }
    }

    else_actions{
    }
  }

  check_rank{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ANY"
      enableAfterComplete:b=no
    }

    events{

      initMission{
      }
    }

    conditions{
    }

    actions{

      varAddString{
        value:t=""
        digits:i=0
        var:t="airfield_unit_name"
        input_var:t="target_rank"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="attack_area"
        input_var:t="target_rank"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="airfield_spawn"
        input_var:t="target_rank"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="target_tanks_squad_total"
        input_var:t="target_rank"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="airfield_end"
        input_var:t="target_rank"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="air_spawn"
        input_var:t="air_spawn_point"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="air_target01"
        input_var:t="target_rank"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="air_target02"
        input_var:t="target_rank"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="air_target03"
        input_var:t="target_rank"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="air_target04"
        input_var:t="target_rank"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="bdt_balance_level_tmp"
        input_var:t="target_rank"
      }

      triggerEnable{
        target:t="unit_mode_idle"
      }

      triggerEnable{
        target:t="change_air_spawn"
        target:t="check_hydroplane"
      }

      triggerEnable{
        target:t="bdt_part_init"
      }

      varSetInt{
        value:i=0
        var:t="bdt_balance_level"
        input_var:t="@bdt_balance_level_tmp"
      }
    }

    else_actions{
    }
  }

  change_air_spawn{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ANY"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=0.01
      }
    }

    conditions{

      varCompareString{
        var_value:t="air_spawn"
        value:t="spawn_area06"
        comparasion_func:t="equal"
      }

      varCompareString{
        var_value:t="air_spawn"
        value:t="spawn_area07"
        comparasion_func:t="equal"
      }
    }

    actions{

      varAddString{
        value:t="_"
        digits:i=0
        var:t="air_spawn"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="air_spawn"
        input_var:t="target_rank"
      }
    }

    else_actions{
    }
  }

  check_hydroplane{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=0.01
      }
    }

    conditions{

      unitCheckTag{
        target:t="@player"

        tags{
          air:b=yes
          type_hydroplane:b=yes
        }
      }

      varCompareBool{
        var_value:t="is_water_spawn"
        value:b=yes
        comparasion_func:t="equal"
      }

      objectExists{
        target:t="water_spawn_point"
        type:t="area"
      }
    }

    actions{

      addAirfield{
        runwayStart:t="water_spawn_point"
        runwayEnd:t="water_spawn_point01"
        runwayWidth:r=50.0
        army:i=1
        spawnPoint:t="water_spawn_point02"
        visibleOnHud:b=yes
      }

      varSetString{
        value:t="water_spawn_point"
        var:t="airfield_spawn"
      }

      triggerEnable{
        target:t="check_helicopter"
      }
    }

    else_actions{

      triggerEnable{
        target:t="check_helicopter"
        target:t="make_airfield_rank"
      }
    }
  }

  check_helicopter{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ANY"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=0.01
      }
    }

    conditions{

      unitCheckTag{
        target:t="@player"

        tags{
          air:b=yes
          type_utility_helicopter:b=yes
        }
      }

      unitCheckTag{
        target:t="@player"

        tags{
          air:b=yes
          type_attack_helicopter:b=yes
        }
      }
    }

    actions{

      varSetString{
        value:t="airfield_high"
        var:t="airfield_spawn"
      }

      varSetString{
        value:t="heli_spawn_area"
        var:t="airfield_spawn_reload"
      }

      varAddString{
        value:t="_heli"
        digits:i=0
        var:t="air_spawn"
      }

      triggerEnable{
        target:t="make_aircraft_ship"
      }
    }

    else_actions{

      triggerEnable{
        target:t="make_aircraft_ship"
      }
    }
  }

  make_aircraft_ship{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=0.01
      }
    }

    conditions{

      varCompareString{
        var_value:t="aircraft_ship_name"
        value:t=""
        comparasion_func:t="notEqual"
      }

      objectExists{
        target:t="airfield01ship"
        type:t="area"
      }

      objectExists{
        target:t="airfield_ship_unit"
        type:t="unit"
      }

      varCompareBool{
        var_value:t="is_ship_spawn"
        value:b=yes
        comparasion_func:t="equal"
      }
    }

    actions{

      wait{
        time:r=1.0
      }

      varSetString{
        value:t="airfield_ship_unit"
        var:t="airfield_spawn"
      }

      unitWakeUp{
        target:t="@airfield_unit_name"
      }

      triggerEnable{
        target:t="init_carrier"
      }
    }

    else_actions{

      unitWakeUp{
        target:t="@airfield_unit_name"
      }

      triggerEnable{
        target:t="init_carrier"
      }
    }
  }

  make_airfield_rank{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=0.01
      }
    }

    conditions{

      varCompareInt{
        var_value:t="target_rank_index"
        value:i=1
        comparasion_func:t="equal"
      }
    }

    actions{

      varSetString{
        value:t="airfield_low"
        var:t="airfield_spawn"
      }

      varSetString{
        value:t="airfield_spawnpoint_low"
        var:t="airfield_spawn_reload"
      }
    }

    else_actions{

      varSetString{
        value:t="airfield_high"
        var:t="airfield_spawn"
      }

      varSetString{
        value:t="airfield_spawnpoint_high"
        var:t="airfield_spawn_reload"
      }
    }
  }

  init_carrier{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ANY"
      enableAfterComplete:b=no
    }

    events{

      initMission{
      }
    }

    conditions{

      varCompareBool{
        var_value:t="is_airfield_spawn"
        value:b=yes
        comparasion_func:t="equal"
      }

      varCompareBool{
        var_value:t="is_ship_spawn"
        value:b=yes
        comparasion_func:t="equal"
      }

      varCompareBool{
        var_value:t="is_water_spawn"
        value:b=yes
        comparasion_func:t="equal"
      }
    }

    actions{

      triggerEnable{
        target:t="end_carrier_airfield"
      }

      triggerEnable{
        target:t="check_spawn_reload"
      }

      wait{
        time:r=0.1
      }

      missionSetFade{
        mode:t="fadeIn"
        color:p3=0.0, 0.0, 0.0
        time:r=0.1
      }

      spawnOnAirfield{
        runwayName:t="@airfield_spawn"
        objects:t="@player"
      }
    }

    else_actions{

      triggerEnable{
        target:t="end_carrier_air"
      }

      triggerEnable{
        target:t="check_spawn_reload"
      }

      unitRespawn{
        delay:r=1.0
        offset:p3=0.0, 0.0, 0.0
        object:t="@player"
        target:t="@air_spawn"
      }

      missionSetFade{
        mode:t="fadeIn"
        color:p3=0.0, 0.0, 0.0
        time:r=0.1
      }

      wait{
        time:r=2.0
      }
    }
  }

  end_carrier_airfield{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=yes
    }

    events{

      periodicEvent{
        time:r=1.0
      }
    }

    conditions{

      playersWhenStatus{
        players:t="isKilled"
        check_players:t="any"
      }
    }

    actions{

      wait{
        time:r=3.0
      }

      spawnOnAirfield{
        runwayName:t="@airfield_spawn"
        objects:t="@player"
      }
    }

    else_actions{
    }
  }

  end_carrier_air{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=yes
    }

    events{

      periodicEvent{
        time:r=1.0
      }
    }

    conditions{

      playersWhenStatus{
        players:t="isKilled"
        check_players:t="any"
      }
    }

    actions{

      wait{
        time:r=3.0
      }

      unitRespawn{
        delay:r=1.0
        offset:p3=0.0, 0.0, 0.0
        object:t="@player"
        target:t="@air_spawn"
      }
    }

    else_actions{
    }
  }

  check_spawn_reload{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=yes
    }

    events{

      periodicEvent{
        time:r=0.1
      }
    }

    conditions{

      varCompareBool{
        var_value:t="is_water_spawn"
        value:b=no
        comparasion_func:t="equal"
      }

      playersWhenStatus{
        players:t="isAlive"
        check_players:t="any"
      }

      playersWhenStatus{
        players:t="isOnGround"
        check_players:t="any"
      }

      playerWhenSpawn{
      }

      playersDistanceBetween{
        value:r=1500.0
        math:t="2D"
        players:t="isAlive"
        target_type:t="isAlive"
        check_players:t="any"
        check_targets:t="any"
        target:t="@airfield_spawn_reload"
      }
    }

    actions{

      unitMoveTo{
        object_marking:i=0
        object_var_name:t=""
        object_var_comp_op:t="equal"
        object_var_value:i=0
        target:t="@airfield_spawn_reload"
        target_var_name:t=""
        target_var_comp_op:t="equal"
        target_var_value:i=0
        target_marking:i=0
        waypointReachedDist:r=10.0
        recalculatePathDist:r=-1.0
        follow_target:b=no
        fastClimb:b=no
        destTimeMode:b=no
        teleportHeightType:t="absolute"
        useUnitHeightForTele:b=no
        shouldKeepFormation:b=no
        teleportHeightValue:r=0.0
        horizontalDirectionForTeleport:b=yes
        shouldKeepAirFormation:b=yes
        object:t="@player"
        move_type:t="teleport"
      }

      wait{
        time:r=2.0
      }
    }

    else_actions{
    }
  }

  unit_mode_idle{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=0.01
      }
    }

    conditions{
    }

    actions{

      varSetInt{
        value:i=1
        var:t="tank_num"
      }

      varSetString{
        value:t="target_tanks_idle_squad_"
        var:t="target_tanks_squad"
      }

      varSetString{
        value:t="target_tank_idle_"
        var:t="target_tank_status"
      }

      varSetString{
        value:t="unit_mode_move"
        var:t="mode_trigger"
      }

      varSetString{
        value:t="tank_spawn_idle_area"
        var:t="target_tank_spawn_status"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="target_tanks_squad"
        input_var:t="target_rank"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="target_tank_status"
        input_var:t="target_rank"
      }

      varSetBool{
        value:b=no
        var:t="is_move_unit"
      }

      triggerEnable{
        target:t="name_assemble"
      }
    }

    else_actions{
    }
  }

  unit_mode_move{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=0.01
      }
    }

    conditions{
    }

    actions{

      varSetInt{
        value:i=1
        var:t="tank_num"
      }

      varSetInt{
        value:i=0
        var:t="tank_spawn_number"
      }

      varSetString{
        value:t="target_tanks_move_squad_"
        var:t="target_tanks_squad"
      }

      varSetString{
        value:t="target_tank_move_"
        var:t="target_tank_status"
      }

      varSetString{
        value:t="tank_spawn_move_area"
        var:t="target_tank_spawn_status"
      }

      varSetString{
        value:t="unit_mode_ship"
        var:t="mode_trigger"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="target_tanks_squad"
        input_var:t="target_rank"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="target_tank_status"
        input_var:t="target_rank"
      }

      varSetBool{
        value:b=yes
        var:t="is_move_unit"
      }

      triggerEnable{
        target:t="name_assemble"
      }
    }

    else_actions{
    }
  }

  unit_mode_ship{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=0.01
      }
    }

    conditions{
    }

    actions{

      varSetInt{
        value:i=1
        var:t="tank_num"
      }

      varSetInt{
        value:i=0
        var:t="tank_spawn_number"
      }

      varSetString{
        value:t="target_tanks_ship_squad_"
        var:t="target_tanks_squad"
      }

      varSetString{
        value:t="target_tank_ship_"
        var:t="target_tank_status"
      }

      varSetString{
        value:t="tank_spawn_ship_area"
        var:t="target_tank_spawn_status"
      }

      varSetString{
        value:t="unit_mode_attack"
        var:t="mode_trigger"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="target_tanks_squad"
        input_var:t="target_rank"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="target_tank_status"
        input_var:t="target_rank"
      }

      varSetBool{
        value:b=no
        var:t="is_move_unit"
      }

      triggerEnable{
        target:t="name_assemble"
      }
    }

    else_actions{
    }
  }

  unit_mode_attack{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=0.01
      }
    }

    conditions{
    }

    actions{

      varSetInt{
        value:i=1
        var:t="tank_num"
      }

      varSetInt{
        value:i=0
        var:t="tank_spawn_number"
      }

      varSetString{
        value:t="target_tanks_attack_squad_"
        var:t="target_tanks_squad"
      }

      varSetString{
        value:t="target_tank_attack_"
        var:t="target_tank_status"
      }

      varSetString{
        value:t="tank_spawn_attack_area"
        var:t="target_tank_spawn_status"
      }

      varSetString{
        value:t="tick_killed"
        var:t="mode_trigger"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="target_tanks_squad"
        input_var:t="target_rank"
      }

      varAddString{
        value:t=""
        digits:i=0
        var:t="target_tank_status"
        input_var:t="target_rank"
      }

      varSetBool{
        value:b=yes
        var:t="is_attack_unit"
      }

      triggerEnable{
        target:t="name_assemble"
      }
    }

    else_actions{
    }
  }

  name_assemble{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=0.01
      }
    }

    conditions{
    }

    actions{

      varSetString{
        value:t=""
        var:t="tank_spawn_area"
        input_var:t="target_tank_spawn_status"
      }

      varSetString{
        value:t=""
        var:t="target_tank"
        input_var:t="target_tank_status"
      }

      varAddString{
        value:t=""
        digits:i=2
        var:t="target_tank"
        input_var:t="tank_num"
      }

      varAddString{
        value:t="_"
        digits:i=0
        var:t="target_tank"
      }

      varAddString{
        value:t=""
        digits:i=2
        var:t="target_tank"
        input_var:t="tank_num_group"
      }

      varAddString{
        value:t=""
        digits:i=2
        var:t="tank_spawn_area"
        input_var:t="tank_num"
      }

      varAddString{
        value:t="_"
        digits:i=0
        var:t="tank_spawn_area"
      }

      varAddString{
        value:t=""
        digits:i=2
        var:t="tank_spawn_area"
        input_var:t="tank_num_group"
      }

      getUnitsCount{
        target:t="@target_tanks_squad"
        var:t="tanks_total"
      }

      triggerEnable{
        target:t="@name_assemble_trigger"
      }
    }

    else_actions{
    }
  }

  check_exist{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ANY"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=0.01
      }
    }

    conditions{

      objectExists{
        target:t="@target_tank"
        type:t="unit"
      }

      varCompareInt{
        var_value:t="tanks_total"
        value:i=0
        comparasion_func:t="more"
        var_value_other:t="tank_spawn_number"
      }
    }

    actions{

      triggerEnable{
        target:t="check_tank_group"
      }
    }

    else_actions{

      unitSetProperties{
        object:t="@target_tanks_squad"
        object_marking:i=0
        object_var_name:t=""
        object_var_comp_op:t="equal"
        object_var_value:i=0
        forceVisibleOnMap:b=yes
        speed:r=25.0
        lockSpeed:b=yes
      }

      triggerEnable{
        target:t="@mode_trigger"
      }
    }
  }

  check_tank_group{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=0.01
      }
    }

    conditions{

      objectExists{
        target:t="@target_tank"
        type:t="unit"
      }

      objectExists{
        target:t="@tank_spawn_area"
        type:t="area"
      }
    }

    actions{

      unitRespawn{
        delay:r=1.0
        offset:p3=0.0, 0.0, 0.0
        object:t="@target_tank"
        target:t="@tank_spawn_area"
      }

      unitSetVar{
        object_var_name:t="killed"
        object:t="@target_tank"
        object_var_value:i=0
      }

      unitSetVar{
        object_var_name:t="self_name"
        object:t="@target_tank"
        object_var_string:t="@target_tank"
      }

      unitSetVar{
        object_var_name:t="self_spawn_area"
        object:t="@target_tank"
        object_var_string:t="@tank_spawn_area"
      }

      varModify{
        operator:t="add"
        value:r=1.0
        var:t="tank_num_group"
      }

      varModify{
        operator:t="add"
        value:r=1.0
        var:t="tank_spawn_number"
      }

      varSetString{
        value:t="check_tank_group"
        var:t="name_assemble_trigger"
      }

      triggerEnable{
        target:t="check_move_unit"
      }
    }

    else_actions{

      varSetInt{
        value:i=1
        var:t="tank_num_group"
      }

      varModify{
        operator:t="add"
        value:r=1.0
        var:t="tank_num"
      }

      varModify{
        operator:t="add"
        value:r=1.0
        var:t="tank_spawn_number"
      }

      varSetString{
        value:t="check_exist"
        var:t="name_assemble_trigger"
      }

      triggerEnable{
        target:t="name_assemble"
      }
    }
  }

  check_radar{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=0.01
      }
    }

    conditions{

      varCompareString{
        var_value:t="target_tank_spawn_status"
        value:t="tank_spawn_idle_area"
        comparasion_func:t="equal"
      }

      varCompareInt{
        var_value:t="tank_num"
        value:i=8
        comparasion_func:t="more"
      }
    }

    actions{

      unitSetProperties{
        object:t="@target_tank"
        useSearchRadar:b=yes
      }
    }

    else_actions{
    }
  }

  check_move_unit{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=0.01
      }
    }

    conditions{

      varCompareBool{
        var_value:t="is_move_unit"
        value:b=yes
        comparasion_func:t="equal"
      }
    }

    actions{

      varSetString{
        value:t="way_points_"
        var:t="way_name"
      }

      varAddString{
        value:t=""
        digits:i=2
        var:t="way_name"
        input_var:t="tank_num"
      }

      unitSetRoute{
        route:t="@way_name"
        object_var_name:t=""
        object_var_comp_op:t="equal"
        teleportToStart:b=yes
        object:t="@target_tank"
      }

      triggerEnable{
        target:t="check_attack_unit"
      }
    }

    else_actions{

      triggerEnable{
        target:t="check_attack_unit"
      }
    }
  }

  check_attack_unit{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=0.01
      }
    }

    conditions{

      varCompareBool{
        var_value:t="is_attack_unit"
        value:b=yes
        comparasion_func:t="equal"
      }
    }

    actions{

      unitAttackTarget{
        playerAttracted:b=no
        object:t="@target_tank"
        attack_type:t="fire_at_will"
        delayForObjects:p2=3.0, 7.0
        trackingTime:r=5.0
        fightAreaRadius:r=8000.0
        accuracyInZone:r=0.1
      }

      triggerEnable{
        target:t="name_assemble"
      }
    }

    else_actions{

      unitSetProperties{
        object:t="@target_tanks_squad"
        object_marking:i=0
        object_var_name:t=""
        object_var_comp_op:t="equal"
        object_var_value:i=0
        forceVisibleOnMap:b=yes
        attack_type:t="dont_aim"
      }

      triggerEnable{
        target:t="name_assemble"
      }
    }
  }

  spawn_plane{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=1.0
      }
    }

    conditions{

      objectExists{
        target:t="@air_target01"
        type:t="unit"
      }

      objectExists{
        target:t="flight_point01"
        type:t="area"
      }
    }

    actions{

      unitRespawn{
        delay:r=1.0
        offset:p3=0.0, 0.0, 0.0
        object:t="@air_target01"
        target:t="flight_point01"
      }

      wait{
        time:r=0.2
      }

      unitSetRoute{
        route:t="flight_way_points_01"
        object_var_name:t=""
        object_var_comp_op:t="equal"
        teleportToStart:b=yes
        object:t="@air_target01"
      }

      unitSetIndication{
        set:b=yes
        target:t="@air_target01"
      }

      triggerEnable{
        target:t="respawn_plane"
      }
    }

    else_actions{
    }
  }

  spawn_plane2{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=1.0
      }
    }

    conditions{

      objectExists{
        target:t="@air_target02"
        type:t="unit"
      }

      objectExists{
        target:t="flight_point02"
        type:t="area"
      }
    }

    actions{

      unitRespawn{
        delay:r=1.0
        offset:p3=0.0, 0.0, 0.0
        object:t="@air_target02"
        target:t="flight_point02"
      }

      wait{
        time:r=0.2
      }

      unitSetRoute{
        route:t="flight_way_points_02"
        object_var_name:t=""
        object_var_comp_op:t="equal"
        teleportToStart:b=yes
        object:t="@air_target02"
      }

      unitSetIndication{
        set:b=yes
        target:t="@air_target02"
      }

      triggerEnable{
        target:t="respawn_plane2"
      }
    }

    else_actions{
    }
  }

  spawn_plane3{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=1.0
      }
    }

    conditions{

      objectExists{
        target:t="@air_target03"
        type:t="unit"
      }

      objectExists{
        target:t="flight_point03"
        type:t="area"
      }
    }

    actions{

      unitRespawn{
        delay:r=1.0
        offset:p3=0.0, 0.0, 0.0
        object:t="@air_target03"
        target:t="flight_point03"
      }

      wait{
        time:r=0.2
      }

      unitSetRoute{
        route:t="flight_way_points_03"
        object_var_name:t=""
        object_var_comp_op:t="equal"
        teleportToStart:b=yes
        object:t="@air_target03"
      }

      unitSetIndication{
        set:b=yes
        target:t="@air_target03"
      }

      triggerEnable{
        target:t="respawn_plane3"
      }
    }

    else_actions{
    }
  }

  spawn_plane4{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=1.0
      }
    }

    conditions{

      objectExists{
        target:t="@air_target04"
        type:t="unit"
      }

      objectExists{
        target:t="flight_point04"
        type:t="area"
      }
    }

    actions{

      unitRespawn{
        delay:r=1.0
        offset:p3=0.0, 0.0, 0.0
        object:t="@air_target04"
        target:t="flight_point04"
      }

      wait{
        time:r=0.2
      }

      unitSetRoute{
        route:t="flight_way_points_04"
        object_var_name:t=""
        object_var_comp_op:t="equal"
        teleportToStart:b=yes
        object:t="@air_target04"
      }

      unitSetIndication{
        set:b=yes
        target:t="@air_target04"
      }

      triggerEnable{
        target:t="respawn_plane4"
      }
    }

    else_actions{
    }
  }

  mark_battle_area{
    is_enabled:b=yes
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=1.0
      }
    }

    conditions{

      objectExists{
        target:t="game_area"
        type:t="area"
      }
    }

    actions{

      missionBattleArea{
        air:b=no
        ground:b=yes
        mapArea:b=yes
        airMapArea:b=no
        killArea:b=no
        detectionArea:b=no
        killOutOfBattleArea:b=yes
        area:t="game_area"
        team:t="A"
      }
    }

    else_actions{
    }
  }

  tick_killed{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=1.0
      }
    }

    conditions{

      unitWhenStatus{
        object_type:t="isKilled"
        check_objects:t="any"
        object_marking:i=0
        object_var_name:t=""
        object_var_comp_op:t="equal"
        object_var_value:i=0
        target_type:t="isAlive"
        check_period:r=1.0
        object:t="@target_tanks_squad_total"
      }
    }

    actions{

      unitModifyVar{
        object_var_name:t="killed"
        operator:t="add"
        value:i=1
        object:t="@target_tanks_squad_total"
        useForTriggerFiltered:b=yes
      }

      triggerEnable{
        target:t="respawn_target"
      }
    }

    else_actions{
    }
  }

  respawn_target{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=0.01
      }
    }

    conditions{

      unitWhenStatus{
        object_type:t="isUnitVar"
        check_objects:t="any"
        object_marking:i=0
        object_var_name:t="killed"
        object_var_comp_op:t="more"
        object_var_value:i=0
        target_type:t="isAlive"
        check_period:r=1.0
        object:t="@target_tanks_squad_total"
        input_var:t="target_respawn_time"
      }
    }

    actions{

      unitGetVar{
        object_marking:i=0
        object:t="@target_tanks_squad_total"
        object_var_name:t="self_name"
        useForTriggerFiltered:b=yes
        out_var_string:t="target_tank"
      }

      unitGetVar{
        object_marking:i=0
        object:t="@target_tank"
        object_var_name:t="self_spawn_area"
        out_var_string:t="tank_spawn_area"
      }

      unitSetVar{
        object_var_name:t="killed"
        object:t="@target_tank"
        object_var_value:i=0
      }

      unitRespawn{
        delay:r=0.0
        offset:p3=0.0, 0.0, 0.0
        object:t="@target_tank"
        target:t="@tank_spawn_area"
        needStopOnRespawn:b=yes
      }

      unitSetProperties{
        object:t="@target_tank"
        useSearchRadar:b=yes
      }

      triggerEnable{
        target:t="tick_killed"
      }
    }

    else_actions{

      triggerEnable{
        target:t="tick_killed"
      }
    }
  }

  respawn_plane{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=yes
    }

    events{

      periodicEvent{
        time:r=1.0
      }
    }

    conditions{

      unitWhenStatus{
        object_type:t="isInactive"
        check_objects:t="any"
        object_marking:i=0
        object_var_name:t=""
        object_var_comp_op:t="equal"
        object_var_value:i=0
        target_type:t="isAlive"
        check_period:r=1.0
        object:t="@air_target01"
      }
    }

    actions{

      wait{
        time:r=5.0
      }

      wait{
        time:r=1.0
      }

      unitPutToSleep{
        target:t="@air_target01"
      }

      unitRespawn{
        delay:r=1.0
        offset:p3=0.0, 0.0, 0.0
        object:t="@air_target01"
        target:t="flight_point01"
      }

      unitSetIndication{
        set:b=yes
        target:t="@air_target01"
      }
    }

    else_actions{
    }
  }

  respawn_plane2{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=yes
    }

    events{

      periodicEvent{
        time:r=1.0
      }
    }

    conditions{

      unitWhenStatus{
        object_type:t="isInactive"
        check_objects:t="any"
        object_marking:i=0
        object_var_name:t=""
        object_var_comp_op:t="equal"
        object_var_value:i=0
        target_type:t="isAlive"
        check_period:r=1.0
        object:t="@air_target02"
      }
    }

    actions{

      wait{
        time:r=5.0
      }

      wait{
        time:r=1.0
      }

      unitPutToSleep{
        target:t="@air_target02"
      }

      unitRespawn{
        delay:r=1.0
        offset:p3=0.0, 0.0, 0.0
        object:t="@air_target02"
        target:t="flight_point02"
      }

      unitSetIndication{
        set:b=yes
        target:t="@air_target02"
      }
    }

    else_actions{
    }
  }

  respawn_plane3{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=yes
    }

    events{

      periodicEvent{
        time:r=1.0
      }
    }

    conditions{

      unitWhenStatus{
        object_type:t="isInactive"
        check_objects:t="any"
        object_marking:i=0
        object_var_name:t=""
        object_var_comp_op:t="equal"
        object_var_value:i=0
        target_type:t="isAlive"
        check_period:r=1.0
        object:t="@air_target03"
      }
    }

    actions{

      wait{
        time:r=5.0
      }

      wait{
        time:r=1.0
      }

      unitPutToSleep{
        target:t="@air_target03"
      }

      unitRespawn{
        delay:r=1.0
        offset:p3=0.0, 0.0, 0.0
        object:t="@air_target03"
        target:t="flight_point03"
      }

      unitSetIndication{
        set:b=yes
        target:t="@air_target03"
      }
    }

    else_actions{
    }
  }

  respawn_plane4{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=yes
    }

    events{

      periodicEvent{
        time:r=1.0
      }
    }

    conditions{

      unitWhenStatus{
        object_type:t="isInactive"
        check_objects:t="any"
        object_marking:i=0
        object_var_name:t=""
        object_var_comp_op:t="equal"
        object_var_value:i=0
        target_type:t="isAlive"
        check_period:r=1.0
        object:t="@air_target04"
      }
    }

    actions{

      wait{
        time:r=5.0
      }

      wait{
        time:r=1.0
      }

      unitPutToSleep{
        target:t="@air_target04"
      }

      unitRespawn{
        delay:r=1.0
        offset:p3=0.0, 0.0, 0.0
        object:t="@air_target04"
        target:t="flight_point04"
      }

      unitSetIndication{
        set:b=yes
        target:t="@air_target04"
      }
    }

    else_actions{
    }
  }

  reload_missiles{
    is_enabled:b=yes
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=yes
    }

    events{

      periodicEvent{
        time:r=0.01
      }
    }

    conditions{

      objectExists{
        target:t="target_tank_attack_high04_01"
        type:t="unit"
      }

      unitWhenStatus{
        object_type:t="hasMissilesInWorld"
        check_objects:t="any"
        object_marking:i=0
        object_var_name:t=""
        object_var_comp_op:t="equal"
        object_var_value:i=0
        target_type:t="isAlive"
        check_period:r=1.0
        object:t="target_tank_attack_high04_01"
      }
    }

    actions{

      unitSetZeroAmmo{
        target:t="target_tank_attack_high04_01"
      }

      wait{
        time:r=30.0
      }

      unitRestore{
        target_marking:i=0
        ressurectIfDead:b=no
        fullRestore:b=no
        target:t="target_tank_attack_high04_01"
        ammoRestore:b=yes
      }
    }

    else_actions{
    }
  }

  check_attack_area{
    is_enabled:b=yes
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=yes
    }

    events{

      periodicEvent{
        time:r=1.0
      }
    }

    conditions{

      unitWhenInArea{
        math:t="2D"
        object_type:t="isAlive"
        object_marking:i=0
        object_var_name:t=""
        object_var_comp_op:t="equal"
        check_objects:t="any"
        object:t="@player"
        target:t="@attack_area"
      }
    }

    actions{

      playHint{
        hintType:t="standard"
        name:t="hints/test_flight/attack_area"
        action:t="show"
        shouldFadeOut:b=no
        isOverFade:b=no
        time:r=-1.0
        priority:i=0
        target_marking:i=0
        object_var_name:t=""
        object_var_comp_op:t="equal"
        object_var_value:i=0
      }

      unitSetIndication{
        set:b=yes
        target:t="@target_tanks_squad"
      }
    }

    else_actions{

      playHint{
        hintType:t="standard"
        name:t=""
        action:t="show"
        shouldFadeOut:b=no
        isOverFade:b=no
        time:r=-1.0
        priority:i=0
        target_marking:i=0
        object_var_name:t=""
        object_var_comp_op:t="equal"
        object_var_value:i=0
      }
    }
  }
}

mission_objectives{
  isCategory:b=yes
  is_enabled:b=yes
}

variables{
  tanks_total:i=0
  tank_spawn_number:i=0
  mode_trigger:t=""
  is_move_unit:b=no
  is_attack_unit:b=no
  way_name:t=""
  target_tank_spawn_status:t=""
  target_tanks_squad_total:t="target_tanks_squad_"
  airfield_spawn:t="airfield_"
  air_spawn:t="spawn_area0"
  player:t=""
  target_tank:t=""
  tank_num:i=1
  tank_num_group:i=1
  tank_spawn_area:t=""
  target_tanks_squad:t=""
  air_target01:t="flight_target01_"
  air_target02:t="flight_target02_"
  air_target03:t="flight_target03_"
  air_target04:t="flight_target04_"
  target_tank_status:t=""
  name_assemble_trigger:t="check_exist"
  aircraft_ship_name:t=""
  airfield_start:t="airfield00plane_"
  airfield_end:t="airfield01plane_"
  airfield_unit_name:t="airfield_"
  air_spawn_point:i=1
  is_airfield_spawn:b=no
  airfield_spawn_area:t=""
  attack_area:t="attack_area_"
  base_respawn_time:i=15
  target_respawn_time:i=30
  airfield_spawn_reload:t=""
  is_ship_spawn:b=yes
  is_water_spawn:b=yes
  ship_destroyer:t=""
  target_rank_index:i=0
  target_rank:t=""
  target_rank_01:t="low"
  target_rank_02:t="high"
  target_rank_tmp:t=""
  bdt_balance_level_low:i=1
  bdt_balance_level_high:i=50
  bdt_balance_level_tmp:t="bdt_balance_level_"
}

dialogs{
}

airfields{
}

effects{
}

units{
}

areas{
}

objLayers{

  layer{
    enabled:b=yes
  }

  layer{
    enabled:b=yes
  }

  layer{
    enabled:b=yes
  }

  layer{
    enabled:b=yes
  }
}

wayPoints{
}