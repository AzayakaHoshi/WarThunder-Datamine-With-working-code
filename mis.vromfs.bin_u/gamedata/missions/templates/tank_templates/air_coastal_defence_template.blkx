selected_tag:t=""
bin_dump_file:t=""

mission_settings{

  atmosphere{
    pressure:r=760.0
    temperature:r=30.0
  }

  player{
    army:i=1
  }

  player_teamB{
    army:i=2
  }

  mission{
    level:t="levels/water.bin"
    type:t="domination"
    restoreType:t="attempts"
    optionalTakeOff:b=no
    environment:t="Day"
    weather:t="clear"
    scoreLimit:i=6400
    timeLimit:i=25
    deathPenaltyMul:r=0.0
  }

  spectator_points{
  }
}

imports{
}

triggers{
  isCategory:b=yes
  is_enabled:b=yes

  coastdef_init{
    is_enabled:b=yes
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      initMission{
      }
    }

    conditions{
    }

    actions{

      missionCreateRespawnBasesByTemplate{
        loc_name:t="missions/spawn"
        spawnEffect:b=no
        isStrictSpawn:b=no
        isAirfield:b=no
        isUnit:b=no
        createRandomBase:b=yes
        useExisting:b=no
        isIndividual:b=yes
        removeAreas:b=no
        canSpawnOnNeutral:b=no
        showOnMap:b=yes
        offset:p3=0.0, 0.0, 0.0
        radius:r=-1.0
        target:t="t2_tanks_spawn"
        postfix:t=""
        maxBasesCount:i=4
        team:t="B"

        tags{
          tank:b=yes
        }
      }

      missionMarkAsRespawnPoint{
        loc_name:t="missions/air_spawn"
        spawnEffect:b=no
        isStrictSpawn:b=no
        resetStrictSpawnIndex:b=no
        isAirfield:b=no
        isUnit:b=no
        useExisting:b=no
        isIndividual:b=no
        onlyOnePlayerPerSpawnPoint:b=no
        removeAreas:b=no
        replaceAreas:b=no
        canSpawnOnNeutral:b=no
        showOnMap:b=yes
        radius:r=-1.0
        forceCreate:b=no
        target:t="t2_air_spawn"
        spawnArrangeTo:t="t1_air_spawn"
        team:t="B"

        tags{
          tank:b=no
          ship:b=no
        }
      }

      missionMarkAsRespawnPoint{
        loc_name:t="missions/air_spawn"
        spawnEffect:b=no
        isStrictSpawn:b=no
        resetStrictSpawnIndex:b=no
        isAirfield:b=no
        isUnit:b=no
        useExisting:b=no
        isIndividual:b=no
        onlyOnePlayerPerSpawnPoint:b=no
        removeAreas:b=no
        replaceAreas:b=no
        canSpawnOnNeutral:b=no
        showOnMap:b=yes
        radius:r=-1.0
        forceCreate:b=no
        target:t="t1_air_spawn"
        spawnArrangeTo:t="t2_air_spawn"
        team:t="A"

        tags{
          tank:b=no
          ship:b=no
        }
      }

      varSetString{
        value:t="battle_area"
        var:t="battle_area_name"
      }

      wait{
        time:r=5.0
      }

      moAddMissionObjective{
        target:t="avg_coastdef_objective_def"
        object_var_comp_op:t="equal"
        object_var_name:t=""
      }

      moAddMissionObjective{
        target:t="avg_coastdef_objective_att"
        object_var_comp_op:t="equal"
        object_var_name:t=""
      }

      comment{
        value:t=""
      }

      varSetInt{
        value:i=0
        var:t="coastdef_timer_from_desc"
        fromDescriptor:t="mission_timer"
      }

      triggerEnable{
        target:t="set_coastdef_timer"
        target:t="coastdef_set_ticket_var"
      }
    }

    else_actions{
    }
  }

  coastdef_check_battle_area_exist{
    is_enabled:b=yes
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      initMission{
      }
    }

    conditions{

      objectExists{
        target:t="@battle_area_name"
        type:t="area"
      }
    }

    actions{

      missionBattleArea{
        air:b=no
        ground:b=yes
        mapArea:b=yes
        killOutOfBattleArea:b=yes
        target:t="@battle_area_name"
        newGridHorizontalCellCount:i=0
        killArea:b=no
        detectionArea:b=no
        airMapArea:b=no
        area:t="@battle_area_name"
      }
    }

    else_actions{
    }
  }

  coastdef_set_ticket_var{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=1.0
      }
    }

    conditions{

      varCompareInt{
        var_value:t="coastdef_timer_from_desc"
        value:i=0
        comparasion_func:t="more"
      }
    }

    actions{

      varSetInt{
        value:i=0
        var:t="t1_tickets_for_1_sec"
        source_var:t="mpTi1"
      }

      varModify{
        operator:t="divAB"
        value:r=1.0
        var:t="t1_tickets_for_1_sec"
        use_variable:b=yes
        var_value:t="coastdef_timer_from_desc"
      }

      varModify{
        operator:t="mul"
        value:r=-1.0
        var:t="t1_tickets_for_1_sec"
      }
    }

    else_actions{
    }
  }

  set_coastdef_timer{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      timeExpires{
        time:r=0.0
      }
    }

    conditions{

      varCompareInt{
        var_value:t="coastdef_timer_from_desc"
        value:i=0
        comparasion_func:t="more"
      }
    }

    actions{

      varSetInt{
        value:i=0
        var:t="coastdef_cur_timer"
        input_var:t="coastdef_timer_from_desc"
      }

      triggerEnable{
        target:t="coastdef_timer"
        target:t="coastdef_timer_end"
      }
    }

    else_actions{

      varSetInt{
        value:i=0
        var:t="coastdef_cur_timer"
        input_var:t="coastdef_timer"
      }

      triggerEnable{
        target:t="coastdef_timer"
        target:t="coastdef_timer_end"
      }
    }
  }

  coastdef_timer{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=yes
    }

    events{

      periodicEvent{
        time:r=1.0
      }
    }

    conditions{
    }

    actions{

      varModify{
        operator:t="add"
        value:r=-1.0
        var:t="coastdef_cur_timer"
      }

      missionSetTimeIndicator{
        var:t="coastdef_cur_timer"
      }

      gameMPChangeScore{
        value:i=1
        valueSystem:t="amount"
        var:t="t1_tickets_for_1_sec"
        team:t="A"
      }
    }

    else_actions{
    }
  }

  coastdef_timer_end{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=no
    }

    events{

      periodicEvent{
        time:r=1.0
      }
    }

    conditions{

      varCompareInt{
        var_value:t="coastdef_cur_timer"
        value:i=1
        comparasion_func:t="less"
      }
    }

    actions{

      triggerEnable{
        target:t="coastdef_t2_win"
      }
    }

    else_actions{
    }
  }

  coastdef_t2_win{
    is_enabled:b=no
    comments:t=""

    props{
      actionsType:t="PERFORM_ONE_BY_ONE"
      conditionsType:t="ALL"
      enableAfterComplete:b=yes
    }

    events{

      periodicEvent{
        time:r=0.5
      }
    }

    conditions{
    }

    actions{

      gameMPChangeScore{
        value:i=-20
        valueSystem:t="percentage"
        team:t="A"
      }
    }

    else_actions{
    }
  }
}

mission_objectives{
  isCategory:b=yes
  is_enabled:b=yes

  avg_coastdef_objective_def{
    is_enabled:b=no
    comments:t=""
    type:t="abstractMissionObjective"

    props{
      isPrimary:b=yes
      timeLimit:i=3600
      team:t="B"
    }

    onSuccess{
    }

    onFailed{
    }
  }

  avg_coastdef_objective_att{
    is_enabled:b=no
    comments:t=""
    type:t="abstractMissionObjective"

    props{
      isPrimary:b=yes
      timeLimit:i=3600
      team:t="A"
    }

    onSuccess{
    }

    onFailed{
    }
  }
}

variables{
  coastdef_timer:i=900
  coastdef_cur_timer:i=0
  coastdef_timer_from_desc:i=0
  battle_area_name:t=""
  t1_tickets_for_1_sec:i=0
}

dialogs{
}

airfields{
}

effects{
}

units{
}

areas{
}

objLayers{

  layer{
    enabled:b=yes
  }

  layer{
    enabled:b=yes
  }

  layer{
    enabled:b=yes
  }

  layer{
    enabled:b=yes
  }
}

wayPoints{
}