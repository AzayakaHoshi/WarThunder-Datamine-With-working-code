# .github/workflows/update-readme-version.yml

name: Update Version Store

on:
  push:
    branches:
      - main  # Runs on pushes to the main branch
      - '**'  # Runs on pushes to any branch

jobs:
  update-version:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Check out the repository
      - name: Check out the repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js (optional, for handling node-based scripts)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Step 3: Read the version from file and check the state of placeholders and version store
      - name: Check version and decide to update
        run: |
          # Read the new version from aces.vromfs.bin_u/version
          NEW_VERSION=$(cat aces.vromfs.bin_u/version)

          # Log the new version
          echo "New version: $NEW_VERSION"

          # Check if version_store.txt exists and is non-empty
          if [ -f version_store.txt ] && [ -s version_store.txt ]; then
            echo "version_store.txt exists and is not empty."
            CURRENT_VERSION=$(cat version_store.txt)
            echo "Current version found in version_store.txt: $CURRENT_VERSION"
          else
            echo "version_store.txt is missing or empty. Only updating the version store with the new version."
            echo "$NEW_VERSION" > version_store.txt
            exit 0  # Exit since we only update version_store.txt
          fi

          # Check if README.md contains the version placeholder
          if ! grep -q '\[.*\](aces.vromfs.bin_u/version)' README.md; then
            echo "README version placeholder is missing. Only updating version_store.txt."
            echo "$NEW_VERSION" > version_store.txt
            exit 0  # Exit since we only update version_store.txt
          fi

      # Step 4: Commit and push changes (only if version_store.txt was updated)
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Stage and commit the changes to version_store.txt
          git add version_store.txt
          git commit -m "Update version_store.txt to new version: $NEW_VERSION"
          
          # Use GitHub token for authentication to push changes
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:${{ github.ref }}
