type:t="radar"
name:t="N011M"
weaponTargetsMax:i=8
showMissileLaunchZone:b=yes
showMissileDgftLaunchZone:b=yes
launchedMissilesPredictedPositionsMax:i=8
showMissileAimLead:b=yes
canMoveCamera:b=yes

scopeRangeSets{

  acm{
    range1:r=10000.0
  }

  hmd{
    range1:r=20000.0
  }

  common{
    range1:r=50000.0
    range2:r=100000.0
    range3:r=200000.0
    range4:r=10000.0
    range5:r=25000.0
  }

  gtm{
    range1:r=40000.0
  }
}

fsms{

  main{
    stateInit:t="init"

    actionsTemplates{

      init{

        setEnabled{
          value:b=no
        }

        setTargetDesignationRange{
        }

        setFsmActive{
          fsm:t="sensorTypes"
          active:b=yes
        }
      }

      setStandbySearchModeCommon{

        setCenterAzimuth{
          source:t="constant"
          value:r=0.0
        }

        setCenterElevation{
          source:t="constant"
          value:r=0.0
        }

        setScopeRangeSet{
          scopeRangeSet:t="common"
        }
      }

      setStandbyModeCommon{

        setStandbySearchModeCommon{
        }

        setEnabled{
          value:b=no
        }
      }

      resetStandbyMode{
      }

      resetSearchMode{

        clearTargets{
        }

        setFsmActive{
          fsm:t="search"
          active:b=no
        }

        setCueEnabled{
          value:b=no
        }
      }

      setBvrLockModeCommon{

        setEnabled{
          value:b=yes
        }

        setScanPatternSet{
        }

        resetScanPhase{
        }
      }

      setBvrLockMode{

        setBvrLockModeCommon{
        }

        setCenterAzimuth{
          source:t="targetDesignation"
        }
      }

      designatedTargetSearch{

        designateTargetUnderCue{
          type:i=0
          self:b=yes
          sensorIndex:i=0
        }

        designateActiveDetectedTarget{
          type:i=0
          self:b=yes
          sensorIndex:i=0
        }
      }

      setTrackMode{

        setEnabled{
          value:b=yes
        }

        setScanPatternSet{
        }

        addTargetOfInterest{
        }

        setLastTargetOfInterestActive{
        }

        updateActiveTargetOfInterest{
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }
      }

      resetTrackMode{

        clearTargetsOfInterest{
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=no
        }
      }

      setAcmLockMode{

        setEnabled{
          value:b=yes
        }

        resetScanPhase{
        }

        setCenterAzimuth{
          source:t="constant"
          value:r=0.0
        }

        setCenterElevation{
          source:t="constant"
          value:r=0.0
        }

        setFsmActive{
          fsm:t="lock"
          active:b=yes
        }

        setScopeRangeSet{
          scopeRangeSet:t="acm"
        }
      }

      resetAcmLockMode{

        setFsmActive{
          fsm:t="lock"
          active:b=no
        }
      }

      resetRadarStandbyMode{

        resetStandbyMode{
        }

        setFsmActive{
          fsm:t="radarSearchModes"
          active:b=no
        }
      }

      resetIrstStandbyMode{

        resetStandbyMode{
        }

        setFsmActive{
          fsm:t="irstSearchModes"
          active:b=no
        }
      }

      resetRadarSearchMode{

        resetSearchMode{
        }

        setFsmActive{
          fsm:t="radarSearchModes"
          active:b=no
        }
      }

      resetIrstSearchMode{

        resetSearchMode{
        }

        setFsmActive{
          fsm:t="irstSearchModes"
          active:b=no
        }
      }

      setSearchStandbyModeCommon{

        setStandbyModeCommon{
        }
      }

      setTwsStandbyModeCommon{

        setStandbyModeCommon{
        }
      }

      setSearchModeCommon{

        setStandbySearchModeCommon{
        }

        setEnabled{
          value:b=yes
        }

        setCueEnabled{
          value:b=yes
          updateActiveTargetUnderCue:b=no
        }

        setFsmActive{
          fsm:t="search"
          active:b=yes
        }
      }

      setTwsSearchModeCommon{

        setStandbySearchModeCommon{
        }

        setEnabled{
          value:b=yes
        }

        setCueEnabled{
          value:b=yes
          updateActiveTargetUnderCue:b=yes
          targetUnderCueScanPattern:t="radarFastTws"
        }

        setScanPatternSet{
          scanPatternSet:t="radarTws"
        }

        setFsmActive{
          fsm:t="tws"
          active:b=yes
        }

        setFsmActive{
          fsm:t="radarSearchModes"
          active:b=yes
        }
      }

      resetTwsMode{

        clearTargets{
        }

        clearTargetsOfInterest{
        }

        setFsmActive{
          fsm:t="tws"
          active:b=no
        }

        setFsmActive{
          fsm:t="radarSearchModes"
          active:b=no
        }

        setCueEnabled{
          value:b=no
        }
      }

      designatedTargetTws{

        designateActiveDetectedTarget{
          type:i=0
          self:b=yes
          sensorIndex:i=0
        }
      }

      setRadarSearchStandbyModeCommon{

        setSearchStandbyModeCommon{
        }

        setScanPatternSet{
          scanPatternSet:t="radarSearchManual"
        }

        setFsmActive{
          fsm:t="radarSearchModes"
          active:b=yes
        }
      }

      setIrstSearchStandbyModeCommon{

        setSearchStandbyModeCommon{
        }

        setScanPatternSet{
          scanPatternSet:t="irstSearch"
        }

        setFsmActive{
          fsm:t="irstSearchModes"
          active:b=yes
        }
      }

      setRadarTwsStandbyModeCommon{

        setTwsStandbyModeCommon{
        }

        setScanPatternSet{
          scanPatternSet:t="radarTws"
        }

        setFsmActive{
          fsm:t="radarSearchModes"
          active:b=yes
        }
      }

      setMprfStandbyMode{

        setRadarSearchStandbyModeCommon{
        }

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="mprfSearch"
        }

        setModeName{
          name:t="PD standby"
        }
      }

      setHprfStandbyMode{

        setRadarSearchStandbyModeCommon{
        }

        setTransiver{
          transiver:t="hprf"
        }

        setSignal{
          signal:t="hprfSearch"
        }

        setModeName{
          name:t="PD HDN standby"
        }
      }

      setMprfTwsStandbyMode{

        setRadarTwsStandbyModeCommon{
        }

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="mprfSearch"
        }

        setModeName{
          name:t="TWS standby"
        }
      }

      setHprfTwsStandbyMode{

        setRadarTwsStandbyModeCommon{
        }

        setTransiver{
          transiver:t="hprf"
        }

        setSignal{
          signal:t="hprfSearch"
        }

        setModeName{
          name:t="TWS HDN standby"
        }
      }

      setIrstStandbyMode{

        setIrstSearchStandbyModeCommon{
        }

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irstSearch"
        }

        setModeName{
          name:t="IRST standby"
        }
      }

      setRadarSearchModeCommon{

        setSearchModeCommon{
        }

        setScanPatternSet{
          scanPatternSet:t="radarSearchManual"
        }

        setFsmActive{
          fsm:t="radarSearchModes"
          active:b=yes
        }
      }

      setIrstSearchModeCommon{

        setSearchModeCommon{
        }

        setScanPatternSet{
          scanPatternSet:t="irstSearch"
        }

        setFsmActive{
          fsm:t="irstSearchModes"
          active:b=yes
        }
      }

      setMprfSearchMode{

        setRadarSearchModeCommon{
        }

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="mprfSearch"
        }

        setModeName{
          name:t="PD search"
        }
      }

      setHprfSearchMode{

        setRadarSearchModeCommon{
        }

        setTransiver{
          transiver:t="hprf"
        }

        setSignal{
          signal:t="hprfSearch"
        }

        setModeName{
          name:t="PD HDN search"
        }
      }

      setMprfTwsSearchMode{

        setTwsSearchModeCommon{
        }

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="mprfSearch"
        }

        setModeName{
          name:t="TWS search"
        }
      }

      setHprfTwsSearchMode{

        setTwsSearchModeCommon{
        }

        setTransiver{
          transiver:t="hprf"
        }

        setSignal{
          signal:t="hprfSearch"
        }

        setModeName{
          name:t="TWS HDN search"
        }
      }

      setIrstSearchMode{

        setIrstSearchModeCommon{
        }

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irstSearch"
        }

        setModeName{
          name:t="IRST search"
        }
      }

      setRadarBvrLockMode{

        setBvrLockMode{
        }

        setFsmActive{
          fsm:t="radarBvrLock"
          active:b=yes
        }

        setDistGatePos{
          source:t="targetDesignation"
          width:r=2000.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=1800.0
        }

        setScanPattern{
          scanPattern:t="radarBvrLockSearch"
        }
      }

      setMprfBvrLockMode{

        setRadarBvrLockMode{
        }

        setModeName{
          name:t="PD acquisition"
        }
      }

      setHprfBvrLockMode{

        setRadarBvrLockMode{
        }

        setModeName{
          name:t="PD HDN acquisition"
        }
      }

      setIrstBvrLockMode{

        setBvrLockMode{
        }

        setFsmActive{
          fsm:t="lock"
          active:b=yes
        }

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irstTrack"
        }

        setDistGatePos{
          source:t="targetDesignation"
          pos:r=15000.0
          width:r=30000.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=1800.0
        }

        setScanPattern{
          scanPattern:t="irstBvrLock"
        }

        setModeName{
          name:t="IRST acquisition"
        }
      }

      resetRadarBvrLockMode{

        setFsmActive{
          fsm:t="radarBvrLock"
          active:b=no
        }

        setFsmActive{
          fsm:t="velocityLock"
          active:b=no
        }
      }

      setRadarAcmLockMode{

        setScanPatternSet{
          scanPatternSet:t="radarAcmLock"
        }

        setAcmLockMode{
        }

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="acmLock"
        }

        setDistGatePos{
          source:t="constRange"
          pos:r=10000.0
          width:r=20000.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=1800.0
        }

        setModeName{
          name:t="PD ACM"
        }
      }

      setIrstAcmLockMode{

        setScanPatternSet{
          scanPatternSet:t="irstAcmLock"
        }

        setAcmLockMode{
        }

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irstTrack"
        }

        setDistGatePos{
          source:t="constRange"
          pos:r=15000.0
          width:r=30000.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=1800.0
        }

        setModeName{
          name:t="IRST ACM"
        }
      }

      resetLockMode{

        setFsmActive{
          fsm:t="lock"
          active:b=no
        }
      }

      setRadarBvrTrackMode{

        setTrackMode{
        }

        setScanPattern{
          scanPattern:t="radarTrack"
        }

        setFsmActive{
          fsm:t="radarBvrTrack"
          active:b=yes
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=yes
        }
      }

      resetRadarBvrTrackMode{

        resetTrackMode{
        }

        setFsmActive{
          fsm:t="radarBvrTrack"
          active:b=no
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=no
        }
      }

      updateRadarBvrTrackMode{

        setScanPattern{
          scanPattern:t="radarTrack"
        }

        setFsmActive{
          fsm:t="irstTrack"
          active:b=no
        }

        setFsmActive{
          fsm:t="radarBvrTrack"
          active:b=yes
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=yes
        }
      }

      setRadarAcmTrackModeCommon{

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="acmTrack"
        }

        setScanPattern{
          scanPattern:t="radarTrack"
        }

        setModeName{
          name:t="PD track"
        }
      }

      updateRadarAcmTrackMode{

        setRadarAcmTrackModeCommon{
        }

        setFsmActive{
          fsm:t="irstTrack"
          active:b=no
        }

        setFsmActive{
          fsm:t="radarAcmHmdTrack"
          active:b=yes
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=yes
        }
      }

      setRadarAcmTrackMode{

        setTrackMode{
        }

        setRadarAcmTrackModeCommon{
        }

        setFsmActive{
          fsm:t="radarAcmHmdTrack"
          active:b=yes
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=yes
        }
      }

      resetRadarAcmHmdTrackMode{

        resetTrackMode{
        }

        setFsmActive{
          fsm:t="radarAcmHmdTrack"
          active:b=no
        }
      }

      setIrstTrackModeCommon{

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irstTrack"
        }

        setScanPattern{
          scanPattern:t="irstTrack"
        }

        setModeName{
          name:t="IRST track"
        }
      }

      updateIrstBvrTrackMode{

        setIrstTrackModeCommon{
        }

        setFsmActive{
          fsm:t="radarBvrTrack"
          active:b=no
        }

        setFsmActive{
          fsm:t="irstTrack"
          active:b=yes
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=no
        }
      }

      updateIrstAcmTrackMode{

        setIrstTrackModeCommon{
        }

        setFsmActive{
          fsm:t="radarAcmHmdTrack"
          active:b=no
        }

        setFsmActive{
          fsm:t="irstTrack"
          active:b=yes
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=no
        }
      }

      setIrstTrackMode{

        setTrackMode{
        }

        setIrstTrackModeCommon{
        }

        setFsmActive{
          fsm:t="irstTrack"
          active:b=yes
        }
      }

      resetIrstTrackMode{

        resetTrackMode{
        }

        setFsmActive{
          fsm:t="irstTrack"
          active:b=no
        }
      }

      setHmdStandbyMode{

        setEnabled{
          value:b=no
        }

        clearTargetsOfInterest{
        }

        setScanPatternSet{
        }

        resetScanPhase{
        }

        setFsmActive{
          fsm:t="helmetDesignation"
          active:b=yes
        }

        setScopeRangeSet{
          scopeRangeSet:t="hmd"
        }
      }

      resetHmdStandbyMode{

        resetStandbyMode{
        }

        setFsmActive{
          fsm:t="helmetDesignation"
          active:b=no
        }
      }

      setHmdLockMode{

        setEnabled{
          value:b=yes
        }

        clearTargetsOfInterest{
        }

        setScanPatternSet{
        }

        resetScanPhase{
        }

        setFsmActive{
          fsm:t="lock"
          active:b=yes
        }

        setFsmActive{
          fsm:t="helmetDesignation"
          active:b=yes
        }

        setScopeRangeSet{
          scopeRangeSet:t="hmd"
        }
      }

      resetHmdLockMode{

        resetAcmLockMode{
        }

        setFsmActive{
          fsm:t="helmetDesignation"
          active:b=no
        }
      }

      setHmdTrackMode{

        setTrackMode{
        }
      }

      resetHmdTrackMode{

        resetTrackMode{
        }
      }

      setRadarHmdCommon{

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="hmdLock"
        }
      }

      setRadarHmdLockCommon{

        setRadarHmdCommon{
        }

        setScanPattern{
          scanPattern:t="radarHmdLock"
        }
      }

      setIrstHmdCommon{

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irstTrack"
        }
      }

      setIrstHmdLockCommon{

        setIrstHmdCommon{
        }

        setScanPattern{
          scanPattern:t="irstHmdLock"
        }
      }

      setRadarHmdStandbyMode{

        setHmdStandbyMode{
        }

        setRadarHmdLockCommon{
        }

        setDistGatePos{
          source:t="constRange"
          pos:r=10000.0
          width:r=20000.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=1800.0
        }

        setModeName{
          name:t="PD HMD"
        }
      }

      setIrstHmdStandbyMode{

        setHmdStandbyMode{
        }

        setIrstHmdLockCommon{
        }

        setDistGatePos{
          source:t="constRange"
          pos:r=15000.0
          width:r=30000.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=1800.0
        }

        setModeName{
          name:t="IRST HMD"
        }
      }

      setRadarHmdLockMode{

        setHmdLockMode{
        }

        setRadarHmdLockCommon{
        }

        setDistGatePos{
          source:t="constRange"
          pos:r=10000.0
          width:r=20000.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=1800.0
        }

        setModeName{
          name:t="PD HMD"
        }
      }

      setIrstHmdLockMode{

        setHmdLockMode{
        }

        setIrstHmdLockCommon{
        }

        setDistGatePos{
          source:t="constRange"
          pos:r=15000.0
          width:r=30000.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=1800.0
        }

        setModeName{
          name:t="IRST HMD"
        }
      }

      setRadarHmdTrackMode{

        setHmdTrackMode{
        }

        setRadarHmdCommon{
        }

        setScanPattern{
          scanPattern:t="radarHmdTrack"
        }

        setFsmActive{
          fsm:t="radarAcmHmdTrack"
          active:b=yes
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=yes
        }

        setModeName{
          name:t="PD track"
        }
      }

      setIrstHmdTrackMode{

        setHmdTrackMode{
        }

        setIrstHmdCommon{
        }

        setScanPattern{
          scanPattern:t="irstHmdTrack"
        }

        setFsmActive{
          fsm:t="irstTrack"
          active:b=yes
        }

        setModeName{
          name:t="IRST track"
        }
      }

      setTwsBvrLockMode{

        setBvrLockMode{
        }

        setFsmActive{
          fsm:t="radarBvrLock"
          active:b=yes
        }

        setDistGatePos{
          source:t="targetDesignation"
          width:r=2000.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=1800.0
        }

        setScanPattern{
          scanPattern:t="radarBvrLockTws"
        }
      }

      setHprfVelocityStandbyMode{

        setRadarSearchStandbyModeCommon{
        }

        setTransiver{
          transiver:t="hprfVelocity"
        }

        setSignal{
          signal:t="hprfVelocitySearch"
        }

        setModeName{
          name:t="PD HDN VS standby"
        }
      }

      setHprfVelocitySearchMode{

        setRadarSearchModeCommon{
        }

        setTransiver{
          transiver:t="hprfVelocity"
        }

        setSignal{
          signal:t="hprfVelocitySearch"
        }

        setModeName{
          name:t="PD HDN VS search"
        }
      }

      setVelocityBvrLockMode{

        setBvrLockModeCommon{
        }

        setFsmActive{
          fsm:t="velocityLock"
          active:b=yes
        }

        setRelSpeedGatePos{
          source:t="targetDesignation"
          width:r=30.0
        }

        setScanPattern{
          scanPattern:t="radarBvrLockSearch"
        }

        setCenterAzimuth{
          source:t="targetDesignation"
        }
      }

      resetGtmTrackMode{

        setFsmActive{
          fsm:t="track"
          active:b=no
        }
      }

      setGtmStandbyMode{

        setRadarSearchStandbyModeCommon{
        }

        setTransiver{
          transiver:t="GTM"
        }

        setSignal{
          signal:t="GTMSearch"
        }

        setModeName{
          name:t="GTM standby"
        }
      }

      setGtmTwsStandbyMode{

        setRadarTwsStandbyModeCommon{
        }

        setTransiver{
          transiver:t="GTM"
        }

        setSignal{
          signal:t="GTMSearch"
        }

        setModeName{
          name:t="GTM standby"
        }
      }

      setGtmSearchMode{

        setRadarSearchModeCommon{
        }

        setTransiver{
          transiver:t="GTM"
        }

        setSignal{
          signal:t="GTMSearch"
        }

        setModeName{
          name:t="GTM search"
        }
      }

      setGtmTwsSearchMode{

        setTwsSearchModeCommon{
        }

        setTransiver{
          transiver:t="GTM"
        }

        setSignal{
          signal:t="GTMSearch"
        }

        setModeName{
          name:t="TWS GTM search"
        }
      }

      setGtmTwsBvrLockModeCommon{

        setBvrLockModeCommon{
        }

        setFsmActive{
          fsm:t="radarBvrLock"
          active:b=yes
        }

        setScanPattern{
          scanPattern:t="radarBvrLockSearch"
        }

        setCenterAzimuth{
          source:t="targetDesignation"
        }

        setDistGatePos{
          source:t="targetDesignation"
          width:r=2000.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=3000.0
        }

        setTransiver{
          transiver:t="GTM"
        }

        setSignal{
          signal:t="GTMTrack"
        }
      }

      resetGtmBvrLockMode{

        setFsmActive{
          fsm:t="radarBvrLock"
          active:b=no
        }
      }

      setGtmBvrTrackMode{

        setEnabled{
          value:b=yes
        }

        setScanPatternSet{
        }

        setScanPattern{
          scanPattern:t="radarTrack"
        }

        addTargetOfInterest{
        }

        setLastTargetOfInterestActive{
        }

        updateActiveTargetOfInterest{
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }

        setModeName{
          name:t="GTM track"
        }

        setFsmActive{
          fsm:t="gtmTrack"
          active:b=yes
        }

        setTransiver{
          transiver:t="GTM"
        }

        setSignal{
          signal:t="GTMTrack"
        }
      }

      resetGtmBvrTrackMode{

        clearTargetsOfInterest{
        }

        setFsmActive{
          fsm:t="gtmTrack"
          active:b=no
        }
      }

      setGtmTwsBvrLockMode{

        setGtmTwsBvrLockModeCommon{
        }

        setModeName{
          name:t="TWS GTM acquisition"
        }
      }
    }

    transitions{

      init{
        stateFrom:t="init"
        event:t="init"
        stateTo:t="standby"

        actions{

          init{
          }
        }
      }

      standbyToSearch{
        stateFrom:t="standby"
        command:t="switch"
        event:t="enable"
        stateTo:t="search"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetStandbyMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      searchToStandby{
        stateFrom:t="search"
        command:t="switch"
        event:t="disable"
        stateTo:t="standby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetSearchMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      bvrLock{
        stateFrom:t="search"
        command:t="selectTarget"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="designateTarget"
          }
        }
      }

      checkDesignationType0{
        stateFrom:t="search"
        command:t="designateTarget"
        stateTo:t="checkDesignationType0"

        actions{

          checkDesignationTypeEquals{
            value:i=0
          }
        }
      }

      bvrLockResponce{
        stateFrom:t="checkDesignationType0"
        event:t="designationTypeEquals"
        stateTo:t="bvrLock"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetSearchMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setBvrLockMode"
          }
        }
      }

      returnToSearchMode{
        stateFrom:t="checkDesignationType0"
        event:t="designationTypeNotEquals"
        stateTo:t="search"
      }

      bvrLockToBvrTrack{
        stateFrom:t="bvrLock"
        event:t="targetDetected"
        stateTo:t="bvrTrack"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetBvrLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setBvrTrackMode"
          }
        }
      }

      failedBvrLock{
        stateFrom:t="bvrLock"
        event:t="scanFinished"
        stateTo:t="search"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetBvrLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      finishedBvrTrack{
        stateFrom:t="bvrTrack"
        event:t="targetsOfInterestCleanup"
        command:t="selectTarget"
        command:t="switch"
        stateTo:t="search"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetBvrTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      finishBvrTrackAndSwitchOff{
        stateFrom:t="bvrTrack"
        event:t="disable"
        stateTo:t="standby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetBvrTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      updateStandbyMode{
        stateFrom:t="standby"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetStandbyMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      updateSearchMode{
        stateFrom:t="search"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetSearchMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      switchScanPattern{
        stateFrom:t="standby"
        stateFrom:t="search"
        stateFrom:t="acmLock"
        command:t="scanPatternSwitch"

        actions{

          setNextScanPattern{
          }
        }
      }

      switchScopeRange{
        command:t="rangeSwitch"

        actions{

          setNextScopeRange{
          }
        }
      }

      searchToAcmLock{
        stateFrom:t="search"
        command:t="acmSwitch"
        stateTo:t="acmLock"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetSearchMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setAcmLockMode"
          }
        }
      }

      acmLockToAcmTrack{
        stateFrom:t="acmLock"
        event:t="targetDetected"
        stateTo:t="acmTrack"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setAcmTrackMode"
          }
        }
      }

      acmLockToStandby{
        stateFrom:t="acmLock"
        command:t="selectTarget"
        event:t="disable"
        stateTo:t="standby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      acmTrackToAcmLock{
        stateFrom:t="acmTrack"
        event:t="targetsOfInterestCleanup"
        stateTo:t="acmLock"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setAcmLockMode"
          }
        }
      }

      acmTrackToStandby{
        stateFrom:t="acmTrack"
        command:t="selectTarget"
        event:t="disable"
        stateTo:t="standby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      acmTrackToSearch{
        stateFrom:t="acmTrack"
        command:t="acmSwitch"
        command:t="switch"
        stateTo:t="search"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      standbyToAcmLock{
        stateFrom:t="standby"
        command:t="acmSwitch"
        stateTo:t="acmLock"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetStandbyMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setAcmLockMode"
          }
        }
      }

      standbyToHmdStandby{
        stateFrom:t="standby"
        command:t="selectTarget"
        stateTo:t="hmdLock"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetStandbyMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setHmdLockMode"
          }
        }
      }

      acmLockToHmdStandby{
        stateFrom:t="acmLock"
        command:t="acmSwitch"
        stateTo:t="hmdStandby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setHmdStandbyMode"
          }
        }
      }

      hmdStandbyToSearch{
        stateFrom:t="hmdStandby"
        command:t="acmSwitch"
        command:t="switch"
        stateTo:t="search"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdStandbyMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      hmdStandbyToStandby{
        stateFrom:t="hmdStandby"
        event:t="disable"
        stateTo:t="standby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdStandbyMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      hmdStandbyToHmdLock{
        stateFrom:t="hmdStandby"
        command:t="selectTarget"
        stateTo:t="hmdLock"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdStandbyMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setHmdLockMode"
          }
        }
      }

      hmdLockToHmdTrack{
        stateFrom:t="hmdLock"
        event:t="targetDetected"
        stateTo:t="hmdTrack"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setHmdTrackMode"
          }
        }
      }

      hmdLockToHmdStandby{
        stateFrom:t="hmdLock"
        event:t="scanFinished"
        stateTo:t="hmdStandby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setHmdStandbyMode"
          }
        }
      }

      hmdTrackToHmdStandby{
        stateFrom:t="hmdTrack"
        event:t="targetsOfInterestCleanup"
        command:t="selectTarget"
        stateTo:t="hmdStandby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setHmdStandbyMode"
          }
        }
      }

      hmdTrackToStandby{
        stateFrom:t="hmdTrack"
        event:t="disable"
        stateTo:t="standby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      updateBvrTrackMode{
        stateFrom:t="bvrTrack"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="updateBvrTrackMode"
          }
        }
      }

      updateAcmLockMode{
        stateFrom:t="acmLock"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setAcmLockMode"
          }
        }
      }

      updateAcmTrackMode{
        stateFrom:t="acmTrack"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="updateAcmTrackMode"
          }
        }
      }

      updateHmdStandbyMode{
        stateFrom:t="hmdStandby"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setHmdStandbyMode"
          }
        }
      }

      updateHmdTrackMode{
        stateFrom:t="hmdTrack"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="updateHmdTrackMode"
          }
        }
      }
    }
  }

  sensorTypes{
    stateInit:t="init"

    actionsTemplates{

      initRadarLockTrack{

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrLockMode"
          actionTemplateName:t="resetRadarBvrLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrTrackMode"
          actionTemplateName:t="setRadarBvrTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrTrackMode"
          actionTemplateName:t="resetRadarBvrTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="updateBvrTrackMode"
          actionTemplateName:t="updateRadarBvrTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setAcmLockMode"
          actionTemplateName:t="setRadarAcmLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setAcmTrackMode"
          actionTemplateName:t="setRadarAcmTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetAcmTrackMode"
          actionTemplateName:t="resetRadarAcmHmdTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="updateAcmTrackMode"
          actionTemplateName:t="updateRadarAcmTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setHmdStandbyMode"
          actionTemplateName:t="setRadarHmdStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setHmdLockMode"
          actionTemplateName:t="setRadarHmdLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setHmdTrackMode"
          actionTemplateName:t="setRadarHmdTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetHmdTrackMode"
          actionTemplateName:t="resetRadarAcmHmdTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="updateHmdTrackMode"
          actionTemplateName:t="updateRadarAcmTrackMode"
        }
      }

      initRadarStandby{

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetStandbyMode"
          actionTemplateName:t="resetRadarStandbyMode"
        }
      }

      initRadar{

        initRadarStandby{
        }

        initRadarLockTrack{
        }

        setDesignationSourceType{
          sourceType:t="radar"
        }
      }

      setRadar{

        initRadarLockTrack{
        }

        doCustomActionTemplate{
          fsm:t="radarSearchModes"
          name:t="restore"
        }

        initRadarStandby{
        }

        setDesignationSourceType{
          sourceType:t="radar"
        }
      }

      setIrst{

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrLockMode"
          actionTemplateName:t="setIrstBvrLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrLockMode"
          actionTemplateName:t="resetLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrTrackMode"
          actionTemplateName:t="setIrstTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrTrackMode"
          actionTemplateName:t="resetIrstTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="updateBvrTrackMode"
          actionTemplateName:t="updateIrstBvrTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setAcmLockMode"
          actionTemplateName:t="setIrstAcmLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setAcmTrackMode"
          actionTemplateName:t="setIrstTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetAcmTrackMode"
          actionTemplateName:t="resetIrstTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="updateAcmTrackMode"
          actionTemplateName:t="updateIrstAcmTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setHmdStandbyMode"
          actionTemplateName:t="setIrstHmdStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setHmdLockMode"
          actionTemplateName:t="setIrstHmdLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setHmdTrackMode"
          actionTemplateName:t="setIrstHmdTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetHmdTrackMode"
          actionTemplateName:t="resetIrstTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="updateHmdTrackMode"
          actionTemplateName:t="updateIrstAcmTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetStandbyMode"
          actionTemplateName:t="resetIrstStandbyMode"
        }

        doCustomActionTemplate{
          fsm:t="irstSearchModes"
          name:t="restore"
        }

        setDesignationSourceType{
          sourceType:t="sensor"
        }
      }
    }

    transitions{

      initToRadar{
        stateFrom:t="init"
        event:t="fsmActivate"
        stateTo:t="radar"

        actions{

          setCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmLockMode"
            actionTemplateName:t="resetAcmLockMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdStandbyMode"
            actionTemplateName:t="resetHmdStandbyMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdLockMode"
            actionTemplateName:t="resetHmdLockMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdTrackMode"
            actionTemplateName:t="resetHmdTrackMode"
          }

          setFsmActive{
            fsm:t="irstSearchModes"
            active:b=yes
          }

          setFsmActive{
            fsm:t="irstSearchModes"
            active:b=no
          }

          setFsmActive{
            fsm:t="radarSearchModes"
            active:b=yes
          }

          initRadar{
          }
        }
      }

      radarToIrst{
        stateFrom:t="radar"
        command:t="typeSwitch"
        stateTo:t="irst"

        actions{

          setIrst{
          }
        }
      }

      irstToRadar{
        stateFrom:t="irst"
        command:t="typeSwitch"
        stateTo:t="radar"

        actions{

          setRadar{
          }
        }
      }
    }
  }

  radarSearchModes{
    stateInit:t="init"

    actionsTemplates{

      setMprfTargetDesignationRange{

        setTargetDesignationRange{
          azimuthRange:p2=-70.0, 70.0
          azmithWidth:r=5.0
          elevationRange:p2=-45.0, 45.0
          distanceRange:p2=0.0, 90000.0
          distanceWidth:r=2000.0
          distanceRelWidthMin:r=0.05
          dopplerSpeedRange:p2=-2500.0, 2500.0
          dopplerSpeedWidth:r=60.0
          dopplerSpeedRelWidthMin:r=0.05
        }
      }

      setHprfTargetDesignationRange{

        setTargetDesignationRange{
          azimuthRange:p2=-70.0, 70.0
          azmithWidth:r=5.0
          elevationRange:p2=-45.0, 45.0
          distanceRange:p2=0.0, 120000.0
          distanceWidth:r=3000.0
          distanceRelWidthMin:r=0.05
          dopplerSpeedRange:p2=-2500.0, 2500.0
          dopplerSpeedWidth:r=60.0
          dopplerSpeedRelWidthMin:r=0.05
        }
      }

      setMprfTws{

        setMprfTargetDesignationRange{
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setStandbyMode"
          actionTemplateName:t="setMprfTwsStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setSearchMode"
          actionTemplateName:t="setMprfTwsSearchMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="designateTarget"
          actionTemplateName:t="designatedTargetTws"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrLockMode"
          actionTemplateName:t="setMprfBvrLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
          actionTemplateName:t="resetTwsMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrLockMode"
          actionTemplateName:t="setMprfBvrLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrTrackMode"
          actionTemplateName:t="setRadarBvrTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrTrackMode"
          actionTemplateName:t="resetRadarBvrTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrLockMode"
          actionTemplateName:t="resetRadarBvrLockMode"
        }

        doCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
        }

        clearTargets{
        }

        setFsmActive{
          fsm:t="main"
          active:b=no
        }

        setFsmActive{
          fsm:t="main"
          active:b=yes
        }
      }

      setHprfTws{

        setHprfTargetDesignationRange{
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setStandbyMode"
          actionTemplateName:t="setHprfTwsStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setSearchMode"
          actionTemplateName:t="setHprfTwsSearchMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="designateTarget"
          actionTemplateName:t="designatedTargetTws"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrLockMode"
          actionTemplateName:t="setHprfBvrLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
          actionTemplateName:t="resetTwsMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrLockMode"
          actionTemplateName:t="setHprfBvrLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrTrackMode"
          actionTemplateName:t="setRadarBvrTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrTrackMode"
          actionTemplateName:t="resetRadarBvrTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrLockMode"
          actionTemplateName:t="resetRadarBvrLockMode"
        }

        doCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
        }

        clearTargets{
        }

        setFsmActive{
          fsm:t="main"
          active:b=no
        }

        setFsmActive{
          fsm:t="main"
          active:b=yes
        }
      }

      initMprfTws{

        setMprfTargetDesignationRange{
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setStandbyMode"
          actionTemplateName:t="setMprfTwsStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setSearchMode"
          actionTemplateName:t="setMprfTwsSearchMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="designateTarget"
          actionTemplateName:t="designatedTargetTws"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
          actionTemplateName:t="resetTwsMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrLockMode"
          actionTemplateName:t="setMprfBvrLockMode"
        }
      }

      setHprfVelocity{

        setHprfTargetDesignationRange{
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setStandbyMode"
          actionTemplateName:t="setHprfVelocityStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setSearchMode"
          actionTemplateName:t="setHprfVelocitySearchMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="designateTarget"
          actionTemplateName:t="designatedTargetSearch"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrLockMode"
          actionTemplateName:t="setVelocityBvrLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
          actionTemplateName:t="resetRadarSearchMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrTrackMode"
          actionTemplateName:t="setRadarBvrTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrTrackMode"
          actionTemplateName:t="resetRadarBvrTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrLockMode"
          actionTemplateName:t="resetRadarBvrLockMode"
        }

        clearTargets{
        }

        setFsmActive{
          fsm:t="main"
          active:b=no
        }

        setFsmActive{
          fsm:t="main"
          active:b=yes
        }
      }

      setGtmTws{

        setMprfTargetDesignationRange{
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setStandbyMode"
          actionTemplateName:t="setGtmTwsStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setSearchMode"
          actionTemplateName:t="setGtmTwsSearchMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrLockMode"
          actionTemplateName:t="setGtmTwsBvrLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrLockMode"
          actionTemplateName:t="resetGtmBvrLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="designateTarget"
          actionTemplateName:t="designatedTargetSearch"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrTrackMode"
          actionTemplateName:t="setGtmBvrTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrTrackMode"
          actionTemplateName:t="resetGtmBvrTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
          actionTemplateName:t="resetTwsMode"
        }

        doCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
        }

        setFsmActive{
          fsm:t="main"
          active:b=no
        }

        setFsmActive{
          fsm:t="main"
          active:b=yes
        }
      }
    }

    transitions{

      initToMprfTws{
        stateFrom:t="init"
        event:t="fsmActivate"
        stateTo:t="mprfTws"

        actions{

          initMprfTws{
          }

          setCustomActionTemplate{
            fsm:t="radarSearchModes"
            name:t="restore"
            actionTemplateName:t="setMprfTws"
          }
        }
      }

      mprfTwsToHprfTws{
        stateFrom:t="mprfTws"
        command:t="modeSwitch"
        stateTo:t="hprfTws"

        actions{

          setHprfTws{
          }

          setCustomActionTemplate{
            fsm:t="radarSearchModes"
            name:t="restore"
            actionTemplateName:t="setHprfTws"
          }
        }
      }

      hprfTwsToHprfVelocity{
        stateFrom:t="hprfTws"
        command:t="modeSwitch"
        stateTo:t="hprfVelocity"

        actions{

          setHprfVelocity{
          }

          setCustomActionTemplate{
            fsm:t="radarSearchModes"
            name:t="restore"
            actionTemplateName:t="setHprfVelocity"
          }
        }
      }

      HprfVelocityToGtmTws{
        stateFrom:t="hprfVelocity"
        command:t="modeSwitch"
        stateTo:t="gtmTws"

        actions{

          setGtmTws{
          }

          setCustomActionTemplate{
            fsm:t="radarSearchModes"
            name:t="restore"
            actionTemplateName:t="setGtmTws"
          }
        }
      }

      gtmTwsToMprfTws{
        stateFrom:t="gtmTws"
        command:t="modeSwitch"
        stateTo:t="mprfTws"

        actions{

          setMprfTws{
          }

          setCustomActionTemplate{
            fsm:t="radarSearchModes"
            name:t="restore"
            actionTemplateName:t="setMprfTws"
          }
        }
      }
    }
  }

  irstSearchModes{
    stateInit:t="init"

    actionsTemplates{

      setIrstLockTrack{

        setTargetDesignationRange{
          azimuthRange:p2=-60.0, 60.0
          azmithWidth:r=2.0
          elevationRange:p2=-22.5, 52.5
          elevationWidth:r=3.0
          distanceRange:p2=0.0, 30000.0
          distanceWidth:r=100.0
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setStandbyMode"
          actionTemplateName:t="setIrstStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setSearchMode"
          actionTemplateName:t="setIrstSearchMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="designateTarget"
          actionTemplateName:t="designatedTargetSearch"
        }
      }

      initIrst{

        setIrstLockTrack{
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetStandbyMode"
          actionTemplateName:t="resetIrstStandbyMode"
        }
      }

      setIrst{

        setCenterAzimuth{
          source:t="constant"
          value:r=0.0
        }

        setCenterElevation{
          source:t="constant"
          value:r=0.0
        }

        setIrstLockTrack{
        }

        clearTargets{
        }

        setFsmActive{
          fsm:t="main"
          active:b=no
        }

        setFsmActive{
          fsm:t="main"
          active:b=yes
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
          actionTemplateName:t="resetIrstSearchMode"
        }
      }
    }

    transitions{

      init{
        stateFrom:t="init"
        event:t="fsmActivate"
        stateTo:t="ready"

        actions{

          initIrst{
          }

          setCustomActionTemplate{
            fsm:t="irstSearchModes"
            name:t="restore"
            actionTemplateName:t="setIrst"
          }
        }
      }

      activate{
        stateFrom:t="ready"
        event:t="fsmActivate"

        actions{
        }
      }
    }
  }

  search{
    stateInit:t="search"

    transitions{

      scan{
        event:t="update"

        actions{

          scan{
          }

          setCenterAzimuth{
            source:t="constant"
            value:r=0.0
          }

          setCenterAzimuth{
            source:t="designationCue"
          }

          setCenterElevation{
            source:t="constant"
            value:r=0.0
          }

          setCenterElevation{
            source:t="designationCue"
          }
        }
      }

      detect{
        event:t="targetInSight"

        actions{

          setDistGatePos{
            source:t="continuousScale"
            width:r=0.0
          }

          setRelSpeedGatePos{
            source:t="continuousScale"
            width:r=0.0
          }

          detectTarget{
          }
        }
      }

      addTarget{
        event:t="targetDetected"

        actions{

          addTarget{
          }

          updateActiveDetectedTarget{
          }
        }
      }

      switchSelectedTarget{
        command:t="switchTarget"

        actions{

          setNextDetectedTargetActive{
          }
        }
      }

      setCueAzimuth{
        command:t="cueAxisX"

        actions{

          setCueAzimuth{
          }
        }
      }

      setCueDist{
        command:t="cueAxisY"

        actions{

          setCueDist{
          }

          setCueDopplerSpeed{
          }
        }
      }

      setCueElevation{
        command:t="cueAxisZ"

        actions{

          setCueElevation{
          }
        }
      }

      setSelectedTarget{
        command:t="switchToTarget"

        actions{

          setDetectedTargetActive{
          }
        }
      }
    }
  }

  radarBvrLock{
    stateInit:t="lock"

    transitions{

      scan{
        event:t="update"

        actions{

          scan{
          }
        }
      }

      detect{
        event:t="targetInSight"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }
    }
  }

  lock{
    stateInit:t="lock"

    transitions{

      scan{
        event:t="update"

        actions{

          scan{
          }
        }
      }

      detect{
        event:t="targetInSight"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }
    }
  }

  radarBvrTrack{
    stateInit:t="init"

    actionsTemplates{

      setMprfTrack{

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="mprfTrack"
        }

        setScanPattern{
          scanPattern:t="radarTrack"
        }
      }

      setHprfTrack{

        setTransiver{
          transiver:t="hprf"
        }

        setSignal{
          signal:t="hprfTrack"
        }

        setScanPattern{
          scanPattern:t="radarTrack"
        }
      }

      setIrstTrack{

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irstTrack"
        }

        setScanPattern{
          scanPattern:t="irstTrack"
        }
      }

      trackRadar{

        updateActiveTargetOfInterest{

          dirFilter{
            rateLim:p2=0.78, 0.78
            limTimeOut:r=1.0
            inertialTimeMax:r=1.0
          }

          distFilter{
            accelLim:p2=150.0, 150.0
            limTimeOut:r=1.0
            inertialTimeMax:r=1.0
          }

          dopplerSpeedFilter{
            rateLim:p2=200.0, 200.0
            limTimeOut:r=1.0
            inertialTimeMax:r=1.0
          }
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }

        setRelSpeedGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }
      }

      trackIrst{

        updateActiveTargetOfInterest{

          dirFilter{
            rateLim:p2=0.78, 0.78
            limTimeOut:r=1.0
            inertialTimeMax:r=1.0
          }

          distFilter{
            accelLim:p2=150.0, 150.0
            limTimeOut:r=1.0
            inertialTimeMax:r=1.0
          }
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }
      }

      extrapolate{

        extrapolateTargetsOfInterest{
        }

        clearTargetsOfInterest{
          timeOut:r=3.0
          dirRateLim:r=1.0
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }

        setRelSpeedGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }
      }
    }

    transitions{

      start{
        event:t="fsmActivate"
        stateTo:t="mprf"

        actions{

          setMprfTrack{
          }

          setModeName{
            name:t="PD track"
          }
        }
      }

      tryDetectMprf{
        stateFrom:t="mprfTry"
        event:t="update"

        actions{

          setMprfTrack{
          }

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }

      hprfOkTryDetectMprf{
        stateFrom:t="hprfOkMprfTry"
        event:t="update"

        actions{

          setMprfTrack{
          }

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }

          setHprfTrack{
          }
        }
      }

      tryDetectHprf{
        stateFrom:t="hprfTry"
        event:t="update"

        actions{

          setHprfTrack{
          }

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }

          setMprfTrack{
          }
        }
      }

      irstOkTryDetectHprf{
        stateFrom:t="irstOkHprfTry"
        event:t="update"

        actions{

          setHprfTrack{
          }

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }

          setIrstTrack{
          }
        }
      }

      irstOkTryDetectMprf{
        stateFrom:t="irstOkMprfTry"
        event:t="update"

        actions{

          setMprfTrack{
          }

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }

          setIrstTrack{
          }
        }
      }

      tryDetectIrst{
        stateFrom:t="irstTry"
        event:t="update"

        actions{

          setIrstTrack{
          }

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }

          setMprfTrack{
          }
        }
      }

      detect{
        event:t="update"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }

      trackMprf{
        stateFrom:t="mprf"
        event:t="targetDetected"

        actions{

          trackRadar{
          }
        }
      }

      startTrackMprf{
        stateFrom:t="mprfTry"
        stateFrom:t="hprfOkMprfTry"
        stateFrom:t="irstOkMprfTry"
        event:t="targetDetected"
        stateTo:t="mprf"

        actions{

          setMprfTrack{
          }

          trackRadar{
          }

          setModeName{
            name:t="PD track"
          }
        }
      }

      trackHprf{
        stateFrom:t="hprf"
        event:t="targetDetected"
        stateTo:t="hprfOkMprfTry"

        actions{

          trackRadar{
          }
        }
      }

      startTrackHprf{
        stateFrom:t="hprfTry"
        stateFrom:t="irstOkHprfTry"
        event:t="targetDetected"
        stateTo:t="hprf"

        actions{

          setHprfTrack{
          }

          trackRadar{
          }

          setModeName{
            name:t="PD HDN track"
          }
        }
      }

      trackIrst{
        stateFrom:t="irst"
        event:t="targetDetected"
        stateTo:t="irstOkHprfTry"

        actions{

          trackIrst{
          }
        }
      }

      startTrackIrst{
        stateFrom:t="irstTry"
        event:t="targetDetected"
        stateTo:t="irst"

        actions{

          setIrstTrack{
          }

          trackIrst{
          }

          setModeName{
            name:t="track"
          }
        }
      }

      mprfToHprf{
        stateFrom:t="mprf"
        stateFrom:t="mprfTry"
        event:t="targetNotDetected"
        stateTo:t="hprfTry"

        actions{

          extrapolate{
          }
        }
      }

      backToHprf{
        stateFrom:t="hprfOkMprfTry"
        event:t="targetNotDetected"
        stateTo:t="hprfTry"

        actions{

          extrapolate{
          }
        }
      }

      hprfToIrstTry{
        stateFrom:t="hprf"
        stateFrom:t="hprfTry"
        event:t="targetNotDetected"
        stateTo:t="irstTry"

        actions{

          extrapolate{
          }
        }
      }

      irstToMprfTry{
        stateFrom:t="irstOkHprfTry"
        event:t="targetNotDetected"
        stateTo:t="irstOkMprfTry"

        actions{

          extrapolate{
          }
        }
      }

      backToIrst{
        stateFrom:t="irstOkMprfTry"
        event:t="targetNotDetected"
        stateTo:t="irstTry"

        actions{

          extrapolate{
          }
        }
      }

      irstToMprf{
        stateFrom:t="irst"
        event:t="targetNotDetected"
        stateTo:t="mprfTry"

        actions{

          extrapolate{
          }
        }
      }

      irstTryToMprf{
        stateFrom:t="irstTry"
        event:t="targetNotDetected"
        stateTo:t="mprfTry"

        actions{

          extrapolate{
          }

          setModeName{
            name:t="track memory"
          }
        }
      }
    }
  }

  radarAcmHmdTrack{
    stateInit:t="init"

    actionsTemplates{

      setMprfTrack{

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="mprfTrack"
        }
      }

      setIrstTrack{

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irstTrack"
        }
      }

      trackRadar{

        updateActiveTargetOfInterest{

          dirFilter{
            rateLim:p2=0.78, 0.78
            limTimeOut:r=1.0
            inertialTimeMax:r=1.0
          }

          distFilter{
            accelLim:p2=150.0, 150.0
            limTimeOut:r=1.0
            inertialTimeMax:r=1.0
          }

          dopplerSpeedFilter{
            rateLim:p2=200.0, 200.0
            limTimeOut:r=1.0
            inertialTimeMax:r=1.0
          }
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }

        setRelSpeedGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }
      }

      trackIrst{

        updateActiveTargetOfInterest{

          dirFilter{
            rateLim:p2=0.78, 0.78
            limTimeOut:r=1.0
            inertialTimeMax:r=1.0
          }

          distFilter{
            accelLim:p2=150.0, 150.0
            limTimeOut:r=1.0
            inertialTimeMax:r=1.0
          }
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }
      }

      extrapolate{

        extrapolateTargetsOfInterest{
        }

        clearTargetsOfInterest{
          timeOut:r=3.0
          dirRateLim:r=1.0
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }

        setRelSpeedGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }
      }
    }

    transitions{

      start{
        event:t="fsmActivate"
        stateTo:t="mprf"

        actions{

          setMprfTrack{
          }

          setModeName{
            name:t="PD track"
          }
        }
      }

      tryDetectMprf{
        stateFrom:t="mprfTry"
        event:t="update"

        actions{

          setMprfTrack{
          }

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }

      irstOkTryDetectMprf{
        stateFrom:t="irstOkMprfTry"
        event:t="update"

        actions{

          setMprfTrack{
          }

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }

          setIrstTrack{
          }
        }
      }

      tryDetectIrst{
        stateFrom:t="irstTry"
        event:t="update"

        actions{

          setIrstTrack{
          }

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }

          setMprfTrack{
          }
        }
      }

      detect{
        stateFrom:t="mprf"
        stateFrom:t="irst"
        event:t="update"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }

      trackMprf{
        stateFrom:t="mprf"
        event:t="targetDetected"

        actions{

          trackRadar{
          }
        }
      }

      startTrackMprf{
        stateFrom:t="mprfTry"
        stateFrom:t="irstOkMprfTry"
        event:t="targetDetected"
        stateTo:t="mprf"

        actions{

          setMprfTrack{
          }

          trackRadar{
          }

          setModeName{
            name:t="PD track"
          }
        }
      }

      trackIrst{
        stateFrom:t="irst"
        event:t="targetDetected"
        stateTo:t="irstOkMprfTry"

        actions{

          trackIrst{
          }
        }
      }

      startTrackIrst{
        stateFrom:t="irstTry"
        event:t="targetDetected"
        stateTo:t="irst"

        actions{

          setIrstTrack{
          }

          trackIrst{
          }

          setModeName{
            name:t="IRST track"
          }
        }
      }

      mprfToIrst{
        stateFrom:t="mprf"
        stateFrom:t="mprfTry"
        event:t="targetNotDetected"
        stateTo:t="irstTry"

        actions{

          extrapolate{
          }
        }
      }

      backToIrst{
        stateFrom:t="irstOkMprfTry"
        event:t="targetNotDetected"
        stateTo:t="irstTry"

        actions{

          extrapolate{
          }
        }
      }

      irstToMprf{
        stateFrom:t="irst"
        event:t="targetNotDetected"
        stateTo:t="mprfTry"

        actions{

          extrapolate{
          }
        }
      }

      irstTryToMprf{
        stateFrom:t="irstTry"
        event:t="targetNotDetected"
        stateTo:t="mprfTry"

        actions{

          extrapolate{
          }

          setModeName{
            name:t="track memory"
          }
        }
      }
    }
  }

  irstTrack{
    stateInit:t="track"

    transitions{

      detect{
        event:t="update"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }

      track{
        event:t="targetDetected"

        actions{

          updateActiveTargetOfInterest{

            dirFilter{
              rateLim:p2=0.78, 0.78
              limTimeOut:r=1.0
              inertialTimeMax:r=1.0
            }

            distFilter{
              accelLim:p2=150.0, 150.0
              limTimeOut:r=1.0
              inertialTimeMax:r=1.0
            }
          }

          setCenterAzimuth{
            source:t="activeTargetOfInterest"
          }

          setCenterElevation{
            source:t="activeTargetOfInterest"
          }

          setDistGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }
        }
      }

      extrapolate{
        event:t="targetNotDetected"

        actions{

          extrapolateTargetsOfInterest{
          }

          clearTargetsOfInterest{
            timeOut:r=3.0
            dirRateLim:r=1.0
          }

          setCenterAzimuth{
            source:t="activeTargetOfInterest"
          }

          setCenterElevation{
            source:t="activeTargetOfInterest"
          }

          setDistGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }
        }
      }
    }
  }

  illumination{
    stateInit:t="init"

    transitions{

      activate{
        event:t="fsmActivate"
        stateTo:t="active"

        actions{

          checkIlluminationTimeOut{
            transiver:b=yes
            pauseMax:r=30.0
          }
        }
      }

      deactivate{
        event:t="fsmDeactivate"
        stateTo:t="inactive"

        actions{

          setIllumination{
            transiver:b=no
          }
        }
      }

      activateIllumination{
        event:t="sarhMissileLaunch"

        actions{

          setIlluminationTimeOut{
            timeOut:r=60.0
          }
        }
      }

      updateIllumination{
        event:t="update"

        actions{

          checkIlluminationTimeOut{
            transiver:b=yes
            pauseMax:r=30.0
          }
        }
      }
    }
  }

  helmetDesignation{
    stateInit:t="helmetDesignation"

    actionsTemplates{

      designateHelmetTargetDir{

        designateHelmetTarget{
          self:b=yes
        }

        setCenterAzimuth{
          source:t="targetDesignation"
        }

        setCenterElevation{
          source:t="targetDesignation"
        }
      }
    }

    transitions{

      activate{
        event:t="fsmActivate"

        actions{

          designateHelmetTargetDir{
          }
        }
      }

      updateDesignation{
        event:t="update"

        actions{

          designateHelmetTargetDir{
          }
        }
      }
    }
  }

  tws{
    stateInit:t="search"

    transitions{

      scan{
        event:t="update"
        stateFrom:t="track"
        stateTo:t="search"

        actions{

          scan{
          }

          extrapolateTargetsOfInterest{
          }

          clearTargetsOfInterest{
            timeOut:r=4.0
          }

          setCueToActiveTargetOfInterest{
          }

          setCenterAzimuth{
            source:t="constant"
            value:r=0.0
          }

          setCenterAzimuth{
            source:t="designationCue"
          }

          setCenterAzimuth{
            source:t="activeTargetOfInterest"
          }

          setCenterElevation{
            source:t="constant"
            value:r=0.0
          }

          setCenterElevation{
            source:t="designationCue"
          }

          setCenterElevation{
            source:t="activeTargetOfInterest"
          }
        }
      }

      detect{
        event:t="targetInSight"

        actions{

          setDistGatePos{
            source:t="continuousScale"
            width:r=0.0
          }

          setRelSpeedGatePos{
            source:t="continuousScale"
            width:r=0.0
          }

          detectTarget{
          }
        }
      }

      addTarget{
        event:t="targetDetected"
        stateFrom:t="search"

        actions{

          updateTargetOfInterest{
            limit:i=15
            radius:r=1000.0
            dopplerSpeedGateMaxTime:r=8.0
          }

          updateActiveDetectedTarget{
          }

          setCueToActiveTargetOfInterest{
          }
        }
      }

      switchSelectedTarget{
        command:t="switchTarget"

        actions{

          setNextDetectedTargetActive{
          }
        }
      }

      setCueAzimuth{
        command:t="cueAxisX"

        actions{

          setCueAzimuth{
          }
        }
      }

      setCueDist{
        command:t="cueAxisY"

        actions{

          setCueDist{
          }

          setCueDopplerSpeed{
          }
        }
      }

      setCueElevation{
        command:t="cueAxisZ"

        actions{

          setCueElevation{
          }
        }
      }

      setSelectedTarget{
        command:t="switchToTarget"

        actions{

          setDetectedTargetActive{
          }
        }
      }

      designateTarget{
        command:t="selectTarget"

        actions{

          designateActiveDetectedTarget{
            type:i=0
            sensorIndex:i=1
          }

          designateTargetUnderCue{
            type:i=0
            sensorIndex:i=1
          }
        }
      }

      scanTrack{
        stateFrom:t="search"
        event:t="update"
        stateTo:t="track"

        actions{

          scan{
            scanPattern:t="radarFastTws"
          }

          extrapolateTargetsOfInterest{
          }

          clearTargetsOfInterest{
            timeOut:r=4.0
          }

          setCueToActiveTargetOfInterest{
          }
        }
      }

      addTargetTrack{
        stateFrom:t="track"
        event:t="targetDetected"

        actions{

          updateTargetOfInterest{
            limit:i=15
            onlyExisting:b=yes
            radius:r=1000.0
            dopplerSpeedGateMaxTime:r=8.0
          }

          updateActiveDetectedTarget{
          }

          setCueToActiveTargetOfInterest{
          }
        }
      }
    }
  }

  track{
    stateInit:t="track"

    transitions{

      detect{
        event:t="update"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }

      track{
        event:t="targetDetected"

        actions{

          updateActiveTargetOfInterest{

            dirFilter{
              rateLim:p2=0.78, 0.78
              limTimeOut:r=1.0
              inertialTimeMax:r=1.0
            }

            distFilter{
              accelLim:p2=150.0, 150.0
              limTimeOut:r=1.0
              inertialTimeMax:r=1.0
            }
          }

          setCenterAzimuth{
            source:t="activeTargetOfInterest"
          }

          setCenterElevation{
            source:t="activeTargetOfInterest"
          }

          setDistGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }
        }
      }

      extrapolate{
        event:t="targetNotDetected"

        actions{

          extrapolateTargetsOfInterest{
          }

          clearTargetsOfInterest{
            timeOut:r=3.0
            dirRateLim:r=1.0
          }

          setCenterAzimuth{
            source:t="activeTargetOfInterest"
          }

          setCenterElevation{
            source:t="activeTargetOfInterest"
          }

          setDistGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }
        }
      }
    }
  }

  velocityLock{
    stateInit:t="velocityLock"

    transitions{

      init{
        event:t="fsmActivate"

        actions{

          setTransiver{
            transiver:t="hprfVelocity"
          }

          setSignal{
            signal:t="hprfVelocitySearch"
          }
        }
      }

      scan{
        event:t="update"

        actions{

          scan{
          }
        }
      }

      detect{
        event:t="targetInSight"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }
    }
  }

  gtmTrack{
    stateInit:t="track"

    transitions{

      detect{
        event:t="update"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }

      track{
        event:t="targetDetected"

        actions{

          updateActiveTargetOfInterest{

            dirFilter{
              rateLim:p2=0.78, 0.78
              limTimeOut:r=1.0
              inertialTimeMax:r=1.0
            }

            distFilter{
              accelLim:p2=150.0, 150.0
              limTimeOut:r=1.0
              inertialTimeMax:r=1.0
            }
          }

          setCenterAzimuth{
            source:t="activeTargetOfInterest"
          }

          setCenterElevation{
            source:t="activeTargetOfInterest"
          }

          setDistGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }
        }
      }

      extrapolate{
        event:t="targetNotDetected"

        actions{

          extrapolateTargetsOfInterest{
          }

          clearTargetsOfInterest{
            timeOut:r=3.0
            dirRateLim:r=1.0
          }

          setCenterAzimuth{
            source:t="activeTargetOfInterest"
          }

          setCenterElevation{
            source:t="activeTargetOfInterest"
          }

          setDistGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }
        }
      }
    }
  }
}

illuminationTransmitter{
  power:r=900.0

  antenna{
    angleHalfSens:r=3.5
    sideLobesSensitivity:r=-30.0
  }
}

transivers{

  mprf{
    sideLobesAttenuation:r=-20.0
    power:r=1200.0
    band:i=8
    rcs:r=3.0
    range:r=60000.0
    rangeMax:r=120000.0
    multipathEffect:p4=0.0, 1.0, 60.0, 0.0

    antenna{
      angleHalfSens:r=2.5
      sideLobesSensitivity:r=-32.0
    }
  }

  hprf{
    sideLobesAttenuation:r=-20.0
    power:r=1200.0
    band:i=8
    rcs:r=3.0
    range:r=100000.0
    rangeMax:r=200000.0
    multipathEffect:p4=0.0, 1.0, 60.0, 0.0

    antenna{
      angleHalfSens:r=2.5
      sideLobesSensitivity:r=-32.0
    }
  }

  hprfVelocity{
    sideLobesAttenuation:r=-20.0
    power:r=1200.0
    band:i=8
    rcs:r=3.0
    range:r=120000.0
    rangeMax:r=240000.0
    multipathEffect:p4=0.0, 1.0, 60.0, 0.0

    antenna{
      angleHalfSens:r=2.5
      sideLobesSensitivity:r=-32.0
    }
  }

  GTM{
    sideLobesAttenuation:r=-20.0
    power:r=1200.0
    band:i=8
    rcs:r=40.0
    range:r=40000.0
    rangeMax:r=80000.0
    multipathEffect:p4=0.0, 1.0, 60.0, 0.0

    antenna{
      angleHalfSens:r=2.5
      sideLobesSensitivity:r=-32.0
    }
  }

  irst{
    power:r=50.0
    band:i=1
    rcs:r=24000.0
    range:r=22000.0
    range1:r=5000.0
    rangeMax:r=30000.0
    visibilityType:t="infraRed"

    antenna{

      azimuth{
        angleHalfSens:r=4.0
        sideLobesSensitivity:r=-120.0
      }

      elevation{
        angleHalfSens:r=0.3
        sideLobesSensitivity:r=-120.0
      }
    }
  }
}

signals{

  mprfSearch{
    groundClutter:b=no
    aircraftAsTarget:b=yes
    friendFoeId:b=yes
    targetId:b=yes
    mainBeamNotchWidth:r=100.0

    distance{
      presents:b=yes
      minValue:r=500.0
      maxValue:r=100000.0
      width:r=500.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=-2500.0
      maxValue:r=2500.0
      signalWidthMin:r=2.0
      width:r=38.0
    }
  }

  hprfSearch{
    groundClutter:b=no
    aircraftAsTarget:b=yes
    friendFoeId:b=yes
    targetId:b=yes
    mainBeamDopplerSpeed:b=yes

    distance{
      presents:b=yes
      minValue:r=9000.0
      maxValue:r=100000.0
      width:r=3000.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=50.0
      maxValue:r=1200.0
      signalWidthMin:r=5.0
      width:r=150.0
    }
  }

  hprfVelocitySearch{
    rangeFinder:b=no
    dopplerSpeedFinder:b=yes
    groundClutter:b=no
    aircraftAsTarget:b=yes
    friendFoeId:b=yes
    mainBeamDopplerSpeed:b=yes

    dopplerSpeed{
      presents:b=yes
      minValue:r=-138.9
      maxValue:r=1388.9
      signalWidthMin:r=2.0
      width:r=30.0
    }
  }

  mprfTrack{
    groundClutter:b=no
    aircraftAsTarget:b=yes
    angularAccuracy:r=0.05
    distanceAccuracy:r=15.0
    targetId:b=yes
    mainBeamNotchWidth:r=40.0
    mainBeamNotchMaxElevation:r=3.5
    track:b=yes

    distance{
      presents:b=yes
      minValue:r=500.0
      maxValue:r=100000.0
      width:r=500.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=-2500.0
      maxValue:r=2500.0
      signalWidthMin:r=2.0
      width:r=24.0
    }
  }

  hprfTrack{
    rangeFinder:b=yes
    dopplerSpeedFinder:b=yes
    dynamicRange:p2=40.0, 15.0
    groundClutter:b=yes
    aircraftAsTarget:b=yes
    angularAccuracy:r=0.05
    distanceAccuracy:r=15.0
    targetId:b=yes
    absDopplerSpeed:b=no
    mainBeamDopplerSpeed:b=no
    track:b=yes

    distance{
      presents:b=yes
      minValue:r=200.0
      maxValue:r=100000.0
      width:r=500.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=-1200.0
      maxValue:r=1200.0
      signalWidthMin:r=2.0
      width:r=24.0
    }
  }

  acmLock{
    groundClutter:b=no
    aircraftAsTarget:b=yes
    angularAccuracy:r=0.05
    distanceAccuracy:r=15.0
    mainBeamNotchWidth:r=40.0

    distance{
      presents:b=yes
      minValue:r=250.0
      maxValue:r=10000.0
      width:r=250.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=-2500.0
      maxValue:r=2500.0
      signalWidthMin:r=2.0
      width:r=24.0
    }
  }

  hmdLock{
    groundClutter:b=no
    aircraftAsTarget:b=yes
    angularAccuracy:r=0.05
    distanceAccuracy:r=15.0
    mainBeamNotchWidth:r=40.0

    distance{
      presents:b=yes
      minValue:r=250.0
      maxValue:r=20000.0
      width:r=250.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=-2500.0
      maxValue:r=2500.0
      signalWidthMin:r=2.0
      width:r=24.0
    }
  }

  acmTrack{
    groundClutter:b=no
    aircraftAsTarget:b=yes
    angularAccuracy:r=0.05
    distanceAccuracy:r=15.0
    targetId:b=yes
    mainBeamNotchWidth:r=40.0
    mainBeamNotchMaxElevation:r=3.5
    track:b=yes

    distance{
      presents:b=yes
      minValue:r=250.0
      maxValue:r=10000.0
      width:r=250.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=-2500.0
      maxValue:r=2500.0
      signalWidthMin:r=2.0
      width:r=24.0
    }
  }

  irstSearch{
    rangeFinder:b=no
    groundClutter:b=no
    showBScope:b=no
    showCScope:b=yes
  }

  irstTrack{
    rangeFinder:b=yes
    groundClutter:b=no
    angularAccuracy:r=0.05
    distanceAccuracy:r=10.0
  }

  GTMSearch{
    groundClutter:b=no
    aircraftAsTarget:b=no
    groundVehiclesAsTarget:b=yes
    angularAccuracy:r=0.0
    distanceAccuracy:r=1.0
    absDopplerSpeed:b=yes
    mainBeamDopplerSpeed:b=yes

    distance{
      presents:b=yes
      minValue:r=500.0
      maxValue:r=60000.0
      width:r=15.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=2.5
      maxValue:r=1000.0
      signalWidthMin:r=2.5
      width:r=0.0
    }
  }

  GTMTrack{
    groundClutter:b=no
    aircraftAsTarget:b=no
    groundVehiclesAsTarget:b=yes
    angularAccuracy:r=0.0
    distanceAccuracy:r=1.0
    absDopplerSpeed:b=yes
    mainBeamDopplerSpeed:b=yes
    track:b=yes

    distance{
      presents:b=yes
      minValue:r=500.0
      maxValue:r=60000.0
      width:r=15.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=1.5
      maxValue:r=1000.0
      signalWidthMin:r=2.5
      width:r=0.0
    }
  }
}

scanPatterns{

  radarSearchManualNarrow{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-45.0, 45.0
    rollStabLimit:r=90.0
    pitchStabLimit:r=60.0
    period:r=0.4
    width:r=12.5
    barHeight:r=2.0
    barsCount:i=2
    rowMajor:b=yes
  }

  radarSearchManualMedium{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-45.0, 45.0
    rollStabLimit:r=90.0
    pitchStabLimit:r=60.0
    period:r=1.1
    width:r=22.5
    barHeight:r=1.667
    barsCount:i=4
    rowMajor:b=yes
  }

  radarSearchManualWide{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-45.0, 45.0
    rollStabLimit:r=90.0
    pitchStabLimit:r=60.0
    period:r=1.5
    width:r=40.0
    barHeight:r=1.875
    barsCount:i=4
    rowMajor:b=yes
  }

  radarTwsNarrow{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-45.0, 45.0
    rollStabLimit:r=90.0
    pitchStabLimit:r=60.0
    period:r=0.4
    width:r=12.5
    barHeight:r=2.0
    barsCount:i=2
    rowMajor:b=yes
    preciseMinor:b=yes
    tws:b=yes
  }

  radarTwsMedium{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-45.0, 45.0
    rollStabLimit:r=90.0
    pitchStabLimit:r=60.0
    period:r=1.1
    width:r=22.5
    barHeight:r=1.667
    barsCount:i=4
    rowMajor:b=yes
    preciseMinor:b=yes
    tws:b=yes
  }

  radarTwsWide{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-45.0, 45.0
    rollStabLimit:r=90.0
    pitchStabLimit:r=60.0
    period:r=1.5
    width:r=40.0
    barHeight:r=1.875
    barsCount:i=4
    rowMajor:b=yes
    preciseMinor:b=yes
    tws:b=yes
  }

  radarFastTws{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-45.0, 45.0
    rollStabLimit:r=90.0
    pitchStabLimit:r=60.0
    period:r=0.011
    width:r=70.0
    barHeight:r=1.875
    barsCount:i=43
    rowMajor:b=yes
    preciseMinor:b=yes
    tws:b=yes
  }

  radarBvrLockSearch{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-45.0, 45.0
    rollStabLimit:r=90.0
    pitchStabLimit:r=60.0
    period:r=0.5
    width:r=4.0
    barHeight:r=2.0
    barsCount:i=4
    rowMajor:b=yes
    indicate:b=yes
  }

  radarBvrLockTws{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-45.0, 45.0
    rollStabLimit:r=90.0
    pitchStabLimit:r=60.0
    period:r=0.25
    width:r=4.0
    barHeight:r=2.0
    barsCount:i=2
    rowMajor:b=yes
    indicate:b=yes
  }

  radarVerticalLock{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-15.0, 40.0
    period:r=1.1
    width:r=25.0
    barHeight:r=2.0
    barsCount:i=2
    rowMajor:b=no
    centerElevation:r=15.0
    indicate:b=yes
  }

  radarHmdLock{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-45.0, 45.0
    period:r=0.2
    width:r=0.75
    barHeight:r=1.5
    barsCount:i=2
    rowMajor:b=yes
    indicate:b=yes
    hmd:b=yes
  }

  radarBoresightLock{
    type:t="cone"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-45.0, 45.0
    period:r=0.3
    width:r=1.75
    indicate:b=yes
  }

  radarHudLock{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-45.0, 45.0
    period:r=1.8
    width:r=10.0
    barHeight:r=2.5
    barsCount:i=8
    rowMajor:b=yes
    indicate:b=yes
  }

  radarTrack{
    type:t="no"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-45.0, 45.0
  }

  radarHmdTrack{
    type:t="no"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-45.0, 45.0
    hmd:b=yes
  }

  irstSearchWide{
    type:t="pyramide"
    azimuthLimits:p2=-60.0, 60.0
    elevationLimits:p2=-22.5, 52.5
    rollStabLimit:r=90.0
    pitchStabLimit:r=60.0
    period:r=5.0
    width:r=5.0
    barHeight:r=2.0
    barsCount:i=30
    rowMajor:b=no
    isSmoothMajor:b=yes
    barsOneWay:b=no
  }

  irstSearchNarrow{
    type:t="pyramide"
    azimuthLimits:p2=-60.0, 60.0
    elevationLimits:p2=-22.5, 52.5
    rollStabLimit:r=90.0
    pitchStabLimit:r=60.0
    period:r=1.25
    width:r=2.5
    barHeight:r=2.0
    barsCount:i=10
    rowMajor:b=no
    isSmoothMajor:b=yes
    barsOneWay:b=no
  }

  irstBvrLock{
    type:t="pyramide"
    azimuthLimits:p2=-60.0, 60.0
    elevationLimits:p2=-22.5, 52.5
    rollStabLimit:r=90.0
    pitchStabLimit:r=60.0
    period:r=1.0
    width:r=15.0
    barHeight:r=4.0
    barsCount:i=1
    rowMajor:b=no
    indicate:b=yes
  }

  irstVerticalLock{
    type:t="pyramide"
    azimuthLimits:p2=-60.0, 60.0
    elevationLimits:p2=-22.5, 52.5
    period:r=0.3
    width:r=15.0
    barHeight:r=4.0
    barsCount:i=1
    rowMajor:b=no
    centerElevation:r=1.0
    indicate:b=yes
  }

  irstHmdLock{
    type:t="pyramide"
    type:t="pyramide"
    azimuthLimits:p2=-60.0, 60.0
    elevationLimits:p2=-22.5, 52.5
    period:r=0.2
    width:r=2.0
    barHeight:r=0.3
    barsCount:i=13
    rowMajor:b=yes
    centerElevation:r=1.0
    indicate:b=yes
    hmd:b=yes
  }

  irstTrack{
    type:t="no"
    azimuthLimits:p2=-60.0, 60.0
    elevationLimits:p2=-22.5, 52.5
  }

  irstHmdTrack{
    type:t="no"
    azimuthLimits:p2=-60.0, 60.0
    elevationLimits:p2=-22.5, 52.5
    hmd:b=yes
  }
}

scanPatternSets{

  radarSearchManual{
    scanPattern1:t="radarSearchManualMedium"
    scanPattern2:t="radarSearchManualNarrow"
    scanPattern3:t="radarSearchManualWide"
  }

  radarTws{
    scanPattern1:t="radarTwsMedium"
    scanPattern2:t="radarTwsNarrow"
    scanPattern3:t="radarTwsWide"
  }

  irstSearch{
    scanPattern1:t="irstSearchWide"
    scanPattern2:t="irstSearchNarrow"
  }

  radarAcmLock{
    scanPattern1:t="radarVerticalLock"
    scanPattern2:t="radarBoresightLock"
    scanPattern3:t="radarHudLock"
  }

  irstAcmLock{
    scanPattern1:t="irstVerticalLock"
  }

  radarHmdLock{
    scanPattern1:t="radarHmdLock"
  }

  irstHmdLock{
    scanPattern1:t="irstHmdLock"
  }
}

targetTypeId{
  name:t="hud/mig_15"
  targetType:t="mig-15"
  targetType:t="mig-15_ns23"
  targetType:t="mig-15bis_ns23"
  targetType:t="mig-15bis_nr23_german"
  targetType:t="mig-15bis_nr23_hungary"
  targetType:t="mig-15bis_nr23_china"
  targetType:t="mig-15bis_ish"
}

targetTypeId{
  name:t="hud/yak_38"
  targetType:t="yak-38"
  targetType:t="yak-38m"
}

targetTypeId{
  name:t="hud/yak_141"
  targetType:t="yak_141"
}

targetTypeId{
  name:t="hud/su_17"
  targetType:t="su_17m2"
  targetType:t="su_17m4"
  targetType:t="su_22m3"
  targetType:t="su_22m3_hungary"
  targetType:t="su_22um3k"
  targetType:t="su_22m4"
  targetType:t="su_22m4_de_wtd61"
}

targetTypeId{
  name:t="hud/su_24"
  targetType:t="su_24m"
}

targetTypeId{
  name:t="hud/su_25"
  targetType:t="su_25"
  targetType:t="su_25k"
  targetType:t="su_25t"
  targetType:t="su_25tm"
  targetType:t="su_25_558arz"
  targetType:t="su_25sm3"
}

targetTypeId{
  name:t="hud/su_27"
  targetType:t="su_27"
  targetType:t="su_27sm"
  targetType:t="su_33"
  targetType:t="su_34"
  targetType:t="su_30sm"
  targetType:t="j_11"
  targetType:t="j_11a"
  targetType:t="j_11b"
}

targetTypeId{
  name:t="hud/mig_21"
  targetType:t="mig-21_bis_lazur"
  targetType:t="mig-21_bison"
  targetType:t="mig-21_f13"
  targetType:t="mig-21_smt"
  targetType:t="mig-21_bis"
  targetType:t="mig-21_bis_sau"
  targetType:t="mig-21_bis_sau_hungary"
  targetType:t="mig-21_mf"
  targetType:t="mig-21_mf_hungary"
  targetType:t="mig-21_sps_k"
  targetType:t="mig-21_pfm"
  targetType:t="mig-21_s"
  targetType:t="mig_21_bis_finland"
  targetType:t="j_7_mk2"
  targetType:t="j_7d"
  targetType:t="j_7e"
}

targetTypeId{
  name:t="hud/mig_23"
  targetType:t="mig_23m"
  targetType:t="mig_23bn"
  targetType:t="mig_23mf_germany"
  targetType:t="mig_23mf_hungary"
  targetType:t="mig_23ml"
  targetType:t="mig_23mld"
  targetType:t="mig_23mla"
  targetType:t="mig_27m"
  targetType:t="mig_27k"
}

targetTypeId{
  name:t="hud/mig_29"
  targetType:t="mig_29_9_13"
  targetType:t="mig_29_9_12g"
  targetType:t="mig_29_9_12_germany"
  targetType:t="mig_29_9_12b_hungary"
  targetType:t="mig_29smt_9_19"
  targetType:t="mig_29smt_9_19_missile_test"
}

targetTypeId{
  name:t="hud/f_4"
  targetType:t="f-4c"
  targetType:t="f-4e"
  targetType:t="f-4j"
  targetType:t="f-4s"
  targetType:t="f-4ej"
  targetType:t="f-4ej_adtw"
  targetType:t="f-4ej_kai"
  targetType:t="f-4m_fgr2"
  targetType:t="f-4jk"
  targetType:t="f-4k"
  targetType:t="f-4f"
  targetType:t="f-4f_late"
  targetType:t="f-4f_kws_lv"
  targetType:t="f-4e_iaf"
  targetType:t="f-4e_kurnass_2000"
}

targetTypeId{
  name:t="hud/f_5"
  targetType:t="f-5a"
  targetType:t="f-5a_china"
  targetType:t="f-5ag_norway"
  targetType:t="f-5e_aidc"
  targetType:t="f-5e_fcu_thailand"
  targetType:t="f-5a_thailand"
  targetType:t="f-5t_thailand"
  targetType:t="f-5c"
  targetType:t="f-5e"
}

targetTypeId{
  name:t="hud/a_7"
  targetType:t="a_7d"
  targetType:t="a_7e"
  targetType:t="a_7e_thailand"
  targetType:t="a_7k"
}

targetTypeId{
  name:t="hud/f_8"
  targetType:t="f-8e"
  targetType:t="f-8e_fn"
  targetType:t="f8u-2"
}

targetTypeId{
  name:t="hud/a_10"
  targetType:t="a_10a_early"
  targetType:t="a_10a_late"
  targetType:t="a_10c"
}

targetTypeId{
  name:t="hud/f_104"
  targetType:t="f-104a"
  targetType:t="f-104c"
  targetType:t="f-104g"
  targetType:t="f-104a_china"
  targetType:t="f-104g_china"
  targetType:t="f-104g_italy"
  targetType:t="f-104j"
  targetType:t="f-104s"
  targetType:t="f-104s_cb"
  targetType:t="f-104s_asa"
  targetType:t="f-104g_belgium"
}

targetTypeId{
  name:t="hud/f_105"
  targetType:t="f-105d"
}

targetTypeId{
  name:t="hud/f_111"
  targetType:t="f_111a"
  targetType:t="f_111f"
  targetType:t="f_111c_raaf"
}

targetTypeId{
  name:t="hud/f_14"
  targetType:t="f_14a_early"
  targetType:t="f_14a_iriaf"
  targetType:t="f_14b"
}

targetTypeId{
  name:t="hud/f_15"
  targetType:t="f_15a"
  targetType:t="f_15a_iaf"
  targetType:t="f_15j"
  targetType:t="f_15j_kai"
  targetType:t="f_15c_msip2"
  targetType:t="f_15c_baz_msip"
  targetType:t="f_15e"
  targetType:t="f_15i_raam"
}

targetTypeId{
  name:t="hud/f_16"
  targetType:t="f_16a_block_10"
  targetType:t="f_16a_block_15_adf"
  targetType:t="f_16a_block_15_adf_italy"
  targetType:t="f_16a_block_15_ocu_thailand"
  targetType:t="f_16a_block_10_iaf"
  targetType:t="f_16a_block_10_netz_mod"
  targetType:t="f_16a_block_15_belgium"
  targetType:t="f_16am_block_15_mlu_belgium"
  targetType:t="f_16c_block_40_barak_2"
  targetType:t="f_16d_block_40_barak_2"
  targetType:t="f_16d_block_40_barak_2_missile_test"
  targetType:t="f_16a_block_20_mlu"
  targetType:t="f_16aj"
  targetType:t="f_16c_block_50"
  targetType:t="f_16c_block_50_missile_test"
}

targetTypeId{
  name:t="hud/f_18"
  targetType:t="fa_18a"
  targetType:t="fa_18c_early"
  targetType:t="fa_18c_late"
  targetType:t="fa_18c_finland"
}

targetTypeId{
  name:t="hud/f_20"
  targetType:t="f_20a"
}

targetTypeId{
  name:t="hud/harrier"
  targetType:t="harrier_gr1"
  targetType:t="harrier_gr3"
  targetType:t="harrier_frs1_early"
  targetType:t="harrier_frs1"
  targetType:t="harrier_gr7"
  targetType:t="harrier_t10"
  targetType:t="sea_harrier_fa2"
  targetType:t="av_8a"
  targetType:t="av_8b_na"
  targetType:t="av_8b_plus"
  targetType:t="av_8b_plus_italy"
  targetType:t="av_8c"
  targetType:t="av_8s_thailand"
  targetType:t="av_8s_late_thailand"
}

targetTypeId{
  name:t="hud/jaguar"
  targetType:t="jaguar_is"
  targetType:t="jaguar_gr1a"
  targetType:t="jaguar_gr1"
  targetType:t="jaguar_e"
  targetType:t="jaguar_a"
  targetType:t="jaguar_a_killstreak"
  targetType:t="jaguar_a_germany_killstreak"
  targetType:t="jaguar_a_italy_killstreak"
  targetType:t="jaguar_a_japan_killstreak"
  targetType:t="jaguar_a_sweden_killstreak"
  targetType:t="jaguar_a_uk_killstreak"
  targetType:t="jaguar_a_usa_killstreak"
  targetType:t="jaguar_a_iaf_killstreak"
}

targetTypeId{
  name:t="hud/tornado"
  targetType:t="tornado_gr1"
  targetType:t="tornado_gr4"
  targetType:t="tornado_f3"
  targetType:t="tornado_f3_late"
  targetType:t="tornado_ids_de_mfg"
  targetType:t="tornado_ids_de_assta1"
  targetType:t="tornado_ids_de_wtd61"
  targetType:t="tornado_ids_it"
  targetType:t="tornado_ids_it_mod95"
  targetType:t="tornado_ids_it_ret8"
  targetType:t="tornado_adv"
}

targetTypeId{
  name:t="hud/buccanier"
  targetType:t="buccaneer_s1"
  targetType:t="buccaneer_s2"
  targetType:t="buccaneer_s2b"
}

targetTypeId{
  name:t="hud/typhoon"
  targetType:t="ef_2000_fgr4"
  targetType:t="ef_2000a"
  targetType:t="ef_2000_block_10"
}

targetTypeId{
  name:t="hud/q_5"
  targetType:t="q_5_early"
  targetType:t="q_5a"
  targetType:t="q_5l"
  targetType:t="a_5c"
}

targetTypeId{
  name:t="hud/jh_7"
  targetType:t="jh_7a"
}

targetTypeId{
  name:t="hud/j_8"
  targetType:t="j_8b"
  targetType:t="j_8f"
  targetType:t="j_8f_missile_test"
}

targetTypeId{
  name:t="hud/j_10"
  targetType:t="j_10a"
}

targetTypeId{
  name:t="hud/jf_17"
  targetType:t="jf_17"
}

targetTypeId{
  name:t="hud/amx"
  targetType:t="amx_a_1a_brazil"
  targetType:t="amx"
}

targetTypeId{
  name:t="hud/mirage_f1"
  targetType:t="mirage_f1c_200"
  targetType:t="mirage_f1c"
  targetType:t="mirage_f1ct"
}

targetTypeId{
  name:t="hud/mirage_3"
  targetType:t="mirage_3c"
  targetType:t="mirage_3cj"
  targetType:t="mirage_3e"
  targetType:t="mirage_milan"
  targetType:t="mirage_5ba"
  targetType:t="kfir_canard"
  targetType:t="kfir_c2"
  targetType:t="kfir_c7"
  targetType:t="kfir_c10_colombia"
}

targetTypeId{
  name:t="hud/mirage_2000"
  targetType:t="mirage_2000_5f"
  targetType:t="mirage_2000_5f_missile_test"
  targetType:t="mirage_2000_5ei"
  targetType:t="mirage_2000c_s4"
  targetType:t="mirage_2000c_s5"
  targetType:t="mirage_2000d_r1"
  targetType:t="mirage_2000d_rmv"
}

targetTypeId{
  name:t="hud/mirage_4000"
  targetType:t="mirage_4000"
}

targetTypeId{
  name:t="hud/rafale"
  targetType:t="rafale_c_f3"
}

targetTypeId{
  name:t="hud/draken"
  targetType:t="saab_j35xs"
  targetType:t="saab_j35d"
  targetType:t="saab_j35a"
}

targetTypeId{
  name:t="hud/viggen"
  targetType:t="saab_aj37"
  targetType:t="saab_ja37"
  targetType:t="saab_ja37d"
  targetType:t="saab_ja37di"
  targetType:t="saab_ja37di_f21"
  targetType:t="saab_ajs37"
}

targetTypeId{
  name:t="hud/gripen"
  targetType:t="saab_jas39a"
  targetType:t="saab_jas39c_south_africa"
  targetType:t="saab_jas39c_south_africa_missile_test"
  targetType:t="saab_jas39c_hungary"
  targetType:t="saab_jas39c_thailand"
  targetType:t="saab_jas39c"
}

targetTypeId{
  name:t="hud/single prop"

  targetPropulsion{
    type:t="propellers"
    num:i=1
  }
}

targetTypeId{
  name:t="hud/multi prop"

  targetPropulsion{
    type:t="propellers"
    num:i=2
  }

  targetPropulsion{
    type:t="propellers"
    num:i=3
  }

  targetPropulsion{
    type:t="propellers"
    num:i=4
  }
}

targetTypeId{
  name:t="hud/single jet"

  targetPropulsion{
    type:t="jet"
    num:i=1
  }
}

targetTypeId{
  name:t="hud/multi jet"

  targetPropulsion{
    type:t="jet"
    num:i=2
  }

  targetPropulsion{
    type:t="jet"
    num:i=3
  }

  targetPropulsion{
    type:t="jet"
    num:i=4
  }
}

targetTypeId{
  name:t="hud/helicopter"

  targetPropulsion{
    type:t="rotors"
  }
}

targetTypeId{
  name:t="hud/rocket"

  targetPropulsion{
    type:t="rocket"
  }
}

targetTypeId{
  name:t="hud/small"
  sizeRange:p2=0.0, 5.0
}

targetTypeId{
  name:t="hud/medium"
  sizeRange:p2=5.0, 25.0
}

targetTypeId{
  name:t="hud/large"
  sizeRange:p2=25.0, 500.0
}