type:t="radar"
name:t="JL-10A"
showMissileLaunchZone:b=yes
showMissileDgftLaunchZone:b=yes

fsms{

  main{
    stateInit:t="init"

    actionsTemplates{

      init{

        setEnabled{
          value:b=no
        }

        setTargetDesignationRange{
          azimuthRange:p2=-60.0, 60.0
          azmithWidth:r=5.0
          elevationRange:p2=-60.0, 60.0
          distanceRange:p2=0.0, 74000.0
          distanceWidth:r=2000.0
          distanceRelWidthMin:r=0.05
        }

        setFsmActive{
          fsm:t="searchModes"
          active:b=yes
        }
      }

      setStandbySearchModeCommon{

        setCenterAzimuth{
          source:t="constant"
          value:r=0.0
        }

        setCenterElevation{
          source:t="constant"
          value:r=0.0
        }

        setScopeRangeSet{
          scopeRangeSet:t="common"
        }

        setFsmActive{
          fsm:t="searchModes"
          active:b=yes
        }
      }

      setStandbyModeCommon{

        setStandbySearchModeCommon{
        }

        setEnabled{
          value:b=no
        }

        setScanPatternSet{
          scanPatternSet:t="search"
        }
      }

      resetStandbyMode{

        setFsmActive{
          fsm:t="searchModes"
          active:b=no
        }
      }

      setSearchModeCommon{

        setStandbySearchModeCommon{
        }

        setEnabled{
          value:b=yes
        }

        setCueEnabled{
          value:b=yes
          updateActiveTargetUnderCue:b=no
        }

        setScanPatternSet{
          scanPatternSet:t="search"
        }

        setFsmActive{
          fsm:t="search"
          active:b=yes
        }
      }

      resetSearchMode{

        clearTargets{
        }

        setFsmActive{
          fsm:t="search"
          active:b=no
        }

        setFsmActive{
          fsm:t="searchModes"
          active:b=no
        }

        setCueEnabled{
          value:b=no
        }
      }

      setBvrLockModeCommon{

        setEnabled{
          value:b=yes
        }

        setScanPatternSet{
        }

        resetScanPhase{
        }
      }

      setBvrLockMode{

        setBvrLockModeCommon{
        }

        setFsmActive{
          fsm:t="bvrLock"
          active:b=yes
        }

        setDistGatePos{
          source:t="targetDesignation"
          width:r=2000.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=3000.0
        }

        setScanPattern{
          scanPattern:t="bvrLockSearch"
        }

        setCenterAzimuth{
          source:t="targetDesignation"
        }
      }

      designatedTargetSearch{

        designateTargetUnderCue{
          type:i=0
          self:b=yes
          sensorIndex:i=0
        }

        designateActiveDetectedTarget{
          type:i=0
          self:b=yes
          sensorIndex:i=0
        }
      }

      resetBvrLockMode{

        setFsmActive{
          fsm:t="bvrLock"
          active:b=no
        }
      }

      setTrackMode{

        setEnabled{
          value:b=yes
        }

        setScanPatternSet{
        }

        setScanPattern{
          scanPattern:t="track"
        }

        addTargetOfInterest{
        }

        setLastTargetOfInterestActive{
        }

        updateActiveTargetOfInterest{
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }

        setFsmActive{
          fsm:t="track"
          active:b=yes
        }
      }

      resetTrackMode{

        clearTargetsOfInterest{
        }

        setFsmActive{
          fsm:t="track"
          active:b=no
        }
      }

      setAcmLockMode{

        setEnabled{
          value:b=yes
        }

        resetScanPhase{
        }

        setScanPatternSet{
          scanPatternSet:t="acmLock"
        }

        setCenterAzimuth{
          source:t="constant"
          value:r=0.0
        }

        setCenterElevation{
          source:t="constant"
          value:r=0.0
        }

        setFsmActive{
          fsm:t="acmLock"
          active:b=yes
        }

        setDistGatePos{
          source:t="constRange"
          pos:r=9250.0
          width:r=18500.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=3000.0
        }

        setScopeRangeSet{
          scopeRangeSet:t="acm"
        }

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="mprfAcm"
        }

        setModeName{
          name:t="PD ACM"
        }
      }

      resetAcmLockMode{

        setFsmActive{
          fsm:t="acmLock"
          active:b=no
        }
      }

      setMprfStandbyMode{

        setStandbyModeCommon{
        }

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="mprfSearch"
        }

        setModeName{
          name:t="PD standby"
        }
      }

      setLprfStandbyMode{

        setStandbyModeCommon{
        }

        setScanPatternSet{
          scanPatternSet:t="search"
        }

        setTransiver{
          transiver:t="lprf"
        }

        setSignal{
          signal:t="lprfSearch"
        }

        setModeName{
          name:t="standby"
        }
      }

      setMprfSearchMode{

        setSearchModeCommon{
        }

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="mprfSearch"
        }

        setModeName{
          name:t="PD search"
        }
      }

      setLprfSearchMode{

        setSearchModeCommon{
        }

        setTransiver{
          transiver:t="lprf"
        }

        setSignal{
          signal:t="lprfSearch"
        }

        setModeName{
          name:t="search"
        }
      }

      setMprfBvrLockMode{

        setBvrLockMode{
        }

        setModeName{
          name:t="PD acquisition"
        }
      }

      setLprfBvrLockMode{

        setBvrLockMode{
        }

        setModeName{
          name:t="acquisition"
        }
      }
    }

    transitions{

      init{
        stateFrom:t="init"
        event:t="init"
        stateTo:t="standby"

        actions{

          init{
          }
        }
      }

      standbyToSearch{
        stateFrom:t="standby"
        command:t="switch"
        event:t="enable"
        stateTo:t="search"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetStandbyMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      searchToStandby{
        stateFrom:t="search"
        command:t="switch"
        event:t="disable"
        stateTo:t="standby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetSearchMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      bvrLock{
        stateFrom:t="search"
        command:t="selectTarget"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="designateTarget"
          }
        }
      }

      checkDesignationType0{
        stateFrom:t="search"
        command:t="designateTarget"
        stateTo:t="checkDesignationType0"

        actions{

          checkDesignationTypeEquals{
            value:i=0
          }
        }
      }

      bvrLockResponce{
        stateFrom:t="checkDesignationType0"
        event:t="designationTypeEquals"
        stateTo:t="bvrLock"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetSearchMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setBvrLockMode"
          }
        }
      }

      returnToSearchMode{
        stateFrom:t="checkDesignationType0"
        event:t="designationTypeNotEquals"
        stateTo:t="search"
      }

      bvrLockToBvrTrack{
        stateFrom:t="bvrLock"
        event:t="targetDetected"
        stateTo:t="bvrTrack"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetBvrLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setBvrTrackMode"
          }
        }
      }

      failedBvrLock{
        stateFrom:t="bvrLock"
        event:t="scanFinished"
        stateTo:t="search"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetBvrLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      finishedBvrTrack{
        stateFrom:t="bvrTrack"
        event:t="targetsOfInterestCleanup"
        command:t="selectTarget"
        command:t="switch"
        stateTo:t="search"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetBvrTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      finishBvrTrackAndSwitchOff{
        stateFrom:t="bvrTrack"
        event:t="disable"
        stateTo:t="standby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetBvrTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      updateStandbyMode{
        stateFrom:t="standby"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetStandbyMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      updateSearchMode{
        stateFrom:t="search"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetSearchMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      switchScanPattern{
        stateFrom:t="standby"
        stateFrom:t="search"
        stateFrom:t="acmLock"
        command:t="scanPatternSwitch"

        actions{

          setNextScanPattern{
          }
        }
      }

      switchScopeRange{
        command:t="rangeSwitch"

        actions{

          setNextScopeRange{
          }
        }
      }

      searchToAcmLock{
        stateFrom:t="search"
        command:t="acmSwitch"
        stateTo:t="acmLock"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetSearchMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setAcmLockMode"
          }
        }
      }

      standbyToAcmLock{
        stateFrom:t="standby"
        command:t="selectTarget"
        command:t="acmSwitch"
        stateTo:t="acmLock"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetStandbyMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setAcmLockMode"
          }
        }
      }

      acmLockToAcmTrack{
        stateFrom:t="acmLock"
        event:t="targetDetected"
        stateTo:t="acmTrack"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setAcmTrackMode"
          }
        }
      }

      acmLockToStandby{
        stateFrom:t="acmLock"
        command:t="selectTarget"
        event:t="disable"
        stateTo:t="standby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      acmLockToSearch{
        stateFrom:t="acmLock"
        command:t="acmSwitch"
        command:t="switch"
        stateTo:t="search"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      acmTrackToAcmLock{
        stateFrom:t="acmTrack"
        event:t="targetsOfInterestCleanup"
        stateTo:t="acmLock"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setAcmLockMode"
          }
        }
      }

      acmTrackToStandby{
        stateFrom:t="acmTrack"
        command:t="selectTarget"
        event:t="disable"
        stateTo:t="standby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      acmTrackToSearch{
        stateFrom:t="acmTrack"
        command:t="acmSwitch"
        command:t="switch"
        stateTo:t="search"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }
    }
  }

  searchModes{
    stateInit:t="init"

    transitions{

      initToMprf{
        stateFrom:t="init"
        event:t="fsmActivate"
        stateTo:t="mprf"

        actions{

          setCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
            actionTemplateName:t="setMprfStandbyMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="resetStandbyMode"
            actionTemplateName:t="resetStandbyMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
            actionTemplateName:t="setMprfSearchMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="resetSearchMode"
            actionTemplateName:t="resetSearchMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="setBvrLockMode"
            actionTemplateName:t="setMprfBvrLockMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="resetBvrLockMode"
            actionTemplateName:t="resetBvrLockMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="designateTarget"
            actionTemplateName:t="designatedTargetSearch"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="setAcmLockMode"
            actionTemplateName:t="setAcmLockMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmLockMode"
            actionTemplateName:t="resetAcmLockMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="setBvrTrackMode"
            actionTemplateName:t="setTrackMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="resetBvrTrackMode"
            actionTemplateName:t="resetTrackMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="setAcmTrackMode"
            actionTemplateName:t="setTrackMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmTrackMode"
            actionTemplateName:t="resetTrackMode"
          }
        }
      }

      mprfToLprf{
        stateFrom:t="mprf"
        command:t="modeSwitch"
        stateTo:t="lprf"

        actions{

          setCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
            actionTemplateName:t="setLprfStandbyMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
            actionTemplateName:t="setLprfSearchMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="setBvrLockMode"
            actionTemplateName:t="setLprfBvrLockMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="resetSearchMode"
            actionTemplateName:t="resetSearchMode"
          }

          setFsmActive{
            fsm:t="main"
            active:b=no
          }

          setFsmActive{
            fsm:t="main"
            active:b=yes
          }
        }
      }

      lprfToMprf{
        stateFrom:t="lprf"
        command:t="modeSwitch"
        stateTo:t="mprf"

        actions{

          setCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
            actionTemplateName:t="setMprfStandbyMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
            actionTemplateName:t="setMprfSearchMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="setBvrLockMode"
            actionTemplateName:t="setMprfBvrLockMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="resetSearchMode"
            actionTemplateName:t="resetSearchMode"
          }

          setFsmActive{
            fsm:t="main"
            active:b=no
          }

          setFsmActive{
            fsm:t="main"
            active:b=yes
          }
        }
      }
    }
  }

  search{
    stateInit:t="search"

    transitions{

      scan{
        event:t="update"

        actions{

          scan{
          }

          setCenterAzimuth{
            source:t="constant"
            value:r=0.0
          }

          setCenterAzimuth{
            source:t="designationCue"
          }

          setCenterElevation{
            source:t="constant"
            value:r=0.0
          }

          setCenterElevation{
            source:t="designationCue"
          }
        }
      }

      detect{
        event:t="targetInSight"

        actions{

          setDistGatePos{
            source:t="continuousScale"
            width:r=0.0
          }

          setRelSpeedGatePos{
            source:t="continuousScale"
            width:r=0.0
          }

          detectTarget{
          }
        }
      }

      addTarget{
        event:t="targetDetected"

        actions{

          addTarget{
          }

          updateActiveDetectedTarget{
          }
        }
      }

      switchSelectedTarget{
        command:t="switchTarget"

        actions{

          setNextDetectedTargetActive{
          }
        }
      }

      setCueAzimuth{
        command:t="cueAxisX"

        actions{

          setCueAzimuth{
          }
        }
      }

      setCueDist{
        command:t="cueAxisY"

        actions{

          setCueDist{
          }

          setCueDopplerSpeed{
          }
        }
      }

      setCueElevation{
        command:t="cueAxisZ"

        actions{

          setCueElevation{
          }
        }
      }

      setSelectedTarget{
        command:t="switchToTarget"

        actions{

          setDetectedTargetActive{
          }
        }
      }
    }
  }

  bvrLock{
    stateInit:t="lock"

    transitions{

      scan{
        event:t="update"

        actions{

          scan{
          }
        }
      }

      detect{
        event:t="targetInSight"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }
    }
  }

  acmLock{
    stateInit:t="lock"

    transitions{

      scan{
        event:t="update"

        actions{

          scan{
          }
        }
      }

      detect{
        event:t="targetInSight"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }
    }
  }

  track{
    stateInit:t="init"

    actionsTemplates{

      setMprfTrack{

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="mprfTrack"
        }
      }

      setLprfTrack{

        setTransiver{
          transiver:t="lprf"
        }

        setSignal{
          signal:t="lprfTrack"
        }
      }

      trackPulse{

        updateActiveTargetOfInterest{

          dirFilter{
            rateLim:p2=0.78, 0.78
            limTimeOut:r=1.0
            inertialTimeMax:r=1.0
          }

          distFilter{
            accelLim:p2=150.0, 150.0
            limTimeOut:r=1.0
            inertialTimeMax:r=1.0
          }
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }
      }

      trackDoppler{

        updateActiveTargetOfInterest{

          dirFilter{
            rateLim:p2=0.78, 0.78
            limTimeOut:r=1.0
            inertialTimeMax:r=1.0
          }

          distFilter{
            accelLim:p2=150.0, 150.0
            limTimeOut:r=1.0
            inertialTimeMax:r=1.0
          }

          dopplerSpeedFilter{
            rateLim:p2=200.0, 200.0
            limTimeOut:r=1.0
            inertialTimeMax:r=1.0
          }
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }

        setRelSpeedGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }
      }

      extrapolate{

        extrapolateTargetsOfInterest{
        }

        clearTargetsOfInterest{
          timeOut:r=3.0
          dirRateLim:r=1.0
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }

        setRelSpeedGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }
      }
    }

    transitions{

      start{
        event:t="fsmActivate"
        stateTo:t="mprf"

        actions{

          setMprfTrack{
          }

          setModeName{
            name:t="PD track"
          }
        }
      }

      tryDetectMprf{
        stateFrom:t="mprfTry"
        event:t="update"

        actions{

          setMprfTrack{
          }

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }

      lprfOkTryDetectMprf{
        stateFrom:t="lprfOkMprfTry"
        event:t="update"

        actions{

          setMprfTrack{
          }

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }

          setLprfTrack{
          }
        }
      }

      tryDetectLprf{
        stateFrom:t="lprfTry"
        event:t="update"

        actions{

          setLprfTrack{
          }

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }

          setMprfTrack{
          }
        }
      }

      detect{
        stateFrom:t="mprf"
        stateFrom:t="lprf"
        event:t="update"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }

      trackMprf{
        stateFrom:t="mprf"
        event:t="targetDetected"

        actions{

          trackDoppler{
          }
        }
      }

      startTrackMprf{
        stateFrom:t="mprfTry"
        stateFrom:t="lprfOkMprfTry"
        event:t="targetDetected"
        stateTo:t="mprf"

        actions{

          setMprfTrack{
          }

          trackDoppler{
          }

          setModeName{
            name:t="PD track"
          }
        }
      }

      trackLprf{
        stateFrom:t="lprf"
        event:t="targetDetected"
        stateTo:t="lprfOkMprfTry"

        actions{

          trackPulse{
          }
        }
      }

      startTrackLprf{
        stateFrom:t="lprfTry"
        event:t="targetDetected"
        stateTo:t="lprf"

        actions{

          setLprfTrack{
          }

          trackPulse{
          }

          setModeName{
            name:t="track"
          }
        }
      }

      mprfToLprf{
        stateFrom:t="mprf"
        stateFrom:t="mprfTry"
        event:t="targetNotDetected"
        stateTo:t="lprfTry"

        actions{

          extrapolate{
          }
        }
      }

      backToLprf{
        stateFrom:t="lprfOkMprfTry"
        event:t="targetNotDetected"
        stateTo:t="lprfTry"

        actions{

          extrapolate{
          }
        }
      }

      lprfToMprf{
        stateFrom:t="lprf"
        event:t="targetNotDetected"
        stateTo:t="mprfTry"

        actions{

          extrapolate{
          }
        }
      }

      lprfTryToMprf{
        stateFrom:t="lprfTry"
        event:t="targetNotDetected"
        stateTo:t="mprfTry"

        actions{

          extrapolate{
          }

          setModeName{
            name:t="track memory"
          }
        }
      }
    }
  }
}

transivers{

  mprf{
    sideLobesAttenuation:r=-22.0
    power:r=1200.0
    band:i=8
    rcs:r=3.0
    range:r=80000.0
    rangeMax:r=104000.0
    multipathEffect:p4=0.0, 1.0, 60.0, 0.0

    antenna{

      azimuth{
        angleHalfSens:r=3.5
        sideLobesSensitivity:r=-32.0
      }

      elevation{
        angleHalfSens:r=4.8
        sideLobesSensitivity:r=-32.0
      }
    }
  }

  lprf{
    sideLobesAttenuation:r=-22.0
    power:r=1200.0
    band:i=8
    rcs:r=3.0
    range:r=80000.0
    rangeMax:r=104000.0

    antenna{

      azimuth{
        angleHalfSens:r=3.5
        sideLobesSensitivity:r=-32.0
      }

      elevation{
        angleHalfSens:r=4.8
        sideLobesSensitivity:r=-32.0
      }
    }
  }
}

scanPatterns{

  searchNarrow{
    type:t="pyramide"
    azimuthLimits:p2=-60.0, 60.0
    elevationLimits:p2=-60.0, 60.0
    rollStabLimit:r=70.0
    pitchStabLimit:r=70.0
    period:r=0.65
    width:r=10.0
    barHeight:r=3.4
    barsCount:i=2
    rowMajor:b=yes
  }

  searchMedium{
    type:t="pyramide"
    azimuthLimits:p2=-60.0, 60.0
    elevationLimits:p2=-60.0, 60.0
    rollStabLimit:r=70.0
    pitchStabLimit:r=70.0
    period:r=3.8
    width:r=30.0
    barHeight:r=3.4
    barsCount:i=4
    rowMajor:b=yes
  }

  searchWide{
    type:t="pyramide"
    azimuthLimits:p2=-60.0, 60.0
    elevationLimits:p2=-60.0, 60.0
    rollStabLimit:r=70.0
    pitchStabLimit:r=70.0
    period:r=3.8
    width:r=60.0
    barHeight:r=3.4
    barsCount:i=2
    rowMajor:b=yes
  }

  hudLock{
    type:t="pyramide"
    azimuthLimits:p2=-60.0, 60.0
    elevationLimits:p2=-60.0, 60.0
    period:r=1.0
    width:r=10.0
    barHeight:r=4.8
    barsCount:i=4
    rowMajor:b=yes
    indicate:b=yes
  }

  verticalLock{
    type:t="pyramide"
    azimuthLimits:p2=-60.0, 60.0
    elevationLimits:p2=-60.0, 60.0
    period:r=1.0
    width:r=20.0
    barHeight:r=4.8
    barsCount:i=2
    rowMajor:b=no
    centerElevation:r=15.0
    indicate:b=yes
  }

  boresightLock{
    type:t="cone"
    azimuthLimits:p2=-60.0, 60.0
    elevationLimits:p2=-60.0, 60.0
    period:r=0.3
    width:r=1.75
    centerElevation:r=-3.0
    indicate:b=yes
  }

  bvrLockSearch{
    type:t="pyramide"
    azimuthLimits:p2=-60.0, 60.0
    elevationLimits:p2=-60.0, 60.0
    rollStabLimit:r=70.0
    pitchStabLimit:r=30.0
    period:r=1.0
    width:r=10.0
    barHeight:r=3.4
    barsCount:i=4
    rowMajor:b=yes
    indicate:b=yes
  }

  track{
    type:t="no"
    azimuthLimits:p2=-60.0, 60.0
    elevationLimits:p2=-60.0, 60.0
  }
}

signals{

  lprfSearch{
    dynamicRange:p2=40.0, 15.0
    groundClutter:b=yes
    aircraftAsTarget:b=yes
    friendFoeId:b=yes

    distance{
      presents:b=yes
      minValue:r=500.0
      maxValue:r=150000.0
      width:r=200.0
    }
  }

  mprfSearch{
    groundClutter:b=no
    aircraftAsTarget:b=yes
    friendFoeId:b=yes
    mainBeamNotchWidth:r=60.0

    distance{
      presents:b=yes
      minValue:r=500.0
      maxValue:r=74000.0
      width:r=200.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=-1500.0
      maxValue:r=1500.0
      signalWidthMin:r=2.0
      width:r=30.0
    }
  }

  lprfTrack{
    dynamicRange:p2=40.0, 15.0
    groundClutter:b=yes
    aircraftAsTarget:b=yes
    angularAccuracy:r=0.05
    distanceAccuracy:r=12.0
    track:b=yes

    distance{
      presents:b=yes
      minValue:r=200.0
      maxValue:r=74000.0
      width:r=150.0
    }
  }

  mprfAcm{
    groundClutter:b=no
    aircraftAsTarget:b=yes
    angularAccuracy:r=0.05
    distanceAccuracy:r=12.0
    mainBeamNotchWidth:r=40.0

    distance{
      presents:b=yes
      minValue:r=200.0
      maxValue:r=74000.0
      width:r=150.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=-1500.0
      maxValue:r=1500.0
      signalWidthMin:r=2.0
      width:r=20.0
    }
  }

  mprfTrack{
    groundClutter:b=no
    aircraftAsTarget:b=yes
    angularAccuracy:r=0.05
    distanceAccuracy:r=12.0
    mainBeamNotchWidth:r=40.0
    mainBeamNotchMaxElevation:r=3.3
    track:b=yes

    distance{
      presents:b=yes
      minValue:r=200.0
      maxValue:r=74000.0
      width:r=150.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=-1500.0
      maxValue:r=1500.0
      signalWidthMin:r=2.0
      width:r=20.0
    }
  }
}

scanPatternSets{

  search{
    scanPattern1:t="searchMedium"
    scanPattern2:t="searchNarrow"
    scanPattern3:t="searchWide"
  }

  acmLock{
    scanPattern1:t="boresightLock"
    scanPattern2:t="verticalLock"
    scanPattern3:t="hudLock"
  }
}

scopeRangeSets{

  common{
    range1:r=37000.0
    range2:r=74000.0
    range3:r=148000.0
    range4:r=18500.0
  }

  acm{
    range1:r=18500.0
  }
}