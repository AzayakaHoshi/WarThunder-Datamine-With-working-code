type:t="radar"
name:t="Thales RBE2 AESA"
weaponTargetsMax:i=6
launchedMissilesPredictedPositionsMax:i=6
showMissileLaunchZone:b=yes
showMissileDgftLaunchZone:b=yes

transivers{

  mprf{
    sideLobesAttenuation:r=-20.0
    power:r=1200.0
    band:i=8
    rcs:r=5.0
    range:r=100000.0
    rangeMax:r=300000.0
    multipathEffect:p4=0.0, 1.0, 60.0, 0.0

    antenna{
      angleHalfSens:r=2.5
      sideLobesSensitivity:r=-35.0
    }
  }

  hprfVelocity{
    sideLobesAttenuation:r=-20.0
    power:r=600.0
    band:i=8
    rcs:r=5.0
    range:r=160000.0
    rangeMax:r=300000.0
    multipathEffect:p4=0.0, 1.0, 60.0, 0.0

    antenna{
      angleHalfSens:r=2.5
      sideLobesSensitivity:r=-35.0
    }
  }

  lprf{
    sideLobesAttenuation:r=-20.0
    power:r=600.0
    band:i=8
    rcs:r=5.0
    range:r=130000.0
    rangeMax:r=300000.0
    multipathEffect:p4=0.0, 1.0, 60.0, 0.0

    antenna{
      angleHalfSens:r=2.5
      sideLobesSensitivity:r=-35.0
    }
  }

  GTM{
    sideLobesAttenuation:r=-20.0
    power:r=600.0
    band:i=8
    rcs:r=40.0
    range:r=23700.0
    rangeMax:r=30000.0
    timeGainControl:b=yes
    multipathEffect:p4=0.0, 1.0, 60.0, 0.0

    antenna{
      angleHalfSens:r=2.5
      sideLobesSensitivity:r=-32.0
    }
  }

  irst{
    power:r=50.0
    band:i=1
    rcs:r=24000.0
    range:r=22000.0
    range1:r=10000.0
    rangeMax:r=90000.0
    visibilityType:t="infraRed"

    antenna{

      azimuth{
        angleHalfSens:r=2.0
        sideLobesSensitivity:r=-120.0
      }

      elevation{
        angleHalfSens:r=2.0
        sideLobesSensitivity:r=-120.0
      }
    }
  }
}

illuminationTransmitter{
  power:r=1200.0

  antenna{
    angleHalfSens:r=2.5
    sideLobesSensitivity:r=-35.0
  }
}

signals{

  irstSearch{
    rangeFinder:b=no
    groundClutter:b=no
    showBScope:b=no
    showCScope:b=yes
  }

  irstTrack{
    rangeFinder:b=yes
    groundClutter:b=no
    angularAccuracy:r=0.05
    distanceAccuracy:r=10.0
  }

  hprfVelocitySearch{
    rangeFinder:b=no
    dopplerSpeedFinder:b=yes
    groundClutter:b=no
    aircraftAsTarget:b=yes
    friendFoeId:b=yes
    mainBeamDopplerSpeed:b=yes

    dopplerSpeed{
      presents:b=yes
      minValue:r=40.0
      maxValue:r=1500.0
      signalWidthMin:r=2.0
      width:r=30.0
    }
  }

  mprfSearch{
    groundClutter:b=no
    aircraftAsTarget:b=yes
    friendFoeId:b=yes
    mainBeamNotchWidth:r=60.0

    distance{
      presents:b=yes
      minValue:r=500.0
      maxValue:r=74000.0
      width:r=500.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=-1500.0
      maxValue:r=1500.0
      signalWidthMin:r=2.0
      width:r=30.0
    }
  }

  mprfTrack{
    groundClutter:b=no
    aircraftAsTarget:b=yes
    angularAccuracy:r=0.05
    distanceAccuracy:r=15.0
    mainBeamNotchWidth:r=40.0
    mainBeamNotchMaxElevation:r=4.0
    track:b=yes

    distance{
      presents:b=yes
      minValue:r=200.0
      maxValue:r=74000.0
      width:r=150.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=-1500.0
      maxValue:r=1500.0
      signalWidthMin:r=2.0
      width:r=20.0
    }
  }

  mprfAcm{
    groundClutter:b=no
    aircraftAsTarget:b=yes
    angularAccuracy:r=0.05
    distanceAccuracy:r=15.0
    mainBeamNotchWidth:r=40.0

    distance{
      presents:b=yes
      minValue:r=200.0
      maxValue:r=74000.0
      width:r=150.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=-1500.0
      maxValue:r=1500.0
      signalWidthMin:r=2.0
      width:r=20.0
    }
  }

  lprfSearch{
    dynamicRange:p2=40.0, 15.0
    groundClutter:b=yes
    aircraftAsTarget:b=yes
    friendFoeId:b=yes

    distance{
      presents:b=yes
      minValue:r=500.0
      maxValue:r=150000.0
      width:r=200.0
    }
  }

  lprfTrack{
    dynamicRange:p2=40.0, 15.0
    groundClutter:b=yes
    aircraftAsTarget:b=yes
    angularAccuracy:r=0.05
    distanceAccuracy:r=12.0
    track:b=yes

    distance{
      presents:b=yes
      minValue:r=200.0
      maxValue:r=74000.0
      width:r=150.0
    }
  }

  surfaceSearch{
    groundClutter:b=no
    aircraftAsTarget:b=no
    groundVehiclesAsTarget:b=yes
    angularAccuracy:r=0.0
    distanceAccuracy:r=1.0
    absDopplerSpeed:b=yes
    mainBeamDopplerSpeed:b=yes

    distance{
      presents:b=yes
      minValue:r=500.0
      maxValue:r=30000.0
      width:r=15.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=2.5
      maxValue:r=1000.0
      signalWidthMin:r=2.5
      width:r=0.0
    }
  }

  surfaceTrack{
    groundClutter:b=no
    aircraftAsTarget:b=no
    groundVehiclesAsTarget:b=yes
    angularAccuracy:r=0.0
    distanceAccuracy:r=1.0
    absDopplerSpeed:b=yes
    mainBeamDopplerSpeed:b=yes
    track:b=yes

    distance{
      presents:b=yes
      minValue:r=500.0
      maxValue:r=30000.0
      width:r=15.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=1.5
      maxValue:r=1000.0
      signalWidthMin:r=2.5
      width:r=0.0
    }
  }

  hmdLock{
    groundClutter:b=no
    aircraftAsTarget:b=yes
    angularAccuracy:r=0.05
    distanceAccuracy:r=15.0
    mainBeamNotchWidth:r=40.0

    distance{
      presents:b=yes
      minValue:r=250.0
      maxValue:r=20000.0
      width:r=250.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=-900.0
      maxValue:r=900.0
      signalWidthMin:r=2.0
      width:r=24.0
    }
  }
}

scopeRangeSets{

  common{
    range1:r=37000.0
    range2:r=74000.0
    range3:r=148000.0
    range4:r=185000.0
  }

  acm{
    range1:r=18500.0
  }

  hmd{
    range1:r=18500.0
  }
}

scanPatterns{

  searchNarrow{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-70.0, 70.0
    rollStabLimit:r=90.0
    pitchStabLimit:r=70.0
    period:r=1.698
    width:r=15.0
    barHeight:r=2.25
    barsCount:i=7
    rowMajor:b=yes
  }

  searchMedium{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-70.0, 70.0
    rollStabLimit:r=90.0
    pitchStabLimit:r=70.0
    period:r=3.9619
    width:r=35.0
    barHeight:r=2.25
    barsCount:i=7
    rowMajor:b=yes
  }

  searchWide{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-70.0, 70.0
    rollStabLimit:r=90.0
    pitchStabLimit:r=70.0
    period:r=7.9238
    width:r=35.0
    barHeight:r=2.25
    barsCount:i=14
    rowMajor:b=yes
  }

  twsNarrow{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-70.0, 70.0
    rollStabLimit:r=90.0
    pitchStabLimit:r=70.0
    period:r=1.698
    width:r=15.0
    barHeight:r=2.25
    barsCount:i=7
    rowMajor:b=yes
    preciseMinor:b=yes
    tws:b=yes
  }

  twsMedium{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-70.0, 70.0
    rollStabLimit:r=90.0
    pitchStabLimit:r=70.0
    period:r=3.9619
    width:r=35.0
    barHeight:r=2.25
    barsCount:i=7
    rowMajor:b=yes
    preciseMinor:b=yes
    tws:b=yes
  }

  twsWide{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-70.0, 70.0
    rollStabLimit:r=90.0
    pitchStabLimit:r=70.0
    period:r=7.9238
    width:r=35.0
    barHeight:r=2.25
    barsCount:i=14
    rowMajor:b=yes
    preciseMinor:b=yes
    tws:b=yes
  }

  superScan{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-70.0, 70.0
    period:r=1.75
    width:r=25.0
    barHeight:r=3.3
    barsCount:i=3
    rowMajor:b=no
    centerElevation:r=20.0
    indicate:b=yes
  }

  cas20{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-70.0, 70.0
    period:r=1.4
    width:r=15.0
    barHeight:r=2.5
    barsCount:i=4
    rowMajor:b=no
    indicate:b=yes
  }

  boresightLock{
    type:t="cone"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-70.0, 70.0
    period:r=0.5
    width:r=1.25
    indicate:b=yes
  }

  bvrLockTws{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-70.0, 70.0
    rollStabLimit:r=90.0
    pitchStabLimit:r=70.0
    period:r=0.5
    width:r=2.0
    barHeight:r=2.0
    barsCount:i=2
    rowMajor:b=no
    indicate:b=yes
  }

  bvrLockSearch{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-70.0, 70.0
    rollStabLimit:r=90.0
    pitchStabLimit:r=70.0
    period:r=0.5
    width:r=2.5
    barHeight:r=2.25
    barsCount:i=4
    rowMajor:b=no
    indicate:b=yes
  }

  radarTrack{
    type:t="no"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-70.0, 70.0
  }

  radarHmdLock{
    type:t="pyramide"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-70.0, 70.0
    period:r=0.2
    width:r=0.75
    barHeight:r=1.5
    barsCount:i=2
    rowMajor:b=yes
    indicate:b=yes
    hmd:b=yes
  }

  radarHmdTrack{
    type:t="no"
    azimuthLimits:p2=-70.0, 70.0
    elevationLimits:p2=-70.0, 70.0
    hmd:b=yes
  }

  irstSearchWide{
    type:t="pyramide"
    azimuthLimits:p2=-90.0, 90.0
    elevationLimits:p2=-20.0, 60.0
    period:r=2.5
    width:r=20.0
    barHeight:r=4.0
    barsCount:i=16
    rowMajor:b=no
    isSmoothMajor:b=yes
    barsOneWay:b=no
    rollStabLimit:r=90.0
    pitchStabLimit:r=60.0
  }

  irstSearchNarrow{
    type:t="pyramide"
    azimuthLimits:p2=-90.0, 90.0
    elevationLimits:p2=-20.0, 60.0
    period:r=1.25
    width:r=20.0
    barHeight:r=3.75
    barsCount:i=8
    rowMajor:b=no
    isSmoothMajor:b=yes
    barsOneWay:b=no
    rollStabLimit:r=90.0
    pitchStabLimit:r=60.0
  }

  irstBvrLock{
    type:t="pyramide"
    azimuthLimits:p2=-90.0, 90.0
    elevationLimits:p2=-20.0, 60.0
    period:r=1.0
    width:r=15.0
    barHeight:r=4.0
    barsCount:i=1
    rowMajor:b=no
    indicate:b=yes
    rollStabLimit:r=90.0
    pitchStabLimit:r=60.0
  }

  irstVerticalLock{
    type:t="pyramide"
    azimuthLimits:p2=-90.0, 90.0
    elevationLimits:p2=-20.0, 60.0
    period:r=0.3
    width:r=15.0
    barHeight:r=4.0
    barsCount:i=1
    rowMajor:b=no
    centerElevation:r=1.0
    indicate:b=yes
  }

  irstHmdLock{
    type:t="pyramide"
    type:t="pyramide"
    azimuthLimits:p2=-90.0, 90.0
    elevationLimits:p2=-20.0, 60.0
    period:r=0.2
    width:r=2.0
    barHeight:r=0.3
    barsCount:i=13
    rowMajor:b=yes
    centerElevation:r=1.0
    indicate:b=yes
    hmd:b=yes
  }

  irstTrack{
    type:t="no"
    azimuthLimits:p2=-90.0, 90.0
    elevationLimits:p2=-20.0, 60.0
  }

  irstHmdTrack{
    type:t="no"
    azimuthLimits:p2=-90.0, 90.0
    elevationLimits:p2=-20.0, 60.0
    hmd:b=yes
  }
}

scanPatternSets{

  radarSearch{
    scanPattern1:t="searchMedium"
    scanPattern2:t="searchNarrow"
    scanPattern3:t="searchWide"
  }

  radarTws{
    scanPattern1:t="twsMedium"
    scanPattern2:t="twsNarrow"
    scanPattern3:t="twsWide"
  }

  irstSearch{
    scanPattern1:t="irstSearchWide"
    scanPattern1:t="irstSearchNarrow"
  }

  irstAcmLock{
    scanPattern1:t="irstVerticalLock"
  }

  radarAcmLock{
    scanPattern1:t="boresightLock"
    scanPattern2:t="superScan"
    scanPattern3:t="cas20"
  }

  hmdLock{
    scanPattern1:t="radarHmdLock"
  }
}

fsms{

  main{
    stateInit:t="init"

    actionsTemplates{

      init{

        setEnabled{
          value:b=no
        }

        setTargetDesignationRange{
        }

        setFsmActive{
          fsm:t="sensorTypes"
          active:b=yes
        }
      }

      setStandbySearchModeCommon{

        setCenterAzimuth{
          source:t="constant"
          value:r=0.0
        }

        setCenterElevation{
          source:t="constant"
          value:r=0.0
        }

        setScopeRangeSet{
          scopeRangeSet:t="common"
        }
      }

      setStandbyModeCommon{

        setStandbySearchModeCommon{
        }

        setEnabled{
          value:b=no
        }
      }

      resetStandbyMode{
      }

      resetSearchMode{

        clearTargets{
        }

        setFsmActive{
          fsm:t="search"
          active:b=no
        }

        setCueEnabled{
          value:b=no
        }
      }

      setBvrLockModeCommon{

        setEnabled{
          value:b=yes
        }

        setScanPatternSet{
        }

        resetScanPhase{
        }
      }

      setBvrLockMode{

        setBvrLockModeCommon{
        }

        setCenterAzimuth{
          source:t="targetDesignation"
        }
      }

      designatedTargetSearch{

        designateTargetUnderCue{
          type:i=0
          self:b=yes
          sensorIndex:i=0
        }

        designateActiveDetectedTarget{
          type:i=0
          self:b=yes
          sensorIndex:i=0
        }
      }

      setTrackMode{

        setEnabled{
          value:b=yes
        }

        setScanPatternSet{
        }

        addTargetOfInterest{
        }

        setLastTargetOfInterestActive{
        }

        updateActiveTargetOfInterest{
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }

        setRelSpeedGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }
      }

      resetTrackMode{

        clearTargetsOfInterest{
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=no
        }
      }

      setAcmLockMode{

        setEnabled{
          value:b=yes
        }

        resetScanPhase{
        }

        setCenterAzimuth{
          source:t="constant"
          value:r=0.0
        }

        setCenterElevation{
          source:t="constant"
          value:r=0.0
        }

        setFsmActive{
          fsm:t="lock"
          active:b=yes
        }

        setScopeRangeSet{
          scopeRangeSet:t="acm"
        }
      }

      resetAcmLockMode{

        setFsmActive{
          fsm:t="lock"
          active:b=no
        }
      }

      resetRadarStandbyMode{

        resetStandbyMode{
        }

        setFsmActive{
          fsm:t="radarSearchModes"
          active:b=no
        }
      }

      resetIrstStandbyMode{

        resetStandbyMode{
        }

        setFsmActive{
          fsm:t="irstSearchModes"
          active:b=no
        }
      }

      resetRadarSearchMode{

        resetSearchMode{
        }

        setFsmActive{
          fsm:t="radarSearchModes"
          active:b=no
        }
      }

      resetIrstSearchMode{

        resetSearchMode{
        }

        setFsmActive{
          fsm:t="irstSearchModes"
          active:b=no
        }
      }

      setSearchStandbyModeCommon{

        setStandbyModeCommon{
        }
      }

      setTwsStandbyModeCommon{

        setStandbyModeCommon{
        }
      }

      setSearchModeCommon{

        setStandbySearchModeCommon{
        }

        setEnabled{
          value:b=yes
        }

        setCueEnabled{
          value:b=yes
          updateActiveTargetUnderCue:b=no
        }

        setFsmActive{
          fsm:t="search"
          active:b=yes
        }
      }

      setTwsSearchModeCommon{

        setStandbySearchModeCommon{
        }

        setEnabled{
          value:b=yes
        }

        setCueEnabled{
          value:b=yes
          updateActiveTargetUnderCue:b=yes
        }

        setScanPatternSet{
          scanPatternSet:t="radarTws"
        }

        setFsmActive{
          fsm:t="tws"
          active:b=yes
        }

        setFsmActive{
          fsm:t="radarSearchModes"
          active:b=yes
        }
      }

      resetTwsMode{

        clearTargets{
        }

        clearTargetsOfInterest{
        }

        setFsmActive{
          fsm:t="tws"
          active:b=no
        }

        setFsmActive{
          fsm:t="radarSearchModes"
          active:b=no
        }

        setCueEnabled{
          value:b=no
        }
      }

      designatedTargetTws{

        designateActiveDetectedTarget{
          type:i=0
          self:b=yes
          sensorIndex:i=0
        }
      }

      setRadarSearchStandbyModeCommon{

        setSearchStandbyModeCommon{
        }

        setScanPatternSet{
          scanPatternSet:t="radarSearch"
        }

        setFsmActive{
          fsm:t="radarSearchModes"
          active:b=yes
        }
      }

      setIrstSearchStandbyModeCommon{

        setSearchStandbyModeCommon{
        }

        setScanPatternSet{
          scanPatternSet:t="irstSearch"
        }

        setFsmActive{
          fsm:t="irstSearchModes"
          active:b=yes
        }
      }

      setRadarTwsStandbyModeCommon{

        setTwsStandbyModeCommon{
        }

        setScanPatternSet{
          scanPatternSet:t="radarTws"
        }

        setFsmActive{
          fsm:t="radarSearchModes"
          active:b=yes
        }
      }

      setMprfStandbyMode{

        setRadarSearchStandbyModeCommon{
        }

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="mprfSearch"
        }

        setModeName{
          name:t="PD standby"
        }
      }

      setHprfVelocityStandbyMode{

        setRadarSearchStandbyModeCommon{
        }

        setTransiver{
          transiver:t="hprfVelocity"
        }

        setSignal{
          signal:t="hprfVelocitySearch"
        }

        setModeName{
          name:t="PD HDN VS standby"
        }
      }

      setMprfTwsStandbyMode{

        setRadarTwsStandbyModeCommon{
        }

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="mprfSearch"
        }

        setModeName{
          name:t="TWS standby"
        }
      }

      setLprfStandbyMode{

        setRadarSearchStandbyModeCommon{
        }

        setTransiver{
          transiver:t="lprf"
        }

        setSignal{
          signal:t="lprfSearch"
        }

        setModeName{
          name:t="standby"
        }
      }

      setLprfSearchMode{

        setRadarSearchStandbyModeCommon{
        }

        setTransiver{
          transiver:t="lprf"
        }

        setSignal{
          signal:t="lprfSearch"
        }

        setModeName{
          name:t="search"
        }
      }

      setIrstStandbyMode{

        setIrstSearchStandbyModeCommon{
        }

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irstSearch"
        }

        setModeName{
          name:t="IRST standby"
        }
      }

      setRadarSearchModeCommon{

        setSearchModeCommon{
        }

        setScanPatternSet{
          scanPatternSet:t="radarSearch"
        }

        setFsmActive{
          fsm:t="radarSearchModes"
          active:b=yes
        }
      }

      setIrstSearchModeCommon{

        setSearchModeCommon{
        }

        setScanPatternSet{
          scanPatternSet:t="irstSearch"
        }

        setFsmActive{
          fsm:t="irstSearchModes"
          active:b=yes
        }
      }

      setMprfSearchMode{

        setRadarSearchModeCommon{
        }

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="mprfSearch"
        }

        setModeName{
          name:t="PD search"
        }
      }

      setHprfVelocitySearchMode{

        setRadarSearchModeCommon{
        }

        setTransiver{
          transiver:t="hprfVelocity"
        }

        setSignal{
          signal:t="hprfVelocitySearch"
        }

        setModeName{
          name:t="PD HDN VS search"
        }
      }

      setMprfTwsSearchMode{

        setTwsSearchModeCommon{
        }

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="mprfSearch"
        }

        setModeName{
          name:t="TWS search"
        }
      }

      setIrstSearchMode{

        setIrstSearchModeCommon{
        }

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irstSearch"
        }

        setModeName{
          name:t="IRST search"
        }
      }

      setRadarBvrLockMode{

        setBvrLockMode{
        }

        setFsmActive{
          fsm:t="radarBvrLock"
          active:b=yes
        }

        setDistGatePos{
          source:t="targetDesignation"
          width:r=2000.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=1800.0
        }

        setScanPattern{
          scanPattern:t="bvrLockSearch"
        }
      }

      setLprfBvrLockMode{

        setRadarBvrLockMode{
        }

        setModeName{
          name:t="acquisition"
        }
      }

      resetRadarBvrLockMode{

        setFsmActive{
          fsm:t="radarBvrLock"
          active:b=no
        }
      }

      setMprfBvrLockMode{

        setRadarBvrLockMode{
        }

        setModeName{
          name:t="PD acquisition"
        }
      }

      setHprfBvrLockMode{

        setRadarBvrLockMode{
        }

        setModeName{
          name:t="PD HDN acquisition"
        }
      }

      setIrstBvrLockMode{

        setBvrLockMode{
        }

        setFsmActive{
          fsm:t="lock"
          active:b=yes
        }

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irstTrack"
        }

        setDistGatePos{
          source:t="targetDesignation"
          pos:r=15000.0
          width:r=30000.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=1800.0
        }

        setScanPattern{
          scanPattern:t="irstBvrLock"
        }

        setModeName{
          name:t="IRST acquisition"
        }
      }

      setRadarAcmLockMode{

        setScanPatternSet{
          scanPatternSet:t="radarAcmLock"
        }

        setAcmLockMode{
        }

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="mprfAcm"
        }

        setDistGatePos{
          source:t="constRange"
          pos:r=9250.0
          width:r=18500.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=3000.0
        }

        setModeName{
          name:t="PD ACM"
        }
      }

      setIrstAcmLockMode{

        setScanPatternSet{
          scanPatternSet:t="irstAcmLock"
        }

        setAcmLockMode{
        }

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irstTrack"
        }

        setDistGatePos{
          source:t="constRange"
          pos:r=15000.0
          width:r=30000.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=1800.0
        }

        setModeName{
          name:t="IRST ACM"
        }
      }

      resetLockMode{

        setFsmActive{
          fsm:t="lock"
          active:b=no
        }
      }

      setRadarBvrTrackMode{

        setTrackMode{
        }

        setScanPattern{
          scanPattern:t="radarTrack"
        }

        setFsmActive{
          fsm:t="radarBvrTrack"
          active:b=yes
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=yes
        }
      }

      resetRadarBvrTrackMode{

        resetTrackMode{
        }

        setFsmActive{
          fsm:t="radarBvrTrack"
          active:b=no
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=no
        }
      }

      updateRadarBvrTrackMode{

        setScanPattern{
          scanPattern:t="radarTrack"
        }

        setFsmActive{
          fsm:t="irstTrack"
          active:b=no
        }

        setFsmActive{
          fsm:t="radarBvrTrack"
          active:b=yes
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=yes
        }
      }

      setRadarAcmTrackModeCommon{

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="mprfTrack"
        }

        setScanPattern{
          scanPattern:t="radarTrack"
        }

        setModeName{
          name:t="PD track"
        }
      }

      updateRadarAcmTrackMode{

        setRadarAcmTrackModeCommon{
        }

        setFsmActive{
          fsm:t="irstTrack"
          active:b=no
        }

        setFsmActive{
          fsm:t="radarAcmHmdTrack"
          active:b=yes
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=yes
        }
      }

      setRadarAcmTrackMode{

        setTrackMode{
        }

        setRadarAcmTrackModeCommon{
        }

        setFsmActive{
          fsm:t="radarAcmHmdTrack"
          active:b=yes
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=yes
        }
      }

      resetRadarAcmHmdTrackMode{

        resetTrackMode{
        }

        setFsmActive{
          fsm:t="radarAcmHmdTrack"
          active:b=no
        }
      }

      setIrstTrackModeCommon{

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irstTrack"
        }

        setScanPattern{
          scanPattern:t="irstTrack"
        }

        setModeName{
          name:t="IRST track"
        }
      }

      updateIrstBvrTrackMode{

        setIrstTrackModeCommon{
        }

        setFsmActive{
          fsm:t="radarBvrTrack"
          active:b=no
        }

        setFsmActive{
          fsm:t="irstTrack"
          active:b=yes
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=no
        }
      }

      updateIrstAcmTrackMode{

        setIrstTrackModeCommon{
        }

        setFsmActive{
          fsm:t="radarAcmHmdTrack"
          active:b=no
        }

        setFsmActive{
          fsm:t="irstTrack"
          active:b=yes
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=no
        }
      }

      setIrstTrackMode{

        setTrackMode{
        }

        setIrstTrackModeCommon{
        }

        setFsmActive{
          fsm:t="irstTrack"
          active:b=yes
        }
      }

      resetIrstTrackMode{

        resetTrackMode{
        }

        setFsmActive{
          fsm:t="irstTrack"
          active:b=no
        }
      }

      setHmdStandbyMode{

        setEnabled{
          value:b=no
        }

        clearTargetsOfInterest{
        }

        setScanPatternSet{
        }

        resetScanPhase{
        }

        setFsmActive{
          fsm:t="helmetDesignation"
          active:b=yes
        }

        setScopeRangeSet{
          scopeRangeSet:t="hmd"
        }
      }

      resetHmdStandbyMode{

        resetStandbyMode{
        }

        setFsmActive{
          fsm:t="helmetDesignation"
          active:b=no
        }
      }

      setHmdLockMode{

        setEnabled{
          value:b=yes
        }

        clearTargetsOfInterest{
        }

        setScanPatternSet{
        }

        resetScanPhase{
        }

        setFsmActive{
          fsm:t="lock"
          active:b=yes
        }

        setFsmActive{
          fsm:t="helmetDesignation"
          active:b=yes
        }

        setScopeRangeSet{
          scopeRangeSet:t="hmd"
        }
      }

      resetHmdLockMode{

        resetAcmLockMode{
        }

        setFsmActive{
          fsm:t="helmetDesignation"
          active:b=no
        }
      }

      setHmdTrackMode{

        setTrackMode{
        }
      }

      resetHmdTrackMode{

        resetTrackMode{
        }
      }

      setRadarHmdCommon{

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="hmdLock"
        }
      }

      setRadarHmdLockCommon{

        setRadarHmdCommon{
        }

        setScanPattern{
          scanPattern:t="radarHmdLock"
        }
      }

      setIrstHmdCommon{

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irstTrack"
        }
      }

      setIrstHmdLockCommon{

        setIrstHmdCommon{
        }

        setScanPattern{
          scanPattern:t="irstHmdLock"
        }
      }

      setRadarHmdStandbyMode{

        setHmdStandbyMode{
        }

        setRadarHmdLockCommon{
        }

        setDistGatePos{
          source:t="constRange"
          pos:r=9250.0
          width:r=18500.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=3000.0
        }

        setModeName{
          name:t="PD HMD"
        }
      }

      setIrstHmdStandbyMode{

        setHmdStandbyMode{
        }

        setIrstHmdLockCommon{
        }

        setDistGatePos{
          source:t="constRange"
          pos:r=15000.0
          width:r=30000.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=1800.0
        }

        setModeName{
          name:t="IRST HMD"
        }
      }

      setRadarHmdLockMode{

        setHmdLockMode{
        }

        setRadarHmdLockCommon{
        }

        setDistGatePos{
          source:t="constRange"
          pos:r=9250.0
          width:r=18500.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=3000.0
        }

        setModeName{
          name:t="PD HMD"
        }
      }

      setIrstHmdLockMode{

        setHmdLockMode{
        }

        setIrstHmdLockCommon{
        }

        setDistGatePos{
          source:t="constRange"
          pos:r=15000.0
          width:r=30000.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=1800.0
        }

        setModeName{
          name:t="IRST HMD"
        }
      }

      setRadarHmdTrackMode{

        setHmdTrackMode{
        }

        setRadarHmdCommon{
        }

        setScanPattern{
          scanPattern:t="radarHmdTrack"
        }

        setFsmActive{
          fsm:t="radarAcmHmdTrack"
          active:b=yes
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=yes
        }

        setModeName{
          name:t="PD track"
        }
      }

      setIrstHmdTrackMode{

        setHmdTrackMode{
        }

        setIrstHmdCommon{
        }

        setScanPattern{
          scanPattern:t="irstHmdTrack"
        }

        setFsmActive{
          fsm:t="irstTrack"
          active:b=yes
        }

        setModeName{
          name:t="IRST track"
        }
      }
    }

    transitions{

      init{
        stateFrom:t="init"
        event:t="init"
        stateTo:t="standby"

        actions{

          init{
          }
        }
      }

      standbyToSearch{
        stateFrom:t="standby"
        command:t="switch"
        event:t="enable"
        stateTo:t="search"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetStandbyMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      searchToStandby{
        stateFrom:t="search"
        command:t="switch"
        event:t="disable"
        stateTo:t="standby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetSearchMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      bvrLock{
        stateFrom:t="search"
        command:t="selectTarget"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="designateTarget"
          }
        }
      }

      checkDesignationType0{
        stateFrom:t="search"
        command:t="designateTarget"
        stateTo:t="checkDesignationType0"

        actions{

          checkDesignationTypeEquals{
            value:i=0
          }
        }
      }

      bvrLockResponce{
        stateFrom:t="checkDesignationType0"
        event:t="designationTypeEquals"
        stateTo:t="bvrLock"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetSearchMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setBvrLockMode"
          }
        }
      }

      returnToSearchMode{
        stateFrom:t="checkDesignationType0"
        event:t="designationTypeNotEquals"
        stateTo:t="search"
      }

      bvrLockToBvrTrack{
        stateFrom:t="bvrLock"
        event:t="targetDetected"
        stateTo:t="bvrTrack"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetBvrLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setBvrTrackMode"
          }
        }
      }

      failedBvrLock{
        stateFrom:t="bvrLock"
        event:t="scanFinished"
        stateTo:t="search"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetBvrLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      finishedBvrTrack{
        stateFrom:t="bvrTrack"
        event:t="targetsOfInterestCleanup"
        command:t="selectTarget"
        command:t="switch"
        stateTo:t="search"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetBvrTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      finishBvrTrackAndSwitchOff{
        stateFrom:t="bvrTrack"
        event:t="disable"
        stateTo:t="standby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetBvrTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      updateStandbyMode{
        stateFrom:t="standby"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetStandbyMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      updateSearchMode{
        stateFrom:t="search"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetSearchMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      switchScanPattern{
        stateFrom:t="standby"
        stateFrom:t="search"
        stateFrom:t="acmLock"
        command:t="scanPatternSwitch"

        actions{

          setNextScanPattern{
          }
        }
      }

      switchScopeRange{
        command:t="rangeSwitch"

        actions{

          setNextScopeRange{
          }
        }
      }

      searchToAcmLock{
        stateFrom:t="search"
        command:t="acmSwitch"
        stateTo:t="acmLock"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetSearchMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setAcmLockMode"
          }
        }
      }

      acmLockToAcmTrack{
        stateFrom:t="acmLock"
        event:t="targetDetected"
        stateTo:t="acmTrack"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setAcmTrackMode"
          }
        }
      }

      acmLockToStandby{
        stateFrom:t="acmLock"
        command:t="selectTarget"
        event:t="disable"
        stateTo:t="standby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      acmTrackToAcmLock{
        stateFrom:t="acmTrack"
        event:t="targetsOfInterestCleanup"
        stateTo:t="acmLock"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setAcmLockMode"
          }
        }
      }

      acmTrackToStandby{
        stateFrom:t="acmTrack"
        command:t="selectTarget"
        event:t="disable"
        stateTo:t="standby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      acmTrackToSearch{
        stateFrom:t="acmTrack"
        command:t="acmSwitch"
        command:t="switch"
        stateTo:t="search"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      standbyToAcmLock{
        stateFrom:t="standby"
        command:t="acmSwitch"
        stateTo:t="acmLock"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetStandbyMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setAcmLockMode"
          }
        }
      }

      standbyToHmdStandby{
        stateFrom:t="standby"
        command:t="selectTarget"
        stateTo:t="hmdLock"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetStandbyMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setHmdLockMode"
          }
        }
      }

      acmLockToHmdStandby{
        stateFrom:t="acmLock"
        command:t="acmSwitch"
        stateTo:t="hmdStandby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setHmdStandbyMode"
          }
        }
      }

      hmdStandbyToSearch{
        stateFrom:t="hmdStandby"
        command:t="acmSwitch"
        stateTo:t="search"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdStandbyMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      hmdStandbyToHmdLock{
        stateFrom:t="hmdStandby"
        command:t="selectTarget"
        stateTo:t="hmdLock"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdStandbyMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setHmdLockMode"
          }
        }
      }

      hmdLockToHmdTrack{
        stateFrom:t="hmdLock"
        event:t="targetDetected"
        stateTo:t="hmdTrack"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setHmdTrackMode"
          }
        }
      }

      hmdLockToHmdStandby{
        stateFrom:t="hmdLock"
        event:t="scanFinished"
        stateTo:t="hmdStandby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setHmdStandbyMode"
          }
        }
      }

      hmdTrackToHmdStandby{
        stateFrom:t="hmdTrack"
        event:t="targetsOfInterestCleanup"
        command:t="selectTarget"
        command:t="switch"
        stateTo:t="hmdStandby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setHmdStandbyMode"
          }
        }
      }

      hmdTrackToStandby{
        stateFrom:t="hmdTrack"
        event:t="disable"
        stateTo:t="standby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      updateBvrTrackMode{
        stateFrom:t="bvrTrack"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="updateBvrTrackMode"
          }
        }
      }

      updateAcmLockMode{
        stateFrom:t="acmLock"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setAcmLockMode"
          }
        }
      }

      updateAcmTrackMode{
        stateFrom:t="acmTrack"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="updateAcmTrackMode"
          }
        }
      }

      updateHmdStandbyMode{
        stateFrom:t="hmdStandby"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setHmdStandbyMode"
          }
        }
      }

      updateHmdTrackMode{
        stateFrom:t="hmdTrack"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="updateHmdTrackMode"
          }
        }
      }
    }
  }

  sensorTypes{
    stateInit:t="init"

    actionsTemplates{

      initRadarLockTrack{

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrLockMode"
          actionTemplateName:t="resetRadarBvrLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrTrackMode"
          actionTemplateName:t="setRadarBvrTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrTrackMode"
          actionTemplateName:t="resetRadarBvrTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="updateBvrTrackMode"
          actionTemplateName:t="updateRadarBvrTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setAcmLockMode"
          actionTemplateName:t="setRadarAcmLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setAcmTrackMode"
          actionTemplateName:t="setRadarAcmTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetAcmTrackMode"
          actionTemplateName:t="resetRadarAcmHmdTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="updateAcmTrackMode"
          actionTemplateName:t="updateRadarAcmTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setHmdStandbyMode"
          actionTemplateName:t="setRadarHmdStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setHmdLockMode"
          actionTemplateName:t="setRadarHmdLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setHmdTrackMode"
          actionTemplateName:t="setRadarHmdTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetHmdTrackMode"
          actionTemplateName:t="resetRadarAcmHmdTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="updateHmdTrackMode"
          actionTemplateName:t="updateRadarAcmTrackMode"
        }
      }

      initRadarStandby{

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetStandbyMode"
          actionTemplateName:t="resetRadarStandbyMode"
        }
      }

      initRadar{

        initRadarStandby{
        }

        initRadarLockTrack{
        }
      }

      setRadar{

        initRadarLockTrack{
        }

        doCustomActionTemplate{
          fsm:t="radarSearchModes"
          name:t="restore"
        }

        initRadarStandby{
        }
      }

      setIrst{

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrLockMode"
          actionTemplateName:t="setIrstBvrLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrLockMode"
          actionTemplateName:t="resetLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrTrackMode"
          actionTemplateName:t="setIrstTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrTrackMode"
          actionTemplateName:t="resetIrstTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="updateBvrTrackMode"
          actionTemplateName:t="updateIrstBvrTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setAcmLockMode"
          actionTemplateName:t="setIrstAcmLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setAcmTrackMode"
          actionTemplateName:t="setIrstTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetAcmTrackMode"
          actionTemplateName:t="resetIrstTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="updateAcmTrackMode"
          actionTemplateName:t="updateIrstAcmTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setHmdStandbyMode"
          actionTemplateName:t="setIrstHmdStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setHmdLockMode"
          actionTemplateName:t="setIrstHmdLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setHmdTrackMode"
          actionTemplateName:t="setIrstHmdTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetHmdTrackMode"
          actionTemplateName:t="resetIrstTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="updateHmdTrackMode"
          actionTemplateName:t="updateIrstAcmTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetStandbyMode"
          actionTemplateName:t="resetIrstStandbyMode"
        }

        doCustomActionTemplate{
          fsm:t="irstSearchModes"
          name:t="restore"
        }
      }
    }

    transitions{

      initToRadar{
        stateFrom:t="init"
        event:t="fsmActivate"
        stateTo:t="radar"

        actions{

          setCustomActionTemplate{
            fsm:t="main"
            name:t="resetAcmLockMode"
            actionTemplateName:t="resetAcmLockMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdStandbyMode"
            actionTemplateName:t="resetHmdStandbyMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdLockMode"
            actionTemplateName:t="resetHmdLockMode"
          }

          setCustomActionTemplate{
            fsm:t="main"
            name:t="resetHmdTrackMode"
            actionTemplateName:t="resetHmdTrackMode"
          }

          setFsmActive{
            fsm:t="irstSearchModes"
            active:b=yes
          }

          setFsmActive{
            fsm:t="irstSearchModes"
            active:b=no
          }

          setFsmActive{
            fsm:t="radarSearchModes"
            active:b=yes
          }

          initRadar{
          }
        }
      }

      radarToIrst{
        stateFrom:t="radar"
        command:t="typeSwitch"
        stateTo:t="irst"

        actions{

          setIrst{
          }
        }
      }

      irstToRadar{
        stateFrom:t="irst"
        command:t="typeSwitch"
        stateTo:t="radar"

        actions{

          setRadar{
          }
        }
      }
    }
  }

  radarSearchModes{
    stateInit:t="init"

    actionsTemplates{

      setMprfTargetDesignationRange{

        setTargetDesignationRange{
          azimuthRange:p2=-70.0, 70.0
          azmithWidth:r=1.5
          elevationRange:p2=-60.0, 60.0
          distanceRange:p2=0.0, 92500.0
          distanceWidth:r=2000.0
          distanceRelWidthMin:r=0.05
          dopplerSpeedRange:p2=-1500.0, 1500.0
          dopplerSpeedWidth:r=60.0
          dopplerSpeedRelWidthMin:r=0.05
        }
      }

      setHprfTargetDesignationRange{

        setTargetDesignationRange{
          azimuthRange:p2=-70.0, 70.0
          azmithWidth:r=1.5
          elevationRange:p2=-60.0, 60.0
          distanceRange:p2=0.0, 92500.0
          distanceWidth:r=2000.0
          distanceRelWidthMin:r=0.05
          dopplerSpeedRange:p2=-1500.0, 1500.0
          dopplerSpeedWidth:r=60.0
          dopplerSpeedRelWidthMin:r=0.05
        }
      }

      initMprf{

        setMprfTargetDesignationRange{
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setStandbyMode"
          actionTemplateName:t="setMprfStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setSearchMode"
          actionTemplateName:t="setMprfSearchMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="designateTarget"
          actionTemplateName:t="designatedTargetSearch"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
          actionTemplateName:t="resetRadarSearchMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrLockMode"
          actionTemplateName:t="setMprfBvrLockMode"
        }
      }

      setMprf{

        setMprfTargetDesignationRange{
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setStandbyMode"
          actionTemplateName:t="setMprfStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setSearchMode"
          actionTemplateName:t="setMprfSearchMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="designateTarget"
          actionTemplateName:t="designatedTargetSearch"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrLockMode"
          actionTemplateName:t="setMprfBvrLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
          actionTemplateName:t="resetRadarSearchMode"
        }

        doCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
        }

        clearTargets{
        }

        setFsmActive{
          fsm:t="main"
          active:b=no
        }

        setFsmActive{
          fsm:t="main"
          active:b=yes
        }
      }

      setMprfTws{

        setMprfTargetDesignationRange{
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setStandbyMode"
          actionTemplateName:t="setMprfTwsStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setSearchMode"
          actionTemplateName:t="setMprfTwsSearchMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="designateTarget"
          actionTemplateName:t="designatedTargetTws"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrLockMode"
          actionTemplateName:t="setMprfBvrLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
          actionTemplateName:t="resetTwsMode"
        }

        doCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
        }

        clearTargets{
        }

        setFsmActive{
          fsm:t="main"
          active:b=no
        }

        setFsmActive{
          fsm:t="main"
          active:b=yes
        }
      }

      setHprfVelocity{

        setHprfTargetDesignationRange{
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setStandbyMode"
          actionTemplateName:t="setHprfVelocityStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setSearchMode"
          actionTemplateName:t="setHprfVelocitySearchMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="designateTarget"
          actionTemplateName:t="designatedTargetSearch"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrLockMode"
          actionTemplateName:t="setHprfBvrLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
          actionTemplateName:t="resetRadarSearchMode"
        }

        doCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
        }

        clearTargets{
        }

        setFsmActive{
          fsm:t="main"
          active:b=no
        }

        setFsmActive{
          fsm:t="main"
          active:b=yes
        }
      }
    }

    transitions{

      initToMprf{
        stateFrom:t="init"
        event:t="fsmActivate"
        stateTo:t="mprf"

        actions{

          initMprf{
          }

          setCustomActionTemplate{
            fsm:t="radarSearchModes"
            name:t="restore"
            actionTemplateName:t="setMprf"
          }
        }
      }

      mprfToMprfTws{
        stateFrom:t="mprf"
        command:t="modeSwitch"
        stateTo:t="mprfTws"

        actions{

          setMprfTws{
          }

          setCustomActionTemplate{
            fsm:t="radarSearchModes"
            name:t="restore"
            actionTemplateName:t="setMprfTws"
          }
        }
      }

      mprfTwsToHprfVelocity{
        stateFrom:t="mprfTws"
        command:t="modeSwitch"
        stateTo:t="hprfVelocity"

        actions{

          setHprfVelocity{
          }

          setCustomActionTemplate{
            fsm:t="radarSearchModes"
            name:t="restore"
            actionTemplateName:t="setHprfVelocity"
          }
        }
      }

      hprfVelocityToMprf{
        stateFrom:t="hprfVelocity"
        command:t="modeSwitch"
        stateTo:t="mprf"

        actions{

          setMprf{
          }

          setCustomActionTemplate{
            fsm:t="radarSearchModes"
            name:t="restore"
            actionTemplateName:t="setMprf"
          }
        }
      }
    }
  }

  irstSearchModes{
    stateInit:t="init"

    actionsTemplates{

      setIrstLockTrack{

        setTargetDesignationRange{
          azimuthRange:p2=-90.0, 90.0
          azmithWidth:r=2.0
          elevationRange:p2=-20.0, 60.0
          elevationWidth:r=3.0
          distanceRange:p2=0.0, 30000.0
          distanceWidth:r=100.0
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setStandbyMode"
          actionTemplateName:t="setIrstStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setSearchMode"
          actionTemplateName:t="setIrstSearchMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="designateTarget"
          actionTemplateName:t="designatedTargetSearch"
        }
      }

      initIrst{

        setIrstLockTrack{
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetStandbyMode"
          actionTemplateName:t="resetIrstStandbyMode"
        }
      }

      setIrst{

        setCenterAzimuth{
          source:t="constant"
          value:r=0.0
        }

        setCenterElevation{
          source:t="constant"
          value:r=0.0
        }

        setIrstLockTrack{
        }

        clearTargets{
        }

        setFsmActive{
          fsm:t="main"
          active:b=no
        }

        setFsmActive{
          fsm:t="main"
          active:b=yes
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
          actionTemplateName:t="resetIrstSearchMode"
        }
      }
    }

    transitions{

      init{
        stateFrom:t="init"
        event:t="fsmActivate"
        stateTo:t="ready"

        actions{

          initIrst{
          }

          setCustomActionTemplate{
            fsm:t="irstSearchModes"
            name:t="restore"
            actionTemplateName:t="setIrst"
          }
        }
      }

      activate{
        stateFrom:t="ready"
        event:t="fsmActivate"

        actions{
        }
      }
    }
  }

  search{
    stateInit:t="search"

    transitions{

      scan{
        event:t="update"

        actions{

          scan{
          }

          setCenterAzimuth{
            source:t="constant"
            value:r=0.0
          }

          setCenterAzimuth{
            source:t="designationCue"
          }

          setCenterElevation{
            source:t="constant"
            value:r=0.0
          }

          setCenterElevation{
            source:t="designationCue"
          }
        }
      }

      detect{
        event:t="targetInSight"

        actions{

          setDistGatePos{
            source:t="continuousScale"
            width:r=0.0
          }

          setRelSpeedGatePos{
            source:t="continuousScale"
            width:r=0.0
          }

          detectTarget{
          }
        }
      }

      addTarget{
        event:t="targetDetected"

        actions{

          addTarget{
          }

          updateActiveDetectedTarget{
          }
        }
      }

      switchSelectedTarget{
        command:t="switchTarget"

        actions{

          setNextDetectedTargetActive{
          }
        }
      }

      setCueAzimuth{
        command:t="cueAxisX"

        actions{

          setCueAzimuth{
          }
        }
      }

      setCueDist{
        command:t="cueAxisY"

        actions{

          setCueDist{
          }

          setCueDopplerSpeed{
          }
        }
      }

      setCueElevation{
        command:t="cueAxisZ"

        actions{

          setCueElevation{
          }
        }
      }

      setSelectedTarget{
        command:t="switchToTarget"

        actions{

          setDetectedTargetActive{
          }
        }
      }
    }
  }

  tws{
    stateInit:t="search"

    transitions{

      scan{
        event:t="update"
        stateFrom:t="track"
        stateTo:t="search"

        actions{

          scan{
          }

          extrapolateTargetsOfInterest{
          }

          clearTargetsOfInterest{
            timeOut:r=4.0
          }

          setCueToActiveTargetOfInterest{
          }

          setCenterAzimuth{
            source:t="constant"
            value:r=0.0
          }

          setCenterAzimuth{
            source:t="designationCue"
          }

          setCenterAzimuth{
            source:t="activeTargetOfInterest"
          }

          setCenterElevation{
            source:t="constant"
            value:r=0.0
          }

          setCenterElevation{
            source:t="designationCue"
          }

          setCenterElevation{
            source:t="activeTargetOfInterest"
          }
        }
      }

      detect{
        event:t="targetInSight"

        actions{

          setDistGatePos{
            source:t="continuousScale"
            width:r=0.0
          }

          setRelSpeedGatePos{
            source:t="continuousScale"
            width:r=0.0
          }

          detectTarget{
          }
        }
      }

      addTarget{
        event:t="targetDetected"
        stateFrom:t="search"

        actions{

          updateTargetOfInterest{
            limit:i=10
            radius:r=1000.0
            dopplerSpeedGateMaxTime:r=8.0
          }

          updateActiveDetectedTarget{
          }

          setCueToActiveTargetOfInterest{
          }
        }
      }

      switchSelectedTarget{
        command:t="switchTarget"

        actions{

          setNextDetectedTargetActive{
          }
        }
      }

      setCueAzimuth{
        command:t="cueAxisX"

        actions{

          setCueAzimuth{
          }
        }
      }

      setCueDist{
        command:t="cueAxisY"

        actions{

          setCueDist{
          }

          setCueDopplerSpeed{
          }
        }
      }

      setCueElevation{
        command:t="cueAxisZ"

        actions{

          setCueElevation{
          }
        }
      }

      setSelectedTarget{
        command:t="switchToTarget"

        actions{

          setDetectedTargetActive{
          }
        }
      }

      designateTarget{
        command:t="selectTarget"

        actions{

          designateActiveDetectedTarget{
            type:i=0
            sensorIndex:i=1
          }

          designateTargetUnderCue{
            type:i=0
            sensorIndex:i=1
          }
        }
      }

      scanTrack{
        stateFrom:t="search"
        event:t="update"
        stateTo:t="track"

        actions{

          scan{
            periodMult:r=0.01
          }

          extrapolateTargetsOfInterest{
          }

          clearTargetsOfInterest{
            timeOut:r=4.0
          }

          setCueToActiveTargetOfInterest{
          }
        }
      }

      addTargetTrack{
        stateFrom:t="track"
        event:t="targetDetected"

        actions{

          updateTargetOfInterest{
            limit:i=10
            onlyExisting:b=yes
            radius:r=1000.0
            dopplerSpeedGateMaxTime:r=8.0
          }

          updateActiveDetectedTarget{
          }

          setCueToActiveTargetOfInterest{
          }
        }
      }
    }
  }

  radarBvrLock{
    stateInit:t="lock"

    transitions{

      scan{
        event:t="update"

        actions{

          scan{
          }
        }
      }

      detect{
        event:t="targetInSight"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }
    }
  }

  lock{
    stateInit:t="lock"

    transitions{

      scan{
        event:t="update"

        actions{

          scan{
          }
        }
      }

      detect{
        event:t="targetInSight"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }
    }
  }

  radarBvrTrack{
    stateInit:t="init"

    actionsTemplates{

      setMprfTrack{

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="mprfTrack"
        }
      }

      setLprfTrack{

        setTransiver{
          transiver:t="lprf"
        }

        setSignal{
          signal:t="lprfTrack"
        }
      }

      track{

        updateActiveTargetOfInterest{

          dirFilter{
          }

          distFilter{
          }

          dopplerSpeedFilter{
          }
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }

        setRelSpeedGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }
      }

      extrapolate{

        extrapolateTargetsOfInterest{
        }

        clearTargetsOfInterest{
          timeOut:r=3.0
          dirRateLim:r=1.0
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }

        setRelSpeedGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }
      }
    }

    transitions{

      start{
        event:t="fsmActivate"
        stateTo:t="mprf"

        actions{

          setMprfTrack{
          }

          setModeName{
            name:t="PD track"
          }
        }
      }

      tryDetectMprf{
        stateFrom:t="mprfTry"
        event:t="update"

        actions{

          setMprfTrack{
          }

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }

      lprfOkTryDetectMprf{
        stateFrom:t="lprfOkMprfTry"
        event:t="update"

        actions{

          setMprfTrack{
          }

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }

          setLprfTrack{
          }
        }
      }

      tryDetectLprf{
        stateFrom:t="lprfTry"
        event:t="update"

        actions{

          setLprfTrack{
          }

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }

          setMprfTrack{
          }
        }
      }

      detect{
        stateFrom:t="mprf"
        stateFrom:t="lprf"
        event:t="update"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }

      trackMprf{
        stateFrom:t="mprf"
        event:t="targetDetected"

        actions{

          track{
          }
        }
      }

      startTrackMprf{
        stateFrom:t="mprfTry"
        stateFrom:t="lprfOkMprfTry"
        event:t="targetDetected"
        stateTo:t="mprf"

        actions{

          setMprfTrack{
          }

          track{
          }

          setModeName{
            name:t="PD track"
          }
        }
      }

      trackLprf{
        stateFrom:t="lprf"
        event:t="targetDetected"
        stateTo:t="lprfOkMprfTry"

        actions{

          track{
          }
        }
      }

      startTrackLprf{
        stateFrom:t="lprfTry"
        event:t="targetDetected"
        stateTo:t="lprf"

        actions{

          setLprfTrack{
          }

          track{
          }

          setModeName{
            name:t="track"
          }
        }
      }

      mprfToLprf{
        stateFrom:t="mprf"
        stateFrom:t="mprfTry"
        event:t="targetNotDetected"
        stateTo:t="lprfTry"

        actions{

          extrapolate{
          }
        }
      }

      backToLprf{
        stateFrom:t="lprfOkMprfTry"
        event:t="targetNotDetected"
        stateTo:t="lprfTry"

        actions{

          extrapolate{
          }
        }
      }

      lprfToMprf{
        stateFrom:t="lprf"
        event:t="targetNotDetected"
        stateTo:t="mprfTry"

        actions{

          extrapolate{
          }
        }
      }

      lprfTryToMprf{
        stateFrom:t="lprfTry"
        event:t="targetNotDetected"
        stateTo:t="mprfTry"

        actions{

          extrapolate{
          }

          setModeName{
            name:t="track memory"
          }
        }
      }
    }
  }

  radarAcmHmdTrack{
    stateInit:t="init"

    actionsTemplates{

      setMprfTrack{

        setTransiver{
          transiver:t="mprf"
        }

        setSignal{
          signal:t="mprfTrack"
        }
      }

      setIrstTrack{

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irstTrack"
        }
      }

      track{

        updateActiveTargetOfInterest{

          dirFilter{
          }

          distFilter{
          }

          dopplerSpeedFilter{
          }
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }

        setRelSpeedGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }
      }

      extrapolate{

        extrapolateTargetsOfInterest{
        }

        clearTargetsOfInterest{
          timeOut:r=3.0
          dirRateLim:r=1.0
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }

        setRelSpeedGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }
      }
    }

    transitions{

      start{
        event:t="fsmActivate"
        stateTo:t="mprf"

        actions{

          setMprfTrack{
          }

          setModeName{
            name:t="PD track"
          }
        }
      }

      tryDetectMprf{
        stateFrom:t="mprfTry"
        event:t="update"

        actions{

          setMprfTrack{
          }

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }

      irstOkTryDetectMprf{
        stateFrom:t="irstOkMprfTry"
        event:t="update"

        actions{

          setMprfTrack{
          }

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }

          setIrstTrack{
          }
        }
      }

      tryDetectIrst{
        stateFrom:t="irstTry"
        event:t="update"

        actions{

          setIrstTrack{
          }

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }

          setMprfTrack{
          }
        }
      }

      detect{
        stateFrom:t="mprf"
        stateFrom:t="irst"
        event:t="update"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }

      trackMprf{
        stateFrom:t="mprf"
        event:t="targetDetected"

        actions{

          track{
          }
        }
      }

      startTrackMprf{
        stateFrom:t="mprfTry"
        stateFrom:t="irstOkMprfTry"
        event:t="targetDetected"
        stateTo:t="mprf"

        actions{

          setMprfTrack{
          }

          track{
          }

          setModeName{
            name:t="PD track"
          }
        }
      }

      trackIrst{
        stateFrom:t="irst"
        event:t="targetDetected"
        stateTo:t="irstOkMprfTry"

        actions{

          track{
          }
        }
      }

      startTrackIrst{
        stateFrom:t="irstTry"
        event:t="targetDetected"
        stateTo:t="irst"

        actions{

          setIrstTrack{
          }

          track{
          }

          setModeName{
            name:t="IRST track"
          }
        }
      }

      mprfToIrst{
        stateFrom:t="mprf"
        stateFrom:t="mprfTry"
        event:t="targetNotDetected"
        stateTo:t="irstTry"

        actions{

          extrapolate{
          }
        }
      }

      backToIrst{
        stateFrom:t="irstOkMprfTry"
        event:t="targetNotDetected"
        stateTo:t="irstTry"

        actions{

          extrapolate{
          }
        }
      }

      irstToMprf{
        stateFrom:t="irst"
        event:t="targetNotDetected"
        stateTo:t="mprfTry"

        actions{

          extrapolate{
          }
        }
      }

      irstTryToMprf{
        stateFrom:t="irstTry"
        event:t="targetNotDetected"
        stateTo:t="mprfTry"

        actions{

          extrapolate{
          }

          setModeName{
            name:t="track memory"
          }
        }
      }
    }
  }

  irstTrack{
    stateInit:t="track"

    transitions{

      detect{
        event:t="update"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }

      track{
        event:t="targetDetected"

        actions{

          updateActiveTargetOfInterest{

            dirFilter{
            }

            distFilter{
            }

            dopplerSpeedFilter{
            }
          }

          setCenterAzimuth{
            source:t="activeTargetOfInterest"
          }

          setCenterElevation{
            source:t="activeTargetOfInterest"
          }

          setDistGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }

          setRelSpeedGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }
        }
      }

      extrapolate{
        event:t="targetNotDetected"

        actions{

          extrapolateTargetsOfInterest{
          }

          clearTargetsOfInterest{
            timeOut:r=3.0
            dirRateLim:r=1.0
          }

          setCenterAzimuth{
            source:t="activeTargetOfInterest"
          }

          setCenterElevation{
            source:t="activeTargetOfInterest"
          }

          setDistGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }

          setRelSpeedGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }
        }
      }
    }
  }

  acmLock{
    stateInit:t="lock"

    transitions{

      scan{
        event:t="update"

        actions{

          scan{
          }
        }
      }

      detect{
        event:t="targetInSight"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }
    }
  }

  velocityLock{
    stateInit:t="velocityLock"

    transitions{

      init{
        event:t="fsmActivate"

        actions{

          setTransiver{
            transiver:t="hprfVelocity"
          }

          setSignal{
            signal:t="hprfVelocitySearch"
          }
        }
      }

      scan{
        event:t="update"

        actions{

          scan{
          }
        }
      }

      detect{
        event:t="targetInSight"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }
    }
  }

  illumination{
    stateInit:t="init"

    transitions{

      activate{
        event:t="fsmActivate"
        stateTo:t="active"

        actions{

          checkIlluminationTimeOut{
            transiver:b=yes
            pauseMax:r=30.0
          }
        }
      }

      deactivate{
        event:t="fsmDeactivate"
        stateTo:t="inactive"

        actions{

          setIllumination{
            transiver:b=no
          }
        }
      }

      activateIllumination{
        event:t="sarhMissileLaunch"

        actions{

          setIlluminationTimeOut{
            timeOut:r=60.0
          }
        }
      }

      updateIllumination{
        event:t="update"

        actions{

          checkIlluminationTimeOut{
            transiver:b=yes
            pauseMax:r=30.0
          }
        }
      }
    }
  }

  helmetDesignation{
    stateInit:t="helmetDesignation"

    actionsTemplates{

      designateHelmetTargetDir{

        designateHelmetTarget{
          self:b=yes
        }

        setCenterAzimuth{
          source:t="targetDesignation"
        }

        setCenterElevation{
          source:t="targetDesignation"
        }
      }
    }

    transitions{

      activate{
        event:t="fsmActivate"

        actions{

          designateHelmetTargetDir{
          }
        }
      }

      updateDesignation{
        event:t="update"

        actions{

          designateHelmetTargetDir{
          }
        }
      }
    }
  }
}