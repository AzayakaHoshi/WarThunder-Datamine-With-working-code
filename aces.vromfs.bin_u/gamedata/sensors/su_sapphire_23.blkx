type:t="radar"
name:t="Sapphire-23d_tp_23"
showMissileLaunchZone:b=yes

transivers{

  pulse{
    sideLobesAttenuation:r=-22.0
    pulsePower:r=70000.0
    pulseWidth:r=0.0
    prf:r=1000.0
    band:i=9
    rcs:r=3.0
    range:r=54000.0
    rangeMax:r=100000.0
    timeGainControl:b=yes
    multipathEffect:p4=0.0, 1.0, 60.0, 0.0

    antenna{
      angleHalfSens:r=2.5
      sideLobesSensitivity:r=-30.0
    }
  }

  mti{
    sideLobesAttenuation:r=-22.0
    pulsePower:r=70000.0
    pulseWidth:r=0.0
    prf:r=1000.0
    band:i=9
    rcs:r=3.0
    range:r=19000.0
    rangeMax:r=30000.0
    timeGainControl:b=yes
    multipathEffect:p4=0.0, 1.0, 60.0, 0.0

    antenna{
      angleHalfSens:r=2.5
      sideLobesSensitivity:r=-30.0
    }
  }

  irst{
    power:r=50.0
    band:i=1
    rcs:r=24000.0
    range:r=12000.0
    range1:r=3000.0
    rangeMax:r=40000.0
    visibilityType:t="infraRed"

    antenna{
      angleHalfSens:r=2.5
      sideLobesSensitivity:r=-120.0
    }
  }
}

illuminationTransmitter{
  power:r=270.0

  antenna{
    angleHalfSens:r=10.0
    sideLobesSensitivity:r=-30.0
  }
}

scanPatterns{

  radarSearchHighAlt{
    type:t="pyramide"
    azimuthLimits:p2=-52.0, 52.0
    elevationLimits:p2=-38.0, 43.0
    rollStabLimit:r=75.0
    pitchStabLimit:r=43.0
    period:r=3.6
    width:r=30.0
    barHeight:r=1.5
    barsCount:i=4
    rowMajor:b=yes
    barsOneWay:b=no
  }

  radarSearchLowAlt{
    type:t="pyramide"
    azimuthLimits:p2=-52.0, 52.0
    elevationLimits:p2=-6.0, 43.0
    rollStabLimit:r=75.0
    pitchStabLimit:r=43.0
    period:r=3.6
    width:r=30.0
    barHeight:r=1.5
    barsCount:i=4
    rowMajor:b=yes
    barsOneWay:b=no
  }

  radarBvrLock{
    type:t="pyramide"
    azimuthLimits:p2=-52.0, 52.0
    elevationLimits:p2=-38.0, 43.0
    rollStabLimit:r=75.0
    pitchStabLimit:r=43.0
    period:r=0.4
    width:r=4.0
    barHeight:r=1.5
    barsCount:i=4
    rowMajor:b=yes
    barsOneWay:b=no
    indicate:b=yes
  }

  radarTrack{
    type:t="no"
    azimuthLimits:p2=-52.0, 52.0
    elevationLimits:p2=-38.0, 43.0
  }

  irstSearch1{
    type:t="pyramide"
    azimuthLimits:p2=-30.0, 30.0
    elevationLimits:p2=-14.5, 0.5
    rollStabLimit:r=70.0
    period:r=2.0
    centerElevation:r=-7.0
    width:r=30.0
    barHeight:r=2.15
    barsCount:i=7
    rowMajor:b=yes
    barsOneWay:b=no
  }

  irstSearch2{
    type:t="pyramide"
    azimuthLimits:p2=-30.0, 30.0
    elevationLimits:p2=-5.0, 1.5
    rollStabLimit:r=70.0
    period:r=0.2
    centerElevation:r=-3.0
    width:r=7.5
    barHeight:r=2.15
    barsCount:i=3
    rowMajor:b=yes
    barsOneWay:b=no
  }

  irstBvrLock{
    type:t="pyramide"
    azimuthLimits:p2=-30.0, 30.0
    elevationLimits:p2=-30.0, 5.0
    rollStabLimit:r=70.0
    period:r=0.4
    centerElevation:r=-7.0
    width:r=2.5
    barHeight:r=2.15
    barsCount:i=7
    rowMajor:b=yes
    indicate:b=yes
  }

  irstTrack{
    type:t="no"
    azimuthLimits:p2=-30.0, 30.0
    elevationLimits:p2=-30.0, 5.0
  }
}

signals{

  pulseLong{
    dynamicRange:p2=40.0, 12.0
    groundClutter:b=yes
    aircraftAsTarget:b=yes
    friendFoeId:b=yes

    distance{
      presents:b=yes
      minValue:r=1200.0
      maxValue:r=90000.0
      width:r=900.0
    }
  }

  pulseShort{
    dynamicRange:p2=40.0, 12.0
    groundClutter:b=yes
    aircraftAsTarget:b=yes
    friendFoeId:b=yes

    distance{
      presents:b=yes
      minValue:r=300.0
      maxValue:r=90000.0
      width:r=300.0
    }
  }

  pulseShortStc{
    dynamicRange:p2=40.0, 12.0
    groundClutter:b=yes
    aircraftAsTarget:b=yes
    friendFoeId:b=yes

    distance{
      presents:b=yes
      minValue:r=300.0
      maxValue:r=90000.0
      width:r=300.0
    }
  }

  pulseTrack{
    dynamicRange:p2=40.0, 12.0
    groundClutter:b=yes
    aircraftAsTarget:b=yes
    angularAccuracy:r=0.05
    distanceAccuracy:r=15.0
    track:b=yes

    distance{
      presents:b=yes
      minValue:r=300.0
      maxValue:r=90000.0
      width:r=300.0
    }
  }

  pulseTrackStc{
    dynamicRange:p2=40.0, 12.0
    groundClutter:b=yes
    aircraftAsTarget:b=yes
    angularAccuracy:r=0.05
    distanceAccuracy:r=15.0
    track:b=yes

    distance{
      presents:b=yes
      minValue:r=300.0
      maxValue:r=90000.0
      width:r=300.0
    }
  }

  mti{
    dynamicRange:p2=40.0, 12.0
    groundClutter:b=no
    aircraftAsTarget:b=yes
    friendFoeId:b=yes
    absDopplerSpeed:b=yes
    mainBeamDopplerSpeed:b=yes

    distance{
      presents:b=yes
      minValue:r=300.0
      maxValue:r=90000.0
      width:r=300.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=40.0
      maxValue:r=1500.0
      signalWidthMin:r=2.0
      width:r=0.0
    }
  }

  mtiTrack{
    dynamicRange:p2=40.0, 12.0
    groundClutter:b=no
    aircraftAsTarget:b=yes
    angularAccuracy:r=0.05
    distanceAccuracy:r=15.0
    absDopplerSpeed:b=yes
    mainBeamDopplerSpeed:b=yes
    track:b=yes

    distance{
      presents:b=yes
      minValue:r=300.0
      maxValue:r=90000.0
      width:r=300.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=20.0
      maxValue:r=1500.0
      signalWidthMin:r=2.0
      width:r=0.0
    }
  }

  irst{
    rangeFinder:b=no
    rangeFinder:b=no
    groundClutter:b=no
    showBScope:b=no
    showCScope:b=yes
  }
}

scanPatternSets{

  radarSearchHighAlt{
    scanPattern1:t="radarSearchHighAlt"
  }

  radarSearchLowAlt{
    scanPattern1:t="radarSearchLowAlt"
  }

  irstSearch{
    scanPattern1:t="irstSearch1"
    scanPattern2:t="irstSearch2"
  }
}

scopeRangeSets{

  radarSearchHighAlt{
    range1:r=30000.0
    range2:r=60000.0
    range3:r=90000.0
  }

  radarSearchLowAlt{
    range1:r=30000.0
  }

  acm{
    range1:r=10000.0
  }
}

fsms{

  main{
    stateInit:t="init"

    actionsTemplates{

      init{

        setEnabled{
          value:b=no
        }

        setTargetDesignationRange{
        }

        setFsmActive{
          fsm:t="sensorTypes"
          active:b=yes
        }
      }

      setStandbySearchModeCommon{

        setCenterAzimuth{
          source:t="constant"
          value:r=0.0
        }

        setCenterElevation{
          source:t="constant"
          value:r=0.0
        }
      }

      setStandbyModeCommon{

        setStandbySearchModeCommon{
        }

        setEnabled{
          value:b=no
        }
      }

      resetStandbyMode{
      }

      setSearchModeCommon{

        setStandbySearchModeCommon{
        }

        setEnabled{
          value:b=yes
        }

        setCueEnabled{
          value:b=yes
          updateActiveTargetUnderCue:b=no
        }

        setFsmActive{
          fsm:t="search"
          active:b=yes
        }
      }

      resetSearchMode{

        clearTargets{
        }

        setFsmActive{
          fsm:t="search"
          active:b=no
        }

        setCueEnabled{
          value:b=no
        }
      }

      setBvrLockModeCommon{

        setEnabled{
          value:b=yes
        }

        setScanPatternSet{
        }

        resetScanPhase{
        }
      }

      setBvrLockMode{

        setBvrLockModeCommon{
        }

        setFsmActive{
          fsm:t="lock"
          active:b=yes
        }

        setCenterAzimuth{
          source:t="targetDesignation"
        }
      }

      designatedTargetSearch{

        designateTargetUnderCue{
          type:i=0
          self:b=yes
          sensorIndex:i=0
        }

        designateActiveDetectedTarget{
          type:i=0
          self:b=yes
          sensorIndex:i=0
        }
      }

      resetBvrLockMode{

        setFsmActive{
          fsm:t="lock"
          active:b=no
        }
      }

      setTrackMode{

        setEnabled{
          value:b=yes
        }

        setScanPatternSet{
        }

        addTargetOfInterest{
        }

        setLastTargetOfInterestActive{
        }

        updateActiveTargetOfInterest{
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }

        setRelSpeedGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }

        setFsmActive{
          fsm:t="track"
          active:b=yes
        }
      }

      resetTrackMode{

        clearTargetsOfInterest{
        }

        setFsmActive{
          fsm:t="track"
          active:b=no
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=no
        }
      }

      setRadarStandbyModeName{

        doCustomActionTemplate{
          fsm:t="radarStandbySearchModes"
          name:t="setStandbyModeName"
        }
      }

      setRadarSearchModeName{

        doCustomActionTemplate{
          fsm:t="radarStandbySearchModes"
          name:t="setSearchModeName"
        }
      }

      setRadarBvrLockModeName{

        doCustomActionTemplate{
          fsm:t="radarStandbySearchModes"
          name:t="setBvrLockModeName"
        }
      }

      resetRadarStandbyMode{

        resetStandbyMode{
        }

        setFsmActive{
          fsm:t="radarStandbySearchModes"
          active:b=no
        }

        setFsmActive{
          fsm:t="scanZoneAzimuth"
          active:b=no
        }
      }

      resetIrstStandbyMode{

        resetStandbyMode{
        }
      }

      resetRadarSearchMode{

        resetSearchMode{
        }

        setFsmActive{
          fsm:t="radarStandbySearchModes"
          active:b=no
        }

        setFsmActive{
          fsm:t="scanZoneAzimuth"
          active:b=no
        }
      }

      resetIrstSearchMode{

        resetSearchMode{
        }
      }

      setBsvModeCommon{

        setTransiver{
          transiver:t="pulse"
        }

        setSignal{
          signal:t="pulseLong"
        }

        setScanPatternSet{
          scanPatternSet:t="radarSearchHighAlt"
        }

        setScopeRangeSet{
          scopeRangeSet:t="radarSearchHighAlt"
        }
      }

      setRadarStandbyMode{

        setStandbyModeCommon{
        }

        setBsvModeCommon{
        }

        setFsmActive{
          fsm:t="radarStandbySearchModes"
          active:b=yes
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setRadarModeName"
          actionTemplateName:t="setRadarStandbyModeName"
        }

        setRadarStandbyModeName{
        }
      }

      setIrstStandbyMode{

        setStandbyModeCommon{
        }

        setScanPatternSet{
          scanPatternSet:t="irstSearch"
        }

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irst"
        }

        setModeName{
          name:t="IRST standby"
        }
      }

      setRadarSearchMode{

        setSearchModeCommon{
        }

        setBsvModeCommon{
        }

        setFsmActive{
          fsm:t="radarStandbySearchModes"
          active:b=yes
        }

        setFsmActive{
          fsm:t="scanZoneAzimuth"
          active:b=yes
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setRadarModeName"
          actionTemplateName:t="setRadarSearchModeName"
        }

        setRadarSearchModeName{
        }
      }

      setIrstSearchMode{

        setSearchModeCommon{
        }

        setScanPatternSet{
          scanPatternSet:t="irstSearch"
        }

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irst"
        }

        setModeName{
          name:t="IRST search"
        }
      }

      setRadarBvrLockMode{

        setBvrLockMode{
        }

        setDistGatePos{
          source:t="targetDesignation"
          width:r=2000.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=1800.0
        }

        setScanPattern{
          scanPattern:t="radarBvrLock"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setRadarModeName"
          actionTemplateName:t="setRadarBvrLockModeName"
        }

        setRadarBvrLockModeName{
        }
      }

      setIrstBvrLockMode{

        setBvrLockMode{
        }

        setFsmActive{
          fsm:t="lock"
          active:b=yes
        }

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irst"
        }

        setDistGatePos{
          source:t="targetDesignation"
          pos:r=15000.0
          width:r=30000.0
        }

        setRelSpeedGatePos{
          source:t="constRange"
          pos:r=0.0
          width:r=1800.0
        }

        setScanPattern{
          scanPattern:t="irstBvrLock"
        }

        setModeName{
          name:t="IRST acquisition"
        }
      }

      resetRadarBvrLockMode{

        resetBvrLockMode{
        }
      }

      resetIrstBvrLockMode{

        resetBvrLockMode{
        }
      }

      setRadarBvrTrackMode{

        setTrackMode{
        }

        setScanPattern{
          scanPattern:t="radarTrack"
        }

        setFsmActive{
          fsm:t="radarTrackModes"
          active:b=yes
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=yes
        }
      }

      resetRadarBvrTrackMode{

        resetTrackMode{
        }

        setFsmActive{
          fsm:t="radarTrackModes"
          active:b=no
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=no
        }
      }

      updateRadarBvrTrackMode{

        setScanPattern{
          scanPattern:t="radarTrack"
        }

        setFsmActive{
          fsm:t="radarTrackModes"
          active:b=yes
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=yes
        }
      }

      setIrstTrackModeCommon{

        setTransiver{
          transiver:t="irst"
        }

        setSignal{
          signal:t="irst"
        }

        setScanPattern{
          scanPattern:t="irstTrack"
        }

        setModeName{
          name:t="IRST track"
        }
      }

      updateIrstBvrTrackMode{

        setIrstTrackModeCommon{
        }

        setFsmActive{
          fsm:t="radarTrackModes"
          active:b=no
        }

        setFsmActive{
          fsm:t="illumination"
          active:b=no
        }
      }

      setIrstBvrTrackMode{

        setTrackMode{
        }

        setIrstTrackModeCommon{
        }
      }

      resetIrstBvrTrackMode{

        resetTrackMode{
        }
      }
    }

    transitions{

      init{
        stateFrom:t="init"
        event:t="init"
        stateTo:t="standby"

        actions{

          init{
          }
        }
      }

      standbyToSearch{
        stateFrom:t="standby"
        command:t="switch"
        event:t="enable"
        stateTo:t="search"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetStandbyMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      searchToStandby{
        stateFrom:t="search"
        command:t="switch"
        event:t="disable"
        stateTo:t="standby"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetSearchMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      bvrLock{
        stateFrom:t="search"
        command:t="selectTarget"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="designateTarget"
          }
        }
      }

      checkDesignationType0{
        stateFrom:t="search"
        command:t="designateTarget"
        stateTo:t="checkDesignationType0"

        actions{

          checkDesignationTypeEquals{
            value:i=0
          }
        }
      }

      bvrLockResponce{
        stateFrom:t="checkDesignationType0"
        event:t="designationTypeEquals"
        stateTo:t="bvrLock"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetSearchMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setBvrLockMode"
          }
        }
      }

      returnToSearchMode{
        stateFrom:t="checkDesignationType0"
        event:t="designationTypeNotEquals"
        stateTo:t="search"
      }

      bvrLockToBvrTrack{
        stateFrom:t="bvrLock"
        event:t="targetDetected"
        stateTo:t="bvrTrack"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetBvrLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setBvrTrackMode"
          }
        }
      }

      failedBvrLock{
        stateFrom:t="bvrLock"
        event:t="scanFinished"
        stateTo:t="search"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetBvrLockMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      finishedBvrTrack{
        stateFrom:t="bvrTrack"
        event:t="targetsOfInterestCleanup"
        command:t="selectTarget"
        stateTo:t="search"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetBvrTrackMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      updateStandbyMode{
        stateFrom:t="standby"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetStandbyMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setStandbyMode"
          }
        }
      }

      updateSearchMode{
        stateFrom:t="search"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="resetSearchMode"
          }

          doCustomActionTemplate{
            fsm:t="main"
            name:t="setSearchMode"
          }
        }
      }

      switchScanPattern{
        stateFrom:t="standby"
        stateFrom:t="search"
        command:t="scanPatternSwitch"

        actions{

          setNextScanPattern{
          }
        }
      }

      switchScopeRange{
        command:t="rangeSwitch"

        actions{

          setNextScopeRange{
          }
        }
      }

      updateBvrTrackMode{
        stateFrom:t="bvrTrack"
        event:t="fsmActivate"

        actions{

          doCustomActionTemplate{
            fsm:t="main"
            name:t="updateBvrTrackMode"
          }
        }
      }
    }
  }

  sensorTypes{
    stateInit:t="init"

    actionsTemplates{

      init{

        setCustomActionTemplate{
          fsm:t="main"
          name:t="designateTarget"
          actionTemplateName:t="designatedTargetSearch"
        }
      }

      setRadarSet{

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setStandbyMode"
          actionTemplateName:t="setRadarStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setSearchMode"
          actionTemplateName:t="setRadarSearchMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrLockMode"
          actionTemplateName:t="setRadarBvrLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrTrackMode"
          actionTemplateName:t="setRadarBvrTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="updateBvrTrackMode"
          actionTemplateName:t="updateRadarBvrTrackMode"
        }

        setTargetDesignationRange{
          azimuthRange:p2=-52.0, 52.0
          azmithWidth:r=5.0
          elevationRange:p2=-38.0, 43.0
          distanceRange:p2=0.0, 60000.0
          distanceWidth:r=2000.0
          distanceRelWidthMin:r=0.05
        }
      }

      setRadarReset{

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetStandbyMode"
          actionTemplateName:t="resetRadarStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
          actionTemplateName:t="resetRadarSearchMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrLockMode"
          actionTemplateName:t="resetRadarBvrLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrTrackMode"
          actionTemplateName:t="resetRadarBvrTrackMode"
        }
      }

      setIrstSet{

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setStandbyMode"
          actionTemplateName:t="setIrstStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setSearchMode"
          actionTemplateName:t="setIrstSearchMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrLockMode"
          actionTemplateName:t="setIrstBvrLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="setBvrTrackMode"
          actionTemplateName:t="setIrstBvrTrackMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="updateBvrTrackMode"
          actionTemplateName:t="updateIrstBvrTrackMode"
        }

        setTargetDesignationRange{
          azimuthRange:p2=-30.0, 30.0
          azimuthWidth:r=2.5
          elevationRange:p2=-30.0, 5.0
        }
      }

      setIrstReset{

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetStandbyMode"
          actionTemplateName:t="resetIrstStandbyMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetSearchMode"
          actionTemplateName:t="resetIrstSearchMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrLockMode"
          actionTemplateName:t="resetIrstBvrLockMode"
        }

        setCustomActionTemplate{
          fsm:t="main"
          name:t="resetBvrTrackMode"
          actionTemplateName:t="resetIrstBvrTrackMode"
        }
      }

      initRadar{

        setRadarSet{
        }

        setRadarReset{
        }
      }

      setRadar{

        setRadarSet{
        }

        clearTargets{
        }

        setFsmActive{
          fsm:t="main"
          active:b=no
        }

        setFsmActive{
          fsm:t="main"
          active:b=yes
        }

        setRadarReset{
        }
      }

      setIrst{

        setIrstSet{
        }

        clearTargets{
        }

        setFsmActive{
          fsm:t="main"
          active:b=no
        }

        setFsmActive{
          fsm:t="main"
          active:b=yes
        }

        setIrstReset{
        }
      }
    }

    transitions{

      initToRadar{
        stateFrom:t="init"
        event:t="fsmActivate"
        stateTo:t="radar"

        actions{

          init{
          }

          initRadar{
          }
        }
      }

      radarToIrst{
        stateFrom:t="radar"
        command:t="typeSwitch"
        stateTo:t="irst"

        actions{

          setIrst{
          }
        }
      }

      irstToRadar{
        stateFrom:t="irst"
        command:t="typeSwitch"
        stateTo:t="radar"

        actions{

          setRadar{
          }
        }
      }
    }
  }

  radarStandbySearchModes{
    stateInit:t="init"

    actionsTemplates{

      setPulseStandbyModeName{

        setModeName{
          name:t="standby"
        }
      }

      setPulseSearchModeName{

        setModeName{
          name:t="search"
        }
      }

      setPulseBvrLockModeName{

        setModeName{
          name:t="acquisition"
        }
      }

      setMtiStandbyModeName{

        setModeName{
          name:t="MTI standby"
        }
      }

      setMtiSearchModeName{

        setModeName{
          name:t="MTI search"
        }
      }

      setMtiBvrLockModeName{

        setModeName{
          name:t="MTI acquisition"
        }
      }

      resetScanCenter{

        setCenterAzimuth{
          source:t="constant"
          value:r=0.0
        }

        setCenterAzimuth{
          source:t="designationCue"
        }

        setCenterElevation{
          source:t="constant"
          value:r=0.0
        }

        setCenterElevation{
          source:t="designationCue"
        }
      }

      fixScanCenter{

        setCenterAzimuth{
          source:t="constant"
          value:r=0.0
        }

        setCenterElevation{
          source:t="constant"
          value:r=0.0
        }
      }

      initBsv{

        setTransiver{
          transiver:t="pulse"
        }

        setSignal{
          signal:t="pulseLong"
        }

        setScanPatternSet{
          scanPatternSet:t="radarSearchHighAlt"
        }

        setScopeRangeSet{
          scopeRangeSet:t="radarSearchHighAlt"
        }

        setFsmActive{
          fsm:t="scanZoneAzimuth"
          active:b=yes
        }

        setCustomActionTemplate{
          fsm:t="radarStandbySearchModes"
          name:t="setStandbyModeName"
          actionTemplateName:t="setPulseStandbyModeName"
        }

        setCustomActionTemplate{
          fsm:t="radarStandbySearchModes"
          name:t="setSearchModeName"
          actionTemplateName:t="setPulseSearchModeName"
        }

        setCustomActionTemplate{
          fsm:t="radarStandbySearchModes"
          name:t="setBvrLockModeName"
          actionTemplateName:t="setPulseBvrLockModeName"
        }
      }

      setBsv{

        initBsv{
        }

        resetScanCenter{
        }

        doCustomActionTemplate{
          fsm:t="main"
          name:t="setRadarModeName"
        }
      }

      setBsvDh{

        setTransiver{
          transiver:t="pulse"
        }

        setSignal{
          signal:t="pulseShortStc"
        }

        setScanPatternSet{
          scanPatternSet:t="radarSearchHighAlt"
        }

        setScopeRangeSet{
          scopeRangeSet:t="radarSearchHighAlt"
        }

        resetScanCenter{
        }

        setFsmActive{
          fsm:t="scanZoneAzimuth"
          active:b=yes
        }

        setCustomActionTemplate{
          fsm:t="radarStandbySearchModes"
          name:t="setStandbyModeName"
          actionTemplateName:t="setPulseStandbyModeName"
        }

        setCustomActionTemplate{
          fsm:t="radarStandbySearchModes"
          name:t="setSearchModeName"
          actionTemplateName:t="setPulseSearchModeName"
        }

        setCustomActionTemplate{
          fsm:t="radarStandbySearchModes"
          name:t="setBvrLockModeName"
          actionTemplateName:t="setPulseBvrLockModeName"
        }

        doCustomActionTemplate{
          fsm:t="main"
          name:t="setRadarModeName"
        }
      }

      setSmv{

        setTransiver{
          transiver:t="mti"
        }

        setSignal{
          signal:t="pulseShort"
        }

        setScanPatternSet{
          scanPatternSet:t="radarSearchLowAlt"
        }

        setScopeRangeSet{
          scopeRangeSet:t="radarSearchLowAlt"
        }

        resetScanCenter{
        }

        setFsmActive{
          fsm:t="scanZoneAzimuth"
          active:b=yes
        }

        setCustomActionTemplate{
          fsm:t="radarStandbySearchModes"
          name:t="setStandbyModeName"
          actionTemplateName:t="setPulseStandbyModeName"
        }

        setCustomActionTemplate{
          fsm:t="radarStandbySearchModes"
          name:t="setSearchModeName"
          actionTemplateName:t="setPulseSearchModeName"
        }

        setCustomActionTemplate{
          fsm:t="radarStandbySearchModes"
          name:t="setBvrLockModeName"
          actionTemplateName:t="setPulseBvrLockModeName"
        }

        doCustomActionTemplate{
          fsm:t="main"
          name:t="setRadarModeName"
        }
      }

      setMv{

        setTransiver{
          transiver:t="mti"
        }

        setSignal{
          signal:t="mti"
        }

        setScanPatternSet{
          scanPatternSet:t="radarSearchLowAlt"
        }

        setScopeRangeSet{
          scopeRangeSet:t="radarSearchLowAlt"
        }

        fixScanCenter{
        }

        setFsmActive{
          fsm:t="scanZoneAzimuth"
          active:b=no
        }

        setCustomActionTemplate{
          fsm:t="radarStandbySearchModes"
          name:t="setStandbyModeName"
          actionTemplateName:t="setMtiStandbyModeName"
        }

        setCustomActionTemplate{
          fsm:t="radarStandbySearchModes"
          name:t="setSearchModeName"
          actionTemplateName:t="setMtiSearchModeName"
        }

        setCustomActionTemplate{
          fsm:t="radarStandbySearchModes"
          name:t="setBvrLockModeName"
          actionTemplateName:t="setMtiBvrLockModeName"
        }

        doCustomActionTemplate{
          fsm:t="main"
          name:t="setRadarModeName"
        }
      }
    }

    transitions{

      init{
        stateFrom:t="init"
        event:t="fsmActivate"
        stateTo:t="bsv"

        actions{

          initBsv{
          }
        }
      }

      activateBsv{
        stateFrom:t="bsv"
        event:t="fsmActivate"

        actions{

          setBsv{
          }
        }
      }

      updateBsv{
        stateFrom:t="bsv"
        event:t="update"

        actions{

          checkRalt{
            operation:t="less"
            value:r=1400.0
          }

          checkTilt{
            operation:t="less"
            value:r=2.0
          }
        }
      }

      bsvToBsvDh{
        stateFrom:t="bsv"
        event:t="tiltCheckOk"
        stateTo:t="bsvDh"

        actions{

          setBsvDh{
          }
        }
      }

      bsvToSmv{
        stateFrom:t="bsv"
        event:t="raltCheckOk"
        stateTo:t="smv"

        actions{

          setSmv{
          }
        }
      }

      activateBsvDh{
        stateFrom:t="bsvDh"
        event:t="fsmActivate"

        actions{

          setBsvDh{
          }
        }
      }

      updateBsvDh{
        stateFrom:t="bsvDh"
        event:t="update"

        actions{

          checkRalt{
            operation:t="less"
            value:r=1400.0
          }

          checkTilt{
            operation:t="greater"
            value:r=2.5
          }
        }
      }

      bsvDhToBsv{
        stateFrom:t="bsvDh"
        event:t="tiltCheckOk"
        stateTo:t="bsv"

        actions{

          setBsv{
          }
        }
      }

      bsvDhToMv{
        stateFrom:t="bsvDh"
        event:t="raltCheckOk"
        stateTo:t="mv"

        actions{

          setMv{
          }
        }
      }

      activateSmv{
        stateFrom:t="smv"
        event:t="fsmActivate"

        actions{

          setSmv{
          }
        }
      }

      updateSmv{
        stateFrom:t="smv"
        event:t="update"

        actions{

          checkRalt{
            operation:t="greater"
            value:r=1500.0
          }

          checkTilt{
            operation:t="less"
            value:r=-0.5
          }
        }
      }

      smvToMv{
        stateFrom:t="smv"
        event:t="tiltCheckOk"
        stateTo:t="mv"

        actions{

          setMv{
          }
        }
      }

      smvToBsv{
        stateFrom:t="smv"
        event:t="raltCheckOk"
        stateTo:t="bsv"

        actions{

          setBsv{
          }
        }
      }

      activateMv{
        stateFrom:t="mv"
        event:t="fsmActivate"

        actions{

          setMv{
          }
        }
      }

      updateMv{
        stateFrom:t="mv"
        event:t="update"

        actions{

          checkRalt{
            operation:t="greater"
            value:r=1500.0
          }

          checkTilt{
            operation:t="greater"
            value:r=0.0
          }
        }
      }

      mvToSmv{
        stateFrom:t="mv"
        event:t="tiltCheckOk"
        stateTo:t="smv"

        actions{

          setSmv{
          }
        }
      }

      mvToDsvDh{
        stateFrom:t="mv"
        event:t="raltCheckOk"
        stateTo:t="bsvDh"

        actions{

          setBsvDh{
          }
        }
      }
    }
  }

  search{
    stateInit:t="search"

    transitions{

      scan{
        event:t="update"

        actions{

          scan{
          }

          setCenterElevation{
            source:t="constant"
            value:r=0.0
          }

          setCenterElevation{
            source:t="designationCue"
          }
        }
      }

      detect{
        event:t="targetInSight"

        actions{

          setDistGatePos{
            source:t="continuousScale"
            width:r=0.0
          }

          setRelSpeedGatePos{
            source:t="continuousScale"
            width:r=0.0
          }

          detectTarget{
          }
        }
      }

      addTarget{
        event:t="targetDetected"

        actions{

          addTarget{
          }

          updateActiveDetectedTarget{
          }
        }
      }

      switchSelectedTarget{
        command:t="switchTarget"

        actions{

          setNextDetectedTargetActive{
          }
        }
      }

      setCueAzimuth{
        command:t="cueAxisX"

        actions{

          setCueAzimuth{
          }
        }
      }

      setCueDist{
        command:t="cueAxisY"

        actions{

          setCueDist{
          }
        }
      }

      setCueElevation{
        command:t="cueAxisZ"

        actions{

          setCueElevation{
          }
        }
      }

      setSelectedTarget{
        command:t="switchToTarget"

        actions{

          setDetectedTargetActive{
          }
        }
      }
    }
  }

  scanZoneAzimuth{
    stateInit:t="init"

    transitions{

      update{
        event:t="update"

        actions{

          setCenterAzimuth{
            source:t="constant"
            value:r=0.0
          }

          setCenterAzimuth{
            source:t="designationCue"
          }
        }
      }
    }
  }

  lock{
    stateInit:t="lock"

    transitions{

      scan{
        event:t="update"

        actions{

          scan{
          }
        }
      }

      detect{
        event:t="targetInSight"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }
    }
  }

  track{
    stateInit:t="track"

    transitions{

      detect{
        event:t="update"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }

      track{
        event:t="targetDetected"

        actions{

          updateActiveTargetOfInterest{

            dirFilter{
            }

            distFilter{
            }

            dopplerSpeedFilter{
            }
          }

          setCenterAzimuth{
            source:t="activeTargetOfInterest"
          }

          setCenterElevation{
            source:t="activeTargetOfInterest"
          }

          setDistGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }

          setRelSpeedGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }
        }
      }

      extrapolate{
        event:t="targetNotDetected"

        actions{

          extrapolateTargetsOfInterest{
          }

          clearTargetsOfInterest{
            timeOut:r=3.0
            dirRateLim:r=1.0
          }

          setCenterAzimuth{
            source:t="activeTargetOfInterest"
          }

          setCenterElevation{
            source:t="activeTargetOfInterest"
          }

          setDistGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }

          setRelSpeedGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }
        }
      }
    }
  }

  radarTrackModes{
    stateInit:t="init"

    actionsTemplates{

      initBsv{

        setTransiver{
          transiver:t="pulse"
        }

        setSignal{
          signal:t="pulseTrack"
        }

        setModeName{
          name:t="track"
        }
      }

      setBsvDh{

        setTransiver{
          transiver:t="pulse"
        }

        setSignal{
          signal:t="pulseTrackStc"
        }

        setModeName{
          name:t="track"
        }
      }

      setSmv{

        setTransiver{
          transiver:t="pulse"
        }

        setSignal{
          signal:t="pulseTrack"
        }

        setModeName{
          name:t="track"
        }
      }

      setMv{

        setTransiver{
          transiver:t="mti"
        }

        setSignal{
          signal:t="mtiTrack"
        }

        setModeName{
          name:t="MTI track"
        }
      }

      setBsv{

        setTransiver{
          transiver:t="pulse"
        }

        setSignal{
          signal:t="pulseTrack"
        }

        setModeName{
          name:t="track"
        }
      }
    }

    transitions{

      initToBsv{
        event:t="fsmActivate"
        stateTo:t="bsv"

        actions{

          initBsv{
          }
        }
      }

      updateBsv{
        stateFrom:t="bsv"
        event:t="update"

        actions{

          checkRalt{
            operation:t="less"
            value:r=1400.0
          }

          checkTilt{
            operation:t="less"
            value:r=2.0
          }
        }
      }

      bsvToBsvDh{
        stateFrom:t="bsv"
        event:t="tiltCheckOk"
        stateTo:t="bsvDh"

        actions{

          setBsvDh{
          }
        }
      }

      bsvToSmv{
        stateFrom:t="bsv"
        event:t="raltCheckOk"
        stateTo:t="smv"

        actions{

          setSmv{
          }
        }
      }

      returnToBsv{
        stateFrom:t="bsv"
        event:t="fsmActivate"

        actions{

          setBsv{
          }
        }
      }

      updateBsvDh{
        stateFrom:t="bsvDh"
        event:t="update"

        actions{

          checkRalt{
            operation:t="less"
            value:r=1400.0
          }

          checkTilt{
            operation:t="greater"
            value:r=2.5
          }
        }
      }

      bsvDhToBsv{
        stateFrom:t="bsvDh"
        event:t="tiltCheckOk"
        stateTo:t="bsv"

        actions{

          setBsv{
          }
        }
      }

      bsvDhToMv{
        stateFrom:t="bsvDh"
        event:t="raltCheckOk"
        stateTo:t="mv"

        actions{

          setMv{
          }
        }
      }

      returnToBsvDh{
        stateFrom:t="bsvDh"
        event:t="fsmActivate"

        actions{

          setBsvDh{
          }
        }
      }

      updateSmv{
        stateFrom:t="smv"
        event:t="update"

        actions{

          checkRalt{
            operation:t="greater"
            value:r=1500.0
          }

          checkTilt{
            operation:t="less"
            value:r=-0.5
          }
        }
      }

      smvToMv{
        stateFrom:t="smv"
        event:t="tiltCheckOk"
        stateTo:t="mv"

        actions{

          setMv{
          }
        }
      }

      smvToBsvDh{
        stateFrom:t="smv"
        event:t="raltCheckOk"
        stateTo:t="bsv"

        actions{

          setBsv{
          }
        }
      }

      returnToSmv{
        stateFrom:t="smv"
        event:t="fsmActivate"

        actions{

          setSmv{
          }
        }
      }

      updateMv{
        stateFrom:t="mv"
        event:t="update"

        actions{

          checkRalt{
            operation:t="greater"
            value:r=1500.0
          }

          checkTilt{
            operation:t="greater"
            value:r=0.0
          }
        }
      }

      mvToSmv{
        stateFrom:t="mv"
        event:t="tiltCheckOk"
        stateTo:t="smv"

        actions{

          setSmv{
          }
        }
      }

      mvToDsvDh{
        stateFrom:t="mv"
        event:t="raltCheckOk"
        stateTo:t="bsvDh"

        actions{

          setBsvDh{
          }
        }
      }

      returnToMv{
        stateFrom:t="mv"
        event:t="fsmActivate"

        actions{

          setMv{
          }
        }
      }
    }
  }

  irstTrack{
    stateInit:t="track"

    transitions{

      detect{
        event:t="update"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }

      track{
        event:t="targetDetected"

        actions{

          updateActiveTargetOfInterest{

            dirFilter{
            }

            distFilter{
            }

            dopplerSpeedFilter{
            }
          }

          setCenterAzimuth{
            source:t="activeTargetOfInterest"
          }

          setCenterElevation{
            source:t="activeTargetOfInterest"
          }

          setDistGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }

          setRelSpeedGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }
        }
      }

      extrapolate{
        event:t="targetNotDetected"

        actions{

          extrapolateTargetsOfInterest{
          }

          clearTargetsOfInterest{
            timeOut:r=3.0
            dirRateLim:r=1.0
          }

          setCenterAzimuth{
            source:t="activeTargetOfInterest"
          }

          setCenterElevation{
            source:t="activeTargetOfInterest"
          }

          setDistGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }

          setRelSpeedGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }
        }
      }
    }
  }

  illumination{
    stateInit:t="init"

    transitions{

      activate{
        event:t="fsmActivate"
        stateTo:t="active"

        actions{

          checkIlluminationTimeOut{
            transiver:b=yes
            pauseMax:r=20.0
          }
        }
      }

      deactivate{
        event:t="fsmDeactivate"
        stateTo:t="inactive"

        actions{

          setIllumination{
            transiver:b=no
          }
        }
      }

      activateIllumination{
        event:t="sarhMissileLaunch"

        actions{

          setIlluminationTimeOut{
            timeOut:r=60.0
          }
        }
      }

      updateIllumination{
        event:t="update"

        actions{

          checkIlluminationTimeOut{
            transiver:b=yes
            pauseMax:r=20.0
          }
        }
      }
    }
  }
}