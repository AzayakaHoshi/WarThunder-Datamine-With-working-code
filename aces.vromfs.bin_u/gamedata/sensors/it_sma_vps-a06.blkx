type:t="radar"
name:t="SMA VPS-A06"

transivers{

  radarTrack{
    power:r=90.0
    band:i=10
    rcs:r=5.0
    range:r=10000.0
    rangeMax:r=10000.0

    antenna{

      azimuth{
        angleHalfSens:r=1.5
        sideLobesSensitivity:r=-35.0
      }

      elevation{
        angleHalfSens:r=1.5
        sideLobesSensitivity:r=-35.0
      }
    }
  }

  irstTrack{
    power:r=200.0
    band:i=-1
    rcs:r=1.0
    range:r=8000.0
    rangeMax:r=10000.0
    visibilityType:t="infraRed"
    range0:r=0.0
    range1:r=100000.0
    range2:r=0.0
    range3:r=0.0
    range4:r=0.0
    range5:r=0.0
    range6:r=0.0
    range7:r=0.0

    antenna{
      angleHalfSens:r=0.4
      sideLobesSensitivity:r=-120.0
    }
  }
}

scanPatterns{

  radarLock{
    type:t="pyramide"
    azimuthLimits:p2=-90.0, 90.0
    elevationLimits:p2=-10.0, 80.0
    yawStabLimit:r=180.0
    pitchStabLimit:r=80.0
    rollStabLimit:r=10.0
    period:r=0.25
    width:r=22.5
    barHeight:r=3.0
    barsCount:i=3
    rowMajor:b=no
    indicate:b=yes
  }

  radarLosLock{
    type:t="pyramide"
    azimuthLimits:p2=-90.0, 90.0
    elevationLimits:p2=-10.0, 80.0
    yawStabLimit:r=180.0
    pitchStabLimit:r=80.0
    rollStabLimit:r=10.0
    period:r=0.25
    width:r=0.75
    barHeight:r=1.5
    barsCount:i=1
    rowMajor:b=no
    indicate:b=yes
  }

  radarTrack{
    type:t="no"
    azimuthLimits:p2=-90.0, 90.0
    elevationLimits:p2=-10.0, 80.0
    yawStabLimit:r=180.0
    pitchStabLimit:r=80.0
    rollStabLimit:r=10.0
  }

  irstLock{
    type:t="pyramide"
    azimuthLimits:p2=-20.0, 20.0
    elevationLimits:p2=-10.0, 80.0
    yawStabLimit:r=180.0
    pitchStabLimit:r=80.0
    rollStabLimit:r=10.0
    period:r=0.1
    width:r=22.5
    barHeight:r=0.4
    barsCount:i=12
    rowMajor:b=no
    indicate:b=yes
  }

  irstLosLock{
    type:t="pyramide"
    azimuthLimits:p2=-20.0, 20.0
    elevationLimits:p2=-10.0, 80.0
    yawStabLimit:r=180.0
    pitchStabLimit:r=80.0
    rollStabLimit:r=10.0
    period:r=0.25
    width:r=0.4
    barHeight:r=0.4
    barsCount:i=2
    rowMajor:b=no
    indicate:b=yes
  }

  irstTrack{
    type:t="no"
    azimuthLimits:p2=-20.0, 20.0
    elevationLimits:p2=-10.0, 80.0
    yawStabLimit:r=180.0
    pitchStabLimit:r=80.0
    rollStabLimit:r=10.0
  }
}

signals{

  radarTrack{
    groundClutter:b=no
    angularAccuracy:r=0.017
    distanceAccuracy:r=5.0
    absDopplerSpeed:b=yes
    track:b=yes

    distance{
      presents:b=yes
      minValue:r=500.0
      maxValue:r=15000.0
      width:r=60.0
    }

    dopplerSpeed{
      presents:b=yes
      minValue:r=15.0
      maxValue:r=1000.0
      signalWidthMin:r=5.0
      width:r=0.0
    }
  }

  irstTrack{
    groundClutter:b=no
    angularAccuracy:r=0.01
    distanceAccuracy:r=2.0
    targetRadiusMin:r=0.2

    distance{
      presents:b=yes
      minValue:r=30.0
      maxValue:r=10000.0
    }

    dopplerSpeed{
      presents:b=no
    }
  }
}

fsms{

  main{
    stateInit:t="init"

    actionsTemplates{

      init{

        setEnabled{
          value:b=no
        }

        setTargetDesignationRange{
        }
      }

      setStandbyModeCommon{

        setEnabled{
          value:b=no
        }

        setCenterAzimuth{
          source:t="constant"
          value:r=0.0
        }

        clearTargetsOfInterest{
        }

        setFsmActive{
          fsm:t="lock"
          active:b=no
        }

        resetTrackMode{
        }
      }

      setRadarStandbyMode{

        setStandbyModeCommon{
        }

        setModeName{
          name:t="standby"
        }

        setScanPattern{
          scanPattern:t="radarLock"
        }

        setCenterElevation{
          source:t="constant"
          value:r=22.5
        }
      }

      setIrstStandbyMode{

        setStandbyModeCommon{
        }

        setModeName{
          name:t="IRST standby"
        }

        setScanPattern{
          scanPattern:t="irstLosLock"
        }

        setCenterElevation{
          source:t="constant"
          value:r=22.5
        }
      }

      setLockModeCommon{

        setWeaponDetectionAllowance{
          source:t="const"
          value:b=yes
        }

        setDesignatedTarget{
          set:b=yes
        }

        setEnabled{
          value:b=yes
        }

        resetScanPhase{
        }

        setCenterAzimuth{
          source:t="targetDesignation"
        }

        clearTargetsOfInterest{
        }

        setFsmActive{
          fsm:t="lock"
          active:b=yes
        }
      }

      setRadarLockModeCommon{

        setLockModeCommon{
        }

        setModeName{
          name:t="acquisition"
        }

        setCenterElevation{
          source:t="constant"
          value:r=22.5
        }

        setDistGatePos{
          source:t="targetDesignation"
          width:r=1000.0
        }
      }

      setIrstLockModeCommon{

        setLockModeCommon{
        }

        setModeName{
          name:t="acquisition"
        }

        setCenterElevation{
          source:t="constant"
          value:r=22.5
        }

        setDistGatePos{
          source:t="targetDesignation"
          width:r=100.0
        }
      }

      setRadarLockModeCue{

        setRadarLockModeCommon{
        }

        setScanPattern{
          scanPattern:t="radarLock"
        }
      }

      setIrstLockModeCue{

        setRadarLockModeCommon{
        }

        setScanPattern{
          scanPattern:t="irstLock"
        }
      }

      setRadarLockModeTarget{

        setRadarLockModeCommon{
        }

        setScanPattern{
          scanPattern:t="radarLock"
        }
      }

      setIrstLockModeTarget{

        setRadarLockModeCommon{
        }

        setScanPattern{
          scanPattern:t="irstLock"
        }
      }

      setLosVisualLockModeCommon{

        setEnabled{
          value:b=yes
        }

        resetScanPhase{
        }

        clearTargetsOfInterest{
        }

        setCenterAzimuth{
          source:t="targetDesignation"
        }

        setCenterElevation{
          source:t="targetDesignation"
        }

        setFsmActive{
          fsm:t="lock"
          active:b=yes
        }
      }

      setRadarLosVisualLockModeCommon{

        setScanPattern{
          scanPattern:t="radarLosLock"
        }

        setLosVisualLockModeCommon{
        }
      }

      setIrstLosVisualLockModeCommon{

        setScanPattern{
          scanPattern:t="irstLosLock"
        }

        setLosVisualLockModeCommon{
        }
      }

      setLosLockModeCommon{

        setEnabled{
          value:b=yes
        }

        setWeaponDetectionAllowance{
          source:t="targetDesignation"
        }

        setDesignatedTarget{
          set:b=no
        }
      }

      setRadarLosLockMode{

        setRadarLosVisualLockModeCommon{
        }

        setLosLockModeCommon{
        }

        setModeName{
          name:t="acquisition"
        }

        setDistGatePos{
          source:t="constRange"
          pos:r=8375.0
          width:r=15250.0
        }
      }

      setIrstLosLockMode{

        setIrstLosVisualLockModeCommon{
        }

        setLosLockModeCommon{
        }

        setModeName{
          name:t="IRST acquisition"
        }

        setDistGatePos{
          source:t="constRange"
          pos:r=5000.0
          width:r=10000.0
        }
      }

      setVisualLockModeCommon{

        setModeName{
          name:t="acquisition"
        }

        setEnabled{
          value:b=yes
        }

        setWeaponDetectionAllowance{
          source:t="const"
          value:b=yes
        }

        setDesignatedTarget{
          set:b=yes
        }
      }

      setRadarVisualLockMode{

        setRadarLosVisualLockModeCommon{
        }

        setVisualLockModeCommon{
        }

        setDistGatePos{
          source:t="targetDesignation"
          width:r=1000.0
        }
      }

      setIrstVisualLockMode{

        setIrstLosVisualLockModeCommon{
        }

        setVisualLockModeCommon{
        }

        setDistGatePos{
          source:t="targetDesignation"
          width:r=100.0
        }
      }

      setTrackModeCommon{

        setEnabled{
          value:b=yes
        }

        setWeaponDetectionAllowance{
          source:t="const"
          value:b=yes
        }

        setDesignatedTarget{
          set:b=no
        }

        clearTargetsOfInterest{
        }

        addTargetOfInterest{
        }

        setLastTargetOfInterestActive{
        }

        updateActiveTargetOfInterest{
        }

        setCenterAzimuth{
          source:t="activeTargetOfInterest"
        }

        setCenterElevation{
          source:t="activeTargetOfInterest"
        }

        setDistGatePos{
          source:t="activeTargetOfInterest"
          width:r=0.0
        }

        setFsmActive{
          fsm:t="track"
          active:b=yes
        }
      }

      setRadarTrackMode{

        setTrackModeCommon{
        }

        setModeName{
          name:t="track"
        }

        setScanPattern{
          scanPattern:t="radarTrack"
        }
      }

      setIrstTrackMode{

        setTrackModeCommon{
        }

        setModeName{
          name:t="IRST track"
        }

        setScanPattern{
          scanPattern:t="irstTrack"
        }
      }

      resetTrackMode{

        setFsmActive{
          fsm:t="track"
          active:b=no
        }
      }

      setRadar{

        setTransiver{
          transiver:t="radarTrack"
        }

        setSignal{
          signal:t="radarTrack"
        }
      }

      setIrst{

        setTransiver{
          transiver:t="irstTrack"
        }

        setSignal{
          signal:t="irstTrack"
        }
      }
    }

    transitions{

      init{
        stateFrom:t="init"
        event:t="init"
        stateTo:t="radarStandby"

        actions{

          init{
          }

          setRadarStandbyMode{
          }

          setRadar{
          }
        }
      }

      checkRadarLockTypeCue{
        stateFrom:t="radarStandby"
        command:t="designateTarget"
        stateTo:t="checkRadarLockTypeCue"

        actions{

          checkDesignationTypeEquals{
            type:t="cue"
          }
        }
      }

      radarLockCue{
        stateFrom:t="checkRadarLockTypeCue"
        event:t="designationTypeEquals"
        stateTo:t="radarLockCue"

        actions{

          setRadarLockModeCue{
          }
        }
      }

      checkRadarLockTypeTarget{
        stateFrom:t="checkRadarLockTypeCue"
        event:t="designationTypeNotEquals"
        stateTo:t="checkRadarLockTypeTarget"

        actions{

          checkDesignationTypeEquals{
            type:t="target"
          }
        }
      }

      lockRadarTarget{
        stateFrom:t="checkRadarLockTypeTarget"
        event:t="designationTypeEquals"
        stateTo:t="radarLockTarget"

        actions{

          setRadarLockModeTarget{
          }
        }
      }

      checkRadarLockTypeLos{
        stateFrom:t="checkRadarLockTypeTarget"
        event:t="designationTypeNotEquals"
        stateTo:t="checkRadarLockTypeLos"

        actions{

          checkDesignationTypeEquals{
            type:t="los"
          }
        }
      }

      checkRadarLockTypeLos{
        stateFrom:t="checkRadarLockTypeLos"
        event:t="designationTypeNotEquals"
        stateTo:t="checkRadarLockTypeVisual"

        actions{

          checkDesignationTypeEquals{
            type:t="visual"
          }
        }
      }

      lockRadarLos{
        stateFrom:t="checkRadarLockTypeLos"
        event:t="designationTypeEquals"
        stateTo:t="radarLosLock"

        actions{

          setRadarLosLockMode{
          }
        }
      }

      lockRadarVisual{
        stateFrom:t="checkRadarLockTypeVisual"
        event:t="designationTypeEquals"
        stateTo:t="radarVisualLock"

        actions{

          setRadarVisualLockMode{
          }
        }
      }

      finishRadarLockTypeCheck{
        stateFrom:t="checkRadarLockTypeVisual"
        event:t="designationTypeNotEquals"
        stateTo:t="radarStandby"
      }

      radarTrack{
        stateFrom:t="radarLockCue"
        stateFrom:t="radarLockTarget"
        stateFrom:t="radarLosLock"
        stateFrom:t="radarVisualLock"
        event:t="targetDetected"
        stateTo:t="radarTrack"

        actions{

          setRadarTrackMode{
          }

          setFsmActive{
            fsm:t="lock"
            active:b=no
          }
        }
      }

      radarFailedLock{
        stateFrom:t="radarLockCue"
        stateFrom:t="radarLockTarget"
        stateFrom:t="radarLosLock"
        stateFrom:t="radarVisualLock"
        event:t="scanFinished"
        stateTo:t="radarStandby"

        actions{

          setRadarStandbyMode{
          }

          setFsmActive{
            fsm:t="lock"
            active:b=no
          }
        }
      }

      radarFinishedTrack{
        stateFrom:t="radarTrack"
        event:t="targetsOfInterestCleanup"
        command:t="selectTarget"
        command:t="designateTarget"
        stateTo:t="radarStandby"

        actions{

          setRadarStandbyMode{
          }

          resetTrackMode{
          }
        }
      }

      checkIrstLockTypeCue{
        stateFrom:t="irstStandby"
        command:t="designateTarget"
        stateTo:t="checkIrstLockTypeCue"

        actions{

          checkDesignationTypeEquals{
            type:t="cue"
          }
        }
      }

      irstLockCue{
        stateFrom:t="checkIrstLockTypeCue"
        event:t="designationTypeEquals"
        stateTo:t="irstLockCue"

        actions{

          setIrstLockModeCue{
          }
        }
      }

      checkIrstLockTypeTarget{
        stateFrom:t="checkIrstLockTypeCue"
        event:t="designationTypeNotEquals"
        stateTo:t="checkIrstLockTypeTarget"

        actions{

          checkDesignationTypeEquals{
            type:t="target"
          }
        }
      }

      lockIrstTarget{
        stateFrom:t="checkIrstLockTypeTarget"
        event:t="designationTypeEquals"
        stateTo:t="irstLockTarget"

        actions{

          setIrstLockModeTarget{
          }
        }
      }

      checkIrstLockTypeLos{
        stateFrom:t="checkIrstLockTypeTarget"
        command:t="designateTarget"
        stateTo:t="checkIrstLockTypeLos"

        actions{

          checkDesignationTypeEquals{
            type:t="los"
          }
        }
      }

      checkIrstLockTypeLos{
        stateFrom:t="checkIrstLockTypeLos"
        event:t="designationTypeNotEquals"
        stateTo:t="checkIrstLockTypeVisual"

        actions{

          checkDesignationTypeEquals{
            type:t="visual"
          }
        }
      }

      lockIrstLos{
        stateFrom:t="checkIrstLockTypeLos"
        event:t="designationTypeEquals"
        stateTo:t="irstLosLock"

        actions{

          setIrstLosLockMode{
          }
        }
      }

      lockIrstVisual{
        stateFrom:t="checkIrstLockTypeVisual"
        event:t="designationTypeEquals"
        stateTo:t="irstVisualLock"

        actions{

          setIrstVisualLockMode{
          }
        }
      }

      finishIrstLockTypeCheck{
        stateFrom:t="checkIrstLockTypeVisual"
        event:t="designationTypeNotEquals"
        stateTo:t="irstStandby"
      }

      irstTrack{
        stateFrom:t="irstLockCue"
        stateFrom:t="irstLockTarget"
        stateFrom:t="irstLosLock"
        stateFrom:t="irstVisualLock"
        event:t="targetDetected"
        stateTo:t="irstTrack"

        actions{

          setIrstTrackMode{
          }

          setFsmActive{
            fsm:t="lock"
            active:b=no
          }
        }
      }

      irstFailedLock{
        stateFrom:t="irstLockCue"
        stateFrom:t="irstLockTarget"
        stateFrom:t="irstLosLock"
        stateFrom:t="irstVisualLock"
        event:t="scanFinished"
        stateTo:t="irstStandby"

        actions{

          setIrstStandbyMode{
          }

          setFsmActive{
            fsm:t="lock"
            active:b=no
          }
        }
      }

      irstFinishedTrack{
        stateFrom:t="irstTrack"
        event:t="targetsOfInterestCleanup"
        command:t="selectTarget"
        command:t="designateTarget"
        stateTo:t="irstStandby"

        actions{

          setIrstStandbyMode{
          }

          resetTrackMode{
          }
        }
      }

      radarToIrstStandby{
        stateFrom:t="radarStandby"
        command:t="typeSwitch"
        stateTo:t="irstStandby"

        actions{

          setIrstStandbyMode{
          }

          setIrst{
          }
        }
      }

      irstToRadarStandby{
        stateFrom:t="irstStandby"
        command:t="typeSwitch"
        stateTo:t="radarStandby"

        actions{

          setRadarStandbyMode{
          }

          setRadar{
          }
        }
      }

      radarToIrstTrack{
        stateFrom:t="radarTrack"
        command:t="typeSwitch"
        stateTo:t="irstTrack"

        actions{

          setScanPattern{
            scanPattern:t="irstTrack"
          }

          setModeName{
            name:t="IRST track"
          }

          setIrst{
          }
        }
      }

      irstToRadarTrack{
        stateFrom:t="irstTrack"
        command:t="typeSwitch"
        stateTo:t="radarTrack"

        actions{

          setScanPattern{
            scanPattern:t="radarTrack"
          }

          setModeName{
            name:t="track"
          }

          setRadar{
          }
        }
      }
    }
  }

  lock{
    stateInit:t="lock"

    transitions{

      scan{
        event:t="update"

        actions{

          scan{
          }
        }
      }

      detect{
        event:t="targetInSight"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }
    }
  }

  track{
    stateInit:t="track"

    transitions{

      detect{
        event:t="update"

        actions{

          detectTarget{
            ignoreOwnWeapon:b=yes
            rangeMult:r=1.0
          }
        }
      }

      track{
        event:t="targetDetected"

        actions{

          updateActiveTargetOfInterest{

            dirFilter{
              rateLim:p2=0.78, 0.78
              limTimeOut:r=1.0
              inertialTimeMax:r=1.0
            }

            distFilter{
              accelLim:p2=150.0, 150.0
              limTimeOut:r=1.0
              inertialTimeMax:r=1.0
            }
          }

          setCenterAzimuth{
            source:t="activeTargetOfInterest"
          }

          setCenterElevation{
            source:t="activeTargetOfInterest"
          }

          setDistGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }
        }
      }

      extrapolate{
        event:t="targetNotDetected"

        actions{

          extrapolateTargetsOfInterest{
          }

          clearTargetsOfInterest{
            timeOut:r=2.0
            dirRateLim:r=0.78
          }

          setCenterAzimuth{
            source:t="activeTargetOfInterest"
          }

          setCenterElevation{
            source:t="activeTargetOfInterest"
          }

          setDistGatePos{
            source:t="activeTargetOfInterest"
            width:r=0.0
          }
        }
      }
    }
  }
}